{"version":3,"names":["deburr","forEach","replace","sortBy","Contacts","formatContact","id","contact","phoneNumber","jobTitle","middleName","givenName","familyName","name","phone","number","title","notificationEnabled","getContacts","Promise","resolve","reject","getAll","error","allContacts","contactMap","Map","phoneNumbers","index","has","recordID","set","contacts","Array","from","values"],"sources":["getContacts.ts"],"sourcesContent":["import { AppUserContact } from 'incident-code-core';\nimport deburr from 'lodash/deburr';\nimport forEach from 'lodash/forEach';\nimport replace from 'lodash/replace';\nimport sortBy from 'lodash/sortBy';\nimport Contacts, { Contact } from 'react-native-contacts';\n\nconst formatContact = (\n  id: string,\n  contact: Contact,\n  phoneNumber: Contacts.PhoneNumber,\n): AppUserContact => {\n  const { jobTitle, middleName, givenName, familyName } = contact;\n\n  let name: string;\n\n  if (middleName) {\n    name = `${givenName || ''} ${middleName || ''} ${familyName || ''}`;\n  } else {\n    name = `${givenName || ''} ${familyName || ''}`;\n  }\n\n  const phone = replace(phoneNumber.number, /[(,)\\s-]/g, '');\n\n  return {\n    id,\n    name,\n    title: jobTitle,\n    phone,\n    notificationEnabled: true,\n  };\n};\n\nconst getContacts = (): Promise<AppUserContact[]> => {\n  return new Promise((resolve, reject) => {\n    Contacts.getAll((error, allContacts) => {\n      //(\"get Contact from device==>\",error)\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      const contactMap = new Map<string, AppUserContact>();\n      forEach(allContacts, contact => {\n        forEach(contact.phoneNumbers, (phone, index) => {\n          if (!contactMap.has(phone.number)) {\n            const id = `${contact.recordID}-${index}`;\n            contactMap.set(id, formatContact(id, contact, phone));\n          }\n        });\n      });\n\n      const contacts = sortBy(Array.from(contactMap.values()), contact =>\n        deburr(contact.name),\n      );\n\n      resolve(contacts);\n    });\n  });\n};\n\nexport default getContacts;\n"],"mappings":"AACA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,QAAQ,MAAmB,uBAAuB;AAEzD,MAAMC,aAAa,GAAGA,CACpBC,EAAU,EACVC,OAAgB,EAChBC,WAAiC,KACd;EACnB,MAAM;IAAEC,QAAQ;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGL,OAAO;EAE/D,IAAIM,IAAY;EAEhB,IAAIH,UAAU,EAAE;IACdG,IAAI,GAAG,GAAGF,SAAS,IAAI,EAAE,IAAID,UAAU,IAAI,EAAE,IAAIE,UAAU,IAAI,EAAE,EAAE;EACrE,CAAC,MAAM;IACLC,IAAI,GAAG,GAAGF,SAAS,IAAI,EAAE,IAAIC,UAAU,IAAI,EAAE,EAAE;EACjD;EAEA,MAAME,KAAK,GAAGZ,OAAO,CAACM,WAAW,CAACO,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC;EAE1D,OAAO;IACLT,EAAE;IACFO,IAAI;IACJG,KAAK,EAAEP,QAAQ;IACfK,KAAK;IACLG,mBAAmB,EAAE;EACvB,CAAC;AACH,CAAC;AAED,MAAMC,WAAW,GAAGA,CAAA,KAAiC;EACnD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCjB,QAAQ,CAACkB,MAAM,CAAC,CAACC,KAAK,EAAEC,WAAW,KAAK;MACtC;MACA,IAAID,KAAK,EAAE;QACTF,MAAM,CAACE,KAAK,CAAC;QACb;MACF;MAEA,MAAME,UAAU,GAAG,IAAIC,GAAG,CAAyB,CAAC;MACpDzB,OAAO,CAACuB,WAAW,EAAEjB,OAAO,IAAI;QAC9BN,OAAO,CAACM,OAAO,CAACoB,YAAY,EAAE,CAACb,KAAK,EAAEc,KAAK,KAAK;UAC9C,IAAI,CAACH,UAAU,CAACI,GAAG,CAACf,KAAK,CAACC,MAAM,CAAC,EAAE;YACjC,MAAMT,EAAE,GAAG,GAAGC,OAAO,CAACuB,QAAQ,IAAIF,KAAK,EAAE;YACzCH,UAAU,CAACM,GAAG,CAACzB,EAAE,EAAED,aAAa,CAACC,EAAE,EAAEC,OAAO,EAAEO,KAAK,CAAC,CAAC;UACvD;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAMkB,QAAQ,GAAG7B,MAAM,CAAC8B,KAAK,CAACC,IAAI,CAACT,UAAU,CAACU,MAAM,CAAC,CAAC,CAAC,EAAE5B,OAAO,IAC9DP,MAAM,CAACO,OAAO,CAACM,IAAI,CACrB,CAAC;MAEDO,OAAO,CAACY,QAAQ,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,eAAed,WAAW","ignoreList":[]}