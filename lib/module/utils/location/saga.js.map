{"version":3,"names":["api","call","takeLatest","put","getAllGeofenceFailure","getAllGeofenceSuccess","getAllGeofenceRequest","LOCATION_TRACKING_REQUEST","GEO_STATUS_REQUEST","GET_ALL_GEOFENCS_REQUEST","SET_SITE_KEY_LOCATION_REQUEST","insertAllGeofences","Toast","updateLocationTrackData","payload","user","error","errorMessage","Error","message","show","position","positions","CENTER","duration","updateGeoStatus","updateGeoCredStatus","getAllGeofences","console","log","response","getAllUserGeofences","JSON","stringify","data","regionArray","locations","map","locationObject","regions","regionObject","location_id","location_name","name","push","setSiteKeyLocation","setSiteKeyStatus","userId","locationTrackSaga"],"sources":["saga.ts"],"sourcesContent":["/**\n *\n * NotificationScreen saga\n *\n */\n\nimport * as api from '../../api';\nimport { call, takeLatest, put } from 'redux-saga/effects';\nimport { getAllGeofenceFailure, getAllGeofenceSuccess, getAllGeofenceRequest } from './actions';\nimport { LOCATION_TRACKING_REQUEST, GEO_STATUS_REQUEST, GET_ALL_GEOFENCS_REQUEST, SET_SITE_KEY_LOCATION_REQUEST } from './constants';\nimport { GeoStatusRequestAction, LocationTrackRequestAction } from './types';\nimport { insertAllGeofences } from './backgroundGeolocation';\n\n\nimport Toast from 'react-native-root-toast';\n\n/**\n * Saga function to update location track data.\n * @param payload - The payload containing the location track data.\n */\nexport function* updateLocationTrackData({ payload }: LocationTrackRequestAction) {\n  try {\n    yield call(api.user.updateLocationTrackData, payload);\n  } catch (error) {\n    const errorMessage = (error instanceof Error) ? error.message : 'An unknown error occurred';\n    Toast.show(errorMessage, {\n      position: Toast.positions.CENTER,\n      duration: 3000\n    });\n  }\n}\n\n/**\n * Saga function to update geo status.\n * @param payload - The payload containing the geo status data.\n */\nexport function* updateGeoStatus({ payload }: GeoStatusRequestAction) {\n  try {\n    yield call(api.user.updateGeoCredStatus, payload);\n  } catch (error) {\n    const errorMessage = (error instanceof Error) ? error.message : 'An unknown error occurred';\n    Toast.show(errorMessage, {\n      position: Toast.positions.CENTER,\n      duration: 3000\n    });\n  }\n}\n\n/**\n * Saga function to get all geofences.\n * @param payload - The payload containing the geofence data.\n */\nexport function* getAllGeofences({ payload }: LocationTrackRequestAction) {\n  console.log(\"getAllGeofences HIT\")\n  try {\n    const response = yield call(api.user.getAllUserGeofences, payload);\n    console.log(\"get all geofences response ===> \",JSON.stringify(response.data))\n    const regionArray: any[] = []\n    response.data.locations.map((locationObject: any) => {\n      if (locationObject.regions != null) {\n        locationObject.regions.map((regionObject: any) => {\n          regionObject.location_id = locationObject.location_id\n          regionObject.location_name = locationObject.name\n          regionArray.push(regionObject)\n        })\n      }\n    })\n    yield put(getAllGeofenceSuccess(response.data));\n    console.log(\"regionArray ====>\",regionArray)\n    insertAllGeofences(regionArray, response.data)\n  } catch (error) {\n    yield put(getAllGeofenceFailure(error));\n  }\n}\n\n/**\n * Saga function to set site key location.\n * @param payload - The payload containing the site key location data.\n */\nexport function* setSiteKeyLocation({ payload }: GeoStatusRequestAction) {\n  try {\n    yield call(api.user.setSiteKeyStatus, payload);\n    yield put(getAllGeofenceRequest(payload.userId));\n  } catch (error) {\n    // console.log(\"setSiteKeyStatus error ===>\", error)\n    const errorMessage = (error instanceof Error) ? error.message : 'An unknown error occurred';\n    Toast.show(errorMessage, {\n      position: Toast.positions.CENTER,\n    });\n  }\n}\n\n/**\n * Root saga function for location tracking.\n */\nexport default function* locationTrackSaga() {\n  yield takeLatest(LOCATION_TRACKING_REQUEST, updateLocationTrackData);\n  yield takeLatest(GEO_STATUS_REQUEST, updateGeoStatus);\n  yield takeLatest(GET_ALL_GEOFENCS_REQUEST, getAllGeofences);\n  yield takeLatest(SET_SITE_KEY_LOCATION_REQUEST, setSiteKeyLocation);\n}\n"],"mappings":"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","ignoreList":[]}