{"version":3,"names":["useField","useFormikContext","React","ScreenActionButton","ScreenActionButtonField","submitWhenFormIsValid","disabledWhenNot","onCancel","rest","handleSubmit","isValid","field","toString","createElement","_extends","disabled","value","onPress"],"sources":["index.tsx"],"sourcesContent":["import { useField, useFormikContext } from 'formik';\nimport React, { FC } from 'react';\n\nimport ScreenActionButton, {\n  ScreenActionButtonProps,\n} from '../ScreenActionButton';\n\ninterface Props extends ScreenActionButtonProps {\n  disabledWhenNot?: string;\n  submitWhenFormIsValid?: boolean;\n}\n\nconst ScreenActionButtonField: FC<Props> = ({\n  submitWhenFormIsValid,\n  disabledWhenNot = '',\n  onCancel,\n  ...rest\n}) => {\n  const { handleSubmit, isValid } = useFormikContext();\n  const [field] = useField(disabledWhenNot.toString());\n  return (\n    <ScreenActionButton\n      disabled={submitWhenFormIsValid ? !isValid : !field.value}\n      onPress={() => handleSubmit()}\n      onCancel={onCancel}\n      {...rest}\n    />\n  );\n};\n\nexport default ScreenActionButtonField;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,gBAAgB,QAAQ,QAAQ;AACnD,OAAOC,KAAK,MAAc,OAAO;AAEjC,OAAOC,kBAAkB,MAElB,uBAAuB;AAO9B,MAAMC,uBAAkC,GAAGA,CAAC;EAC1CC,qBAAqB;EACrBC,eAAe,GAAG,EAAE;EACpBC,QAAQ;EACR,GAAGC;AACL,CAAC,KAAK;EACJ,MAAM;IAAEC,YAAY;IAAEC;EAAQ,CAAC,GAAGT,gBAAgB,CAAC,CAAC;EACpD,MAAM,CAACU,KAAK,CAAC,GAAGX,QAAQ,CAACM,eAAe,CAACM,QAAQ,CAAC,CAAC,CAAC;EACpD,oBACEV,KAAA,CAAAW,aAAA,CAACV,kBAAkB,EAAAW,QAAA;IACjBC,QAAQ,EAAEV,qBAAqB,GAAG,CAACK,OAAO,GAAG,CAACC,KAAK,CAACK,KAAM;IAC1DC,OAAO,EAAEA,CAAA,KAAMR,YAAY,CAAC,CAAE;IAC9BF,QAAQ,EAAEA;EAAS,GACfC,IAAI,CACT,CAAC;AAEN,CAAC;AAED,eAAeJ,uBAAuB","ignoreList":[]}