{"version":3,"names":["colors","AppEvent","event","HeaderWithButton","SafeAreaContainer","ScreenActionButton","React","useEffect","useState","useAction","useSelector","useIntl","StatusBar","View","FlatList","RefreshControl","Alert","LoadingIndicator","ScreenActionModal","NavigatorService","Screens","makeSelectUser","messages","PanicActionModal","geoCredStatusRequest","isEmpty","getTimeAgo","getLocalTime","formatUTCtoLocalDate","updateUserLoctionData","fetchLocation","BackButtonRow","Container","NoRecordsFound","NotificationItemContainer","NotificationItemBody","NotificationItemTitle","NotificationItemTimeStamp","ListContainer","notificationListRequest","resetNotificationList","notificationReadUnreadStatusRequest","readAllNotificationRequest","IncidentType","restrictTime","minuts","NotificationListScreen","userData","notificationList","setNotificationList","records","getNotificationAction","resetNotificationAction","updateReadUnreadStatus","markReadAllNotification","isLoading","state","notificationListState","result","listData","unreadNotyCounts","unreadCount","formatMessage","refreshing","setRefreshing","isNofityDetailModelShow","setNotifyDetailModelShow","notify_title","setNotifyTitle","notify_msg","setNotifyMsg","showPanicActionPopup","setPanicActionPopup","geoCredPNObject","setGeoCredPNObject","geoCredStatusUpdate","console","log","id","refreshList","on","OnRefreshNotificationList","off","onRefresh","handleNotificationTap","item","data","pnMessage","undefined","android","title","body","type","Normal","navigate","Menu","Tips","TipDetail","incident","showChat","tipId","Escort","PassiveEscort","back","emit","OnSiteKeyNotificataionReceived","gmtDateStr","sentAt","isRead","setTimeout","payload","userID","notiId","readFrom","onYesTap","location","JSON","stringify","locationId","userId","incidentId","response","lat","coords","latitude","toString","lng","longitude","onNoTap","NotificationItem","formattedDate","daysAgo","createElement","onPress","numberOfLines","toLowerCase","itemData","parse","message","renderNotificationItem","index","onMarkReadAllTap","alert","markReadAll","msgMarkReadAll","text","no","style","yes","makeAPIForMarkAllReadAction","Fragment","barStyle","backgroundColor","onButtonClick","uneadNotification","length","noRecords","slice","reverse","renderItem","keyExtractor","refreshControl","isVisible","actionText","onAction","onHide","showActionIcon","showSuccessIcon","actionPositiveText","actionNagetiveText","showIcon","onCancel","tintColor","white"],"sources":["index.tsx"],"sourcesContent":["// import NavigatorService from 'utils/navigation';\nimport { colors } from '../../../../assets';\nimport { AppEvent, event } from '../../../../api';\nimport { HeaderWithButton, SafeAreaContainer, ScreenActionButton } from '../../../../components';\nimport React, { useEffect, useState, } from 'react';\nimport { useAction, useSelector } from '../../../../utils/hooks';\nimport { useIntl } from 'react-intl';\nimport { StatusBar, View, FlatList, RefreshControl, Alert } from 'react-native';\nimport { LoadingIndicator, ScreenActionModal } from '../../../../components';\nimport NavigatorService from '../../../../utils/navigation';\nimport Screens from '../../../../containers/providers/RoutesProvider/screens';\nimport { makeSelectUser } from '../../../../containers/app/selectors';\nimport messages from './messages';\nimport PanicActionModal from '../../../../components/PanicActionModal';\nimport { geoCredStatusRequest } from '../../../../utils/location/actions';\nimport { isEmpty } from 'lodash';\nimport { getTimeAgo, getLocalTime, formatUTCtoLocalDate } from '../../../../utils/common'\nimport { makeSelectIsLoading, makeSelectNotificatioons } from './selectors';\nimport { updateUserLoctionData, fetchLocation } from '../../../../utils/location/backgroundGeolocation';\n\nimport {\n  BackButtonRow,\n  Container,\n  NoRecordsFound,\n  NotificationItemContainer,\n  NotificationItemBody,\n  NotificationItemTitle,\n  NotificationItemTimeStamp,\n  ListContainer\n} from './styles';\nimport {\n  notificationListRequest,\n  resetNotificationList,\n  notificationReadUnreadStatusRequest,\n  readAllNotificationRequest\n} from './actions';\n\nimport {  IncidentType } from 'incident-code-core';\n// import { getTimeZone } from 'react-native-localize';\n\ntype NotificationRecord = {\n  pnMessage: any;\n  isRead: boolean;\n  userID: string;\n  id: string;\n  // add other properties as needed\n};\n\ntype NotificationList = {\n  records: NotificationRecord[];\n};\n\nconst restrictTime = {\n  minuts: 30,\n};\n\nconst NotificationListScreen = () => {\n\n  const userData = useSelector(makeSelectUser());\n  const [notificationList, setNotificationList] = useState<NotificationList>({ records: [] });\n  const getNotificationAction = useAction(notificationListRequest);\n  const resetNotificationAction = useAction(resetNotificationList);\n  const updateReadUnreadStatus = useAction(notificationReadUnreadStatusRequest);\n  const markReadAllNotification = useAction(readAllNotificationRequest);\n  const isLoading = useSelector((state) => { return state.notificationListState.isLoading });\n  const result = useSelector((state) => { return state.notificationListState.listData });\n  const unreadNotyCounts = useSelector((state) => { return state.notificationListState.unreadCount });\n  const { formatMessage } = useIntl();\n  const [refreshing, setRefreshing] = useState(false);\n  const [isNofityDetailModelShow, setNotifyDetailModelShow] = useState(false);\n  const [notify_title, setNotifyTitle] = useState(\"\");\n  const [notify_msg, setNotifyMsg] = useState(\"\");\n  const [showPanicActionPopup, setPanicActionPopup] = useState(false)\n  const [geoCredPNObject, setGeoCredPNObject] = useState({});\n  const geoCredStatusUpdate = useAction(geoCredStatusRequest)\n\n  useEffect(() => {\n    console.log(\"unreadNotyCounts===>\", unreadNotyCounts)\n    getNotificationAction(userData.id);\n  }, []);\n\n\n\n  useEffect(() => {\n    if (result != null) {\n      // console.log(\"setNotificationList result=>\",JSON.stringify(result.records.slice().reverse()))\n      setNotificationList(result);\n      // unreadCount(result.totalUnreadNotificationCount)\n      setRefreshing(false);\n    }\n  }, [result]);\n\n  const refreshList = () => {\n    resetNotificationAction(null)\n    getNotificationAction(userData.id);\n  }\n\n  useEffect(() => {\n    event.on(AppEvent.OnRefreshNotificationList, refreshList);\n    return () => {\n      event.off(AppEvent.OnRefreshNotificationList, refreshList); // sync\n    };\n  });\n\n  const onRefresh = () => {\n    setRefreshing(true);\n    resetNotificationAction(null)\n    getNotificationAction(userData.id);\n  };\n\n  const handleNotificationTap = (item: any) => {\n    const data = item.pnMessage.data\n    if (data == undefined) {\n      setNotifyTitle(item.pnMessage.android.data.title)\n      setNotifyMsg(item.pnMessage.android.data.body)\n      setNotifyDetailModelShow(true)\n    } else {\n      if (data.type === IncidentType.Normal && data.event === 'resolved') {\n        NavigatorService.navigate(Screens.Menu.Tips.TipDetail, {\n          incident: undefined,\n          showChat: false,\n          tipId: data?.tipId\n        });\n      } else if (data.type === IncidentType.Escort && data.event === 'resolved') {\n        // incident closed\n      } else if (data.type === IncidentType.PassiveEscort && data.event === 'resolved') {\n        // incident closed\n      } else if (data.type === IncidentType.Escort && data.event === 'PanicCreated' || data.event === 'PanicAccepted') {\n        // incident created and accepted\n        0\n      } else if (data.type === 'group' && data.event === 'groupChanged' || data.event === 'groupUpdated') {\n        // group updated\n        NavigatorService.back()\n      }\n      else if (data.type === 'SiteKey' && data.event === 'SiteKey') {\n        // group updated\n        event.emit(AppEvent.OnSiteKeyNotificataionReceived, data);\n      }\n      else if (data.type === 'Location' && data.event === 'LocationQuestion') {\n        const gmtDateStr = getLocalTime(data.sentAt);\n        if (getTimeAgo(gmtDateStr) <= restrictTime.minuts) {\n          if (!item.isRead) {\n            setTimeout(() => {\n              setGeoCredPNObject(data)\n              setPanicActionPopup(true)\n            }, 100);\n          } else {\n            console.log(\"no action\")\n          }\n        } else {\n\n        }\n      }\n    }\n    if (!item.isRead) {\n      setTimeout(() => {\n        let payload = {\n          isRead: true,\n          userID: userData.id,\n          notiId: item.id,\n          readFrom: \"Notification\"\n        }\n        updateReadUnreadStatus(payload)\n      }, 400);\n    }\n\n  }\n\n  // geocred feature ::: call on Click YES Button \n  const onYesTap = async () => {\n\n    setPanicActionPopup(false)\n    const location = await fetchLocation();\n    console.log(\"location--==>\", JSON.stringify(location))\n    if (location) {\n      const locationId = geoCredPNObject != null ? +geoCredPNObject.locationId : 0;\n      let payload = {\n        userId: userData.id,\n        locationId: locationId,\n        incidentId: geoCredPNObject != null ? geoCredPNObject?.incidentId : \"\",\n        response: \"yes\",\n        lat: location.coords.latitude.toString(),\n        lng: location.coords.longitude.toString()\n      }\n      geoCredStatusUpdate(payload)\n      updateUserLoctionData(location)\n    }\n\n  }\n\n  // geocred feature ::: call on Click NO Button \n  const onNoTap = async () => {\n\n    setPanicActionPopup(false)\n    const location = await fetchLocation();\n    console.log(\"location--==>\", JSON.stringify(location))\n    if (location) {\n      const locationId = geoCredPNObject != null ? +geoCredPNObject.locationId : 0;\n      let payload = {\n        userId: userData.id,\n        locationId: locationId,\n        incidentId: geoCredPNObject != null ? geoCredPNObject?.incidentId : \"\",\n        response: \"no\",\n        lat: location.coords.latitude.toString(),\n        lng: location.coords.longitude.toString()\n      }\n      geoCredStatusUpdate(payload)\n      updateUserLoctionData(location)\n    }\n  }\n\n  const NotificationItem = ({ item }) => {\n\n    const data = item.pnMessage.data\n\n    if (data == undefined) {\n      const { formattedDate, daysAgo } = formatUTCtoLocalDate(item.pnMessage.android.data.sentAt);\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{item.pnMessage.android.data.title}</NotificationItemTitle>\n          <NotificationItemBody numberOfLines={3}>{item.pnMessage.android.data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    }\n    const type = data.type.toLowerCase()\n    const { formattedDate, daysAgo } = formatUTCtoLocalDate(data.sentAt);\n    // console.log(\"type===>\",type)\n    if (type === IncidentType.Normal && data.event === 'resolved') {\n\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{data.title}</NotificationItemTitle>\n          <NotificationItemBody>{data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === IncidentType.Escort && data.event === 'resolved') {\n      // incident closed\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{data.title}</NotificationItemTitle>\n          <NotificationItemBody>{data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === IncidentType.PassiveEscort && data.event === 'resolved') {\n      // incident closed\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{data.title}</NotificationItemTitle>\n          <NotificationItemBody>{data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === IncidentType.Escort && data.event === 'PanicCreated') {\n      // incident created\n      const itemData = JSON.parse(data.data)\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{itemData.title}</NotificationItemTitle>\n          <NotificationItemBody>{itemData.message}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === IncidentType.Escort && data.event === 'PanicAccepted') {\n      // incident accepted\n      const itemData = JSON.parse(data.data)\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{itemData.title}</NotificationItemTitle>\n          <NotificationItemBody>{itemData.message}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === 'group' && data.event === 'groupChanged' || data.event === 'groupUpdated') {\n      // group updated \n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{data.title}</NotificationItemTitle>\n          <NotificationItemBody>{data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === 'location' && data.event === 'LocationQuestion') {\n      const itemData = JSON.parse(data.data)\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{itemData.title}</NotificationItemTitle>\n          <NotificationItemBody>{itemData.message}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    }\n    else if (type === 'sitekey' && data.event === 'SiteKey') {\n      const itemData = JSON.parse(data.data)\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{itemData.title}</NotificationItemTitle>\n          <NotificationItemBody>{itemData.message}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else {\n      return <View></View>\n    }\n  };\n\n  // render notification item\n  const renderNotificationItem = (item: any, index: number) => {\n    return <NotificationItem item={item} />;\n  }\n\n  const onMarkReadAllTap = () => {\n    console.log(\"read all\")\n    Alert.alert(\n      formatMessage(messages.markReadAll),\n      formatMessage(messages.msgMarkReadAll),\n      [{\n        text: formatMessage(messages.no),\n        onPress: () => console.log(\"Cancel Pressed\"),\n        style: \"cancel\"\n      },\n      {\n        text: formatMessage(messages.yes),\n        onPress: () => makeAPIForMarkAllReadAction()\n      }]\n    );\n  }\n\n  const makeAPIForMarkAllReadAction = () => {\n    markReadAllNotification(userData.id)\n  }\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <HeaderWithButton\n          title={formatMessage(messages.title)}\n          onButtonClick={() => onMarkReadAllTap()}\n          uneadNotification={unreadNotyCounts}\n        />\n        <Container>\n\n          {isLoading ?\n            <LoadingIndicator></LoadingIndicator> :\n            notificationList.records.length === 0 && (\n              <NoRecordsFound>{formatMessage(messages.noRecords)}</NoRecordsFound>\n            )\n          }\n\n          {!isLoading && (<ListContainer>\n            <FlatList\n              data={notificationList.records.length !== 0 ? notificationList.records.slice().reverse() : []}\n              renderItem={({ item, index }) => renderNotificationItem(item, index)}\n              keyExtractor={item => item?.id}\n              refreshControl={\n                <RefreshControl\n                  refreshing={refreshing}\n                  onRefresh={onRefresh}\n                />\n              }\n            />\n          </ListContainer>)}\n          <ScreenActionModal\n            isVisible={isNofityDetailModelShow}\n            title={notify_title}\n            message={notify_msg}\n            actionText='Ignore'\n            onAction={() => setNotifyDetailModelShow(false)}\n            onHide={() => setNotifyDetailModelShow(false)}\n            showActionIcon={false}\n            showSuccessIcon={false}\n          />\n          <PanicActionModal\n            isVisible={showPanicActionPopup}\n            title={!isEmpty(geoCredPNObject) ? JSON.parse(geoCredPNObject.data).title : \"\"}\n            message={!isEmpty(geoCredPNObject) ? JSON.parse(geoCredPNObject.data).message : \"\"}\n            actionPositiveText={\"Yes\"}\n            actionNagetiveText={\"No\"}\n            onAction={() => onYesTap()}\n            onHide={() => onNoTap()}\n            showIcon={true}\n            showActionIcon={true}\n          />\n        </Container>\n        <BackButtonRow>\n          <ScreenActionButton\n            onCancel={NavigatorService.back}\n            tintColor={colors.white}\n          />\n        </BackButtonRow>\n      </SafeAreaContainer>\n    </>\n  );\n};\n\nexport default NotificationListScreen;\n"],"mappings":"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","ignoreList":[]}