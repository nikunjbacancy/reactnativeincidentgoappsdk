{"version":3,"names":["api","map","call","put","takeLatest","handleError","deleteUserOrganizationFailure","deleteUserOrganizationSuccess","getUserOrganizationsFailure","getUserOrganizationsSuccess","DELETE_USER_ORGANIZATION_REQUEST","GET_USER_ORGANIZATIONS_REQUEST","getUserOrganizations","response","organizations","data","error","deleteUserOrganization","payload","organizationIds","user","updateOrganizations","organizationScreenSaga"],"sources":["saga.ts"],"sourcesContent":["/**\n *\n * OrganizationScreen saga\n *\n */\n\nimport * as api from '../../../../api';\nimport { AxiosResponse } from 'axios';\nimport { Id, Organization } from 'incident-code-core';\nimport map from 'lodash/map';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { handleError } from '../../../../utils/error';\n\nimport {\n  deleteUserOrganizationFailure,\n  deleteUserOrganizationSuccess,\n  getUserOrganizationsFailure,\n  getUserOrganizationsSuccess,\n} from './actions';\nimport {\n  DELETE_USER_ORGANIZATION_REQUEST,\n  GET_USER_ORGANIZATIONS_REQUEST,\n} from './constants';\nimport { DeleteUserOrganizationRequestAction } from './types';\n\nexport function* getUserOrganizations() {\n  try {\n    const response: AxiosResponse<Organization[]> = yield call(\n      api.organizations.getUserOrganizations,\n    );\n    yield put(getUserOrganizationsSuccess(response.data));\n  } catch (error: any) {\n    yield put(getUserOrganizationsFailure(handleError(error)));\n  }\n}\n\nexport function* deleteUserOrganization({\n  payload,\n}: DeleteUserOrganizationRequestAction) {\n  try {\n    const organizationIds = map(payload, 'id') as Id[];\n    yield call(api.user.updateOrganizations, organizationIds);\n    yield put(deleteUserOrganizationSuccess(payload));\n  } catch (error: any) {\n    yield put(deleteUserOrganizationFailure(handleError(error)));\n  }\n}\n\nexport default function* organizationScreenSaga() {\n  yield takeLatest(GET_USER_ORGANIZATIONS_REQUEST, getUserOrganizations);\n  yield takeLatest(DELETE_USER_ORGANIZATION_REQUEST, deleteUserOrganization);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,GAAG,MAAM,iBAAiB;AAGtC,OAAOC,GAAG,MAAM,YAAY;AAC5B,SAASC,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,SAASC,WAAW,QAAQ,yBAAyB;AAErD,SACEC,6BAA6B,EAC7BC,6BAA6B,EAC7BC,2BAA2B,EAC3BC,2BAA2B,QACtB,WAAW;AAClB,SACEC,gCAAgC,EAChCC,8BAA8B,QACzB,aAAa;AAGpB,OAAO,UAAUC,oBAAoBA,CAAA,EAAG;EACtC,IAAI;IACF,MAAMC,QAAuC,GAAG,MAAMX,IAAI,CACxDF,GAAG,CAACc,aAAa,CAACF,oBACpB,CAAC;IACD,MAAMT,GAAG,CAACM,2BAA2B,CAACI,QAAQ,CAACE,IAAI,CAAC,CAAC;EACvD,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnB,MAAMb,GAAG,CAACK,2BAA2B,CAACH,WAAW,CAACW,KAAK,CAAC,CAAC,CAAC;EAC5D;AACF;AAEA,OAAO,UAAUC,sBAAsBA,CAAC;EACtCC;AACmC,CAAC,EAAE;EACtC,IAAI;IACF,MAAMC,eAAe,GAAGlB,GAAG,CAACiB,OAAO,EAAE,IAAI,CAAS;IAClD,MAAMhB,IAAI,CAACF,GAAG,CAACoB,IAAI,CAACC,mBAAmB,EAAEF,eAAe,CAAC;IACzD,MAAMhB,GAAG,CAACI,6BAA6B,CAACW,OAAO,CAAC,CAAC;EACnD,CAAC,CAAC,OAAOF,KAAU,EAAE;IACnB,MAAMb,GAAG,CAACG,6BAA6B,CAACD,WAAW,CAACW,KAAK,CAAC,CAAC,CAAC;EAC9D;AACF;AAEA,eAAe,UAAUM,sBAAsBA,CAAA,EAAG;EAChD,MAAMlB,UAAU,CAACO,8BAA8B,EAAEC,oBAAoB,CAAC;EACtE,MAAMR,UAAU,CAACM,gCAAgC,EAAEO,sBAAsB,CAAC;AAC5E","ignoreList":[]}