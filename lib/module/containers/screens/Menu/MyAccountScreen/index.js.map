{"version":3,"names":["colors","Form","Header","ImageUpload","SafeAreaContainer","ScreenActionButtonField","makeSelectUser","React","useEffect","useState","useIntl","Keyboard","ScrollView","StatusBar","Toast","useAction","useSelector","NavigatorService","clearMessageType","deletePortraitRequest","updatePortraitRequest","UPDATE_MY_ACCOUNT_NAME_FAILURE","UPDATE_MY_ACCOUNT_NAME_REQUEST","UPDATE_MY_ACCOUNT_NAME_SUCCESS","messages","makeSelectSelectedIsUpdating","makeSelectUploadMessageType","DescriptionText","FormContent","InfoRow","InfoText","InputRow","NameErrorField","NameInputField","UpdateButtonRow","UpdateNameSchema","MyAccountScreen","formatMessage","isKeyboardShow","setIsKeyboardShow","firstName","lastName","portraitUrl","isUpdating","uploadMessageType","deletePortrait","savePortrait","clearMessage","schema","initialValues","goBackWithMessage","show","accountUpdated","position","positions","CENTER","back","subscriptions","addListener","forEach","s","_s$remove","remove","call","createElement","Fragment","barStyle","backgroundColor","contentContainerStyle","flex","keyboardShouldPersistTaps","keyboardDismissMode","title","info","onUpload","onDelete","actionInfoType","start","resolve","reject","validationSchema","onResolve","onReject","action","payload","message","BOTTOM","description","name","autoCompleteType","textContentType","placeholder","firstNamePlaceholder","lastNamePlaceholder","disabled","loading","text","update","onCancel","tintColor","white"],"sources":["index.tsx"],"sourcesContent":["import { colors } from '../../../../assets';\nimport {\n  Form,\n  Header,\n  ImageUpload,\n  SafeAreaContainer,\n  ScreenActionButtonField,\n} from '../../../../components';\nimport { makeSelectUser } from '../../../../containers/app/selectors';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Keyboard, ScrollView, StatusBar, EmitterSubscription } from 'react-native';\nimport Toast from 'react-native-root-toast';\nimport { ScreenProps } from 'react-native-screens';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport { useAction, useSelector } from '../../../../utils/hooks';\nimport NavigatorService from '../../../../utils/navigation';\n\nimport {\n  clearMessageType,\n  deletePortraitRequest,\n  updatePortraitRequest,\n} from './actions';\nimport {\n  UPDATE_MY_ACCOUNT_NAME_FAILURE,\n  UPDATE_MY_ACCOUNT_NAME_REQUEST,\n  UPDATE_MY_ACCOUNT_NAME_SUCCESS,\n} from './constants';\nimport messages from './messages';\nimport {\n  makeSelectSelectedIsUpdating,\n  makeSelectUploadMessageType,\n} from './selectors';\nimport {\n  DescriptionText,\n  FormContent,\n  InfoRow,\n  InfoText,\n  InputRow,\n  NameErrorField,\n  NameInputField,\n  UpdateButtonRow,\n} from './styles';\nimport UpdateNameSchema from './validator';\n\ninterface Params { }\ninterface Props extends NavigationStackScreenProps<Params, ScreenProps> { }\n\nconst MyAccountScreen: FC<Props> = () => {\n  const { formatMessage } = useIntl();\n  const [isKeyboardShow, setIsKeyboardShow] = useState(false);\n\n  const { firstName, lastName, portraitUrl } = useSelector(makeSelectUser());\n  const isUpdating = useSelector(makeSelectSelectedIsUpdating());\n  const uploadMessageType = useSelector(makeSelectUploadMessageType());\n  const deletePortrait = useAction(deletePortraitRequest);\n  const savePortrait = useAction(updatePortraitRequest);\n  const clearMessage = useAction(clearMessageType);\n\n  const schema = UpdateNameSchema(formatMessage);\n  const initialValues = {\n    firstName,\n    lastName,\n  };\n\n  const goBackWithMessage = () => {\n    Toast.show(formatMessage(messages.accountUpdated), {\n      position: Toast.positions.CENTER,\n    });\n    NavigatorService.back();\n  };\n\n  useEffect(() => {\n    if (uploadMessageType) {\n      return () => {\n        clearMessage();\n      };\n    }\n    return;\n  }, [uploadMessageType]);\n\n  useEffect(() => {\n    let subscriptions: EmitterSubscription[];\n    subscriptions = [\n      Keyboard.addListener(\n        'keyboardDidShow',\n        () => setIsKeyboardShow(true),\n      ),\n      Keyboard.addListener(\n        'keyboardDidHide',\n        () => setIsKeyboardShow(false),\n      )\n    ];\n\n    return () => {\n      subscriptions.forEach((s) => s?.remove?.());\n    }\n  }, []);\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <ScrollView\n          contentContainerStyle={{ flex: 1 }}\n          keyboardShouldPersistTaps=\"always\"\n          keyboardDismissMode=\"on-drag\"\n        >\n          <Header title={formatMessage(messages.title)} />\n          <InfoRow>\n            <InfoText>{formatMessage(messages.info)}</InfoText>\n          </InfoRow>\n          {!isKeyboardShow && (\n            <ImageUpload\n              portraitUrl={portraitUrl}\n              onUpload={savePortrait}\n              onDelete={deletePortrait}\n              actionInfoType={uploadMessageType}\n            />\n          )}\n          <Form\n            start={UPDATE_MY_ACCOUNT_NAME_REQUEST}\n            resolve={UPDATE_MY_ACCOUNT_NAME_SUCCESS}\n            reject={UPDATE_MY_ACCOUNT_NAME_FAILURE}\n            initialValues={initialValues}\n            validationSchema={schema}\n            onResolve={goBackWithMessage}\n            onReject={action =>\n              Toast.show(action.payload.message, {\n                position: Toast.positions.BOTTOM,\n              })\n            }\n          >\n            <FormContent>\n              <DescriptionText>\n                {formatMessage(messages.description)}\n              </DescriptionText>\n              <InputRow>\n                <NameInputField\n                  name=\"firstName\"\n                  autoCompleteType=\"off\"\n                  textContentType=\"none\"\n                  placeholder={formatMessage(messages.firstNamePlaceholder)}\n                />\n              </InputRow>\n              <NameErrorField name=\"firstName\" />\n              <InputRow>\n                <NameInputField\n                  name=\"lastName\"\n                  autoCompleteType=\"off\"\n                  textContentType=\"none\"\n                  placeholder={formatMessage(messages.lastNamePlaceholder)}\n                />\n              </InputRow>\n              <NameErrorField name=\"lastName\" />\n            </FormContent>\n            <UpdateButtonRow>\n              <ScreenActionButtonField\n                disabled={isUpdating}\n                loading={isUpdating}\n                text={formatMessage(messages.update)}\n                onCancel={NavigatorService.back}\n                tintColor={colors.white}\n              />\n            </UpdateButtonRow>\n          </Form>\n        </ScrollView>\n      </SafeAreaContainer>\n    </>\n  );\n};\n\nexport default MyAccountScreen;\n"],"mappings":"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","ignoreList":[]}