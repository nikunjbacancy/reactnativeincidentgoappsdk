{"version":3,"names":["SafeAreaContainer","Screens","React","useEffect","useIntl","StatusBar","useAction","useSelector","changePage","finishWelcome","nextPage","resetCurrentPage","messages","PaginationDots","makeSelectCurrentPage","makeSelectLastIndex","makeSelectWelcomeItems","Background","BottomNav","NextButton","PaginationRow","SkipButton","WelcomeSwiper","WelcomeScreen","navigation","replace","getParam","goBack","formatMessage","fromFeedback","currentPage","lastIndex","welcomeItems","changePageAction","nextPageAction","finishWelcomeAction","resetCurrentPageAction","componentWillUnmount","handleFinishWelcomeAction","Onboarding","SignIn","handleNextPageAction","createElement","Fragment","barStyle","backgroundColor","index","onIndexChange","size","onPress","text","skip"],"sources":["index.tsx"],"sourcesContent":["import { SafeAreaContainer } from '../../../../components';\nimport Screens from '../../../../containers/providers/RoutesProvider/screens';\nimport React, { FC, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { StatusBar } from 'react-native';\nimport { ScreenProps } from 'react-native-screens';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport { useAction, useSelector } from '../../../../utils/hooks';\n\nimport {\n  changePage,\n  finishWelcome,\n  nextPage,\n  resetCurrentPage,\n} from './actions';\nimport messages from './messages';\nimport PaginationDots from './PaginationDots';\nimport {\n  makeSelectCurrentPage,\n  makeSelectLastIndex,\n  makeSelectWelcomeItems,\n} from './selectors';\nimport {\n  Background,\n  BottomNav,\n  NextButton,\n  PaginationRow,\n  SkipButton,\n} from './styles';\nimport WelcomeSwiper from './WelcomeSwiper';\n\ninterface Params {\n  fromFeedback: boolean;\n}\ninterface Props extends NavigationStackScreenProps<Params, ScreenProps> {}\n\nconst WelcomeScreen: FC<Props> = ({\n  navigation: { replace, getParam, goBack },\n}) => {\n  const { formatMessage } = useIntl();\n\n  const fromFeedback = getParam('fromFeedback');\n\n  const currentPage = useSelector(makeSelectCurrentPage());\n  const lastIndex = useSelector(makeSelectLastIndex());\n  const welcomeItems = useSelector(makeSelectWelcomeItems());\n\n  const changePageAction = useAction(changePage);\n  const nextPageAction = useAction(nextPage);\n  const finishWelcomeAction = useAction(finishWelcome);\n  const resetCurrentPageAction = useAction(resetCurrentPage);\n\n  useEffect(\n    () =>\n      function componentWillUnmount() {\n        resetCurrentPageAction();\n      },\n    [fromFeedback],\n  );\n\n  const handleFinishWelcomeAction = () => {\n    if (fromFeedback) return goBack();\n    finishWelcomeAction();\n    replace(Screens.Onboarding.SignIn);\n    return null;\n  };\n  const handleNextPageAction = () => {\n    if (currentPage + 1 > lastIndex - 1) {\n      if (fromFeedback) return goBack();\n      return handleFinishWelcomeAction();\n    }\n    nextPageAction();\n    return null;\n  };\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <Background />\n      <SafeAreaContainer>\n        <WelcomeSwiper\n          index={currentPage}\n          onIndexChange={changePageAction}\n          welcomeItems={welcomeItems}\n        />\n        <PaginationRow>\n          <PaginationDots size={lastIndex} currentPage={currentPage} />\n        </PaginationRow>\n        <BottomNav>\n          <SkipButton\n            onPress={handleFinishWelcomeAction}\n            text={formatMessage(messages.skip)}\n          />\n          <NextButton onPress={handleNextPageAction} />\n        </BottomNav>\n      </SafeAreaContainer>\n    </>\n  );\n};\n\nexport default WelcomeScreen;\n"],"mappings":"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","ignoreList":[]}