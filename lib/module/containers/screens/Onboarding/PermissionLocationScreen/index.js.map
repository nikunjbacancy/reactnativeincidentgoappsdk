{"version":3,"names":["images","React","StatusBar","ScrollView","Image","NativeModules","Platform","SafeAreaContainer","PaddingView","useIntl","Screens","getAllGeofenceRequest","makeSelectUser","requestLocationPermissions","Background","LogoRow","TitleRow","TitleText","ItemIcon","ItemRow","ItemText","ButtonRow","SettingButton","AlreadyAllowed","AllowButton","messages","openSettings","locationAlwaysPermissionsRequest","useAction","useSelector","NavigatorService","PermissionLocationScreen","formatMessage","userData","locationAlwaysPermissionsAction","getAllGeofenceRequestAction","handleAlreadyEnabled","console","log","OS","Location","checkLocationAlwaysPermission","response","enabled","navigate","Home","Index","getAllGeofences","handleAllow","then","catch","error","id","createElement","Fragment","barStyle","backgroundColor","source","logoWithText","title","icLocation","location","replace","allowAllTime","size","onPress","text","allow","settings"],"sources":["index.tsx"],"sourcesContent":["import { images } from '../../../../assets';\nimport React from 'react';\nimport { StatusBar, ScrollView, Image, NativeModules, Platform } from 'react-native';\nimport { GradientButton, SafeAreaContainer, PaddingView } from '../../../../components';\nimport { useIntl } from 'react-intl';\nimport Screens from '../../../../containers/providers/RoutesProvider/screens';\nimport { getAllGeofenceRequest } from '../../../../utils/location/actions';\nimport { makeSelectUser } from '../../../../containers/app/selectors';\nimport requestLocationPermissions from '../../../../utils/permission/requestLocationPermission';\n\nimport {\n    Background,\n    LogoRow,\n    TitleRow,\n    TitleText,\n    ItemIcon,\n    ItemRow,\n    ItemText,\n    ButtonRow,\n    SettingButton,\n    AlreadyAllowed,\n    AllowButton\n} from './styles';\nimport messages from './messages';\nimport { openSettings } from 'react-native-permissions';\nimport { locationAlwaysPermissionsRequest } from './action';\nimport { useAction, useSelector } from '../../../../utils/hooks';\nimport NavigatorService from '../../../../utils/navigation';\n\nconst PermissionLocationScreen = () => {\n    const { formatMessage } = useIntl();\n    const userData = useSelector(makeSelectUser());\n    const locationAlwaysPermissionsAction = useAction(locationAlwaysPermissionsRequest);\n    const getAllGeofenceRequestAction = useAction(getAllGeofenceRequest);\n\n    const handleAlreadyEnabled = () => {\n\n        console.log(\"handleAlreadyEnabled\")\n        if (Platform.OS === \"ios\") {\n            NativeModules.Location.checkLocationAlwaysPermission(\"Test\", \"Location\", (response: String) => {\n                console.log(\"response:\" + response);\n                if (response === 'RNPermissionStatusAuthorized') {\n                    locationAlwaysPermissionsAction(formatMessage(messages.enabled));\n                    // NavigatorService.navigate(Screens.Home.Index);\n                }\n                else {\n                    openSettings();\n                }\n            });\n        } else {\n            NavigatorService.navigate(Screens.Home.Index);\n            getAllGeofences()\n        }\n    }\n\n    // handle allow\n    const handleAllow = () => {\n        requestLocationPermissions().then(() => {\n            NavigatorService.navigate(Screens.Home.Index);\n            locationAlwaysPermissionsAction(formatMessage(messages.enabled));\n            getAllGeofences()\n        }).catch((error) => {\n            console.log(\"request error==>\", error)\n        })\n    }\n\n    const getAllGeofences = () => {\n        //getAllGeofenceRequest\n        if (userData.id) {\n            getAllGeofenceRequestAction(userData.id);\n        } else {\n            // Handle the case when userData.id is not available\n        }\n    }\n\n    return (\n        <>\n            <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n            <Background />\n            <SafeAreaContainer>\n                <ScrollView>\n                    <LogoRow>\n                        <Image source={images.logoWithText()} />\n                    </LogoRow>\n                    <TitleRow>\n                        <TitleText>{formatMessage(messages.title)}</TitleText>\n                    </TitleRow>\n                    <>\n                        <ItemRow>\n                            <ItemIcon source={images.icLocation()} />\n                            <ItemText>{Platform.OS == 'android' ? formatMessage(messages.location).replace(\"ALWAYS\", formatMessage(messages.allowAllTime))\n                                : formatMessage(messages.location)}</ItemText>\n                        </ItemRow>\n                        <PaddingView size={1} />\n                    </>\n\n                    {Platform.OS == 'android' ?\n                        <ButtonRow>\n                            <AllowButton\n                                onPress={handleAllow}\n                                text={formatMessage(messages.allow)}\n                            />\n                            <AlreadyAllowed\n                                onPress={handleAlreadyEnabled}\n                                text={formatMessage(messages.enabled)}\n                            />\n                        </ButtonRow> :\n                        <ButtonRow>\n                            <AlreadyAllowed\n                                onPress={handleAlreadyEnabled}\n                                text={formatMessage(messages.enabled)}\n                            />\n                            <SettingButton\n                                onPress={openSettings}\n                                text={formatMessage(messages.settings)}\n                            />\n                        </ButtonRow>\n                    }\n                </ScrollView>\n            </SafeAreaContainer>\n        </>\n    );\n}\n\nexport default PermissionLocationScreen;"],"mappings":"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","ignoreList":[]}