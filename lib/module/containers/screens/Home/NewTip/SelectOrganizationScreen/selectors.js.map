{"version":3,"names":["find","isEmpty","some","createSelector","initialState","selectOrganizationScreenStateDomain","state","organizationNotifyScreen","makeSelectIntersectOrganizations","organizations","makeSelectSelectedOrganization","isSelected","makeSelectEnableContinueButton","error","makeSelectRequestingOrganizations","requestingOrganizations","makeSelectError","makeSelectErrorMessage","errorMessage","makeSelectSelectOrganizationScreenState","subState"],"sources":["selectors.ts"],"sourcesContent":["/**\n *\n * SelectOrganizationScreen selectors\n *\n */\n\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport some from 'lodash/some';\nimport { createSelector } from 'reselect';\nimport { RootState } from 'store/types';\n\nimport { initialState } from './reducer';\n\n/**\n * Direct selector to the SelectOrganizationScreen state domain\n */\n\nconst selectOrganizationScreenStateDomain = (state: RootState) =>\n  state.organizationNotifyScreen || initialState;\n\n/**\n * Other specific selectors\n */\n\nconst makeSelectIntersectOrganizations = () =>\n  createSelector(\n    selectOrganizationScreenStateDomain,\n    ({ organizations }) => organizations,\n  );\n\nconst makeSelectSelectedOrganization = () =>\n  createSelector(selectOrganizationScreenStateDomain, ({ organizations }) =>\n    find(organizations, { isSelected: true }),\n  );\n\nconst makeSelectEnableContinueButton = () =>\n  createSelector(\n    selectOrganizationScreenStateDomain,\n    ({ organizations, error }) =>\n      isEmpty(organizations) ||\n      (some(organizations, { isSelected: true }) && !error),\n  );\n\nconst makeSelectRequestingOrganizations = () =>\n  createSelector(\n    selectOrganizationScreenStateDomain,\n    ({ requestingOrganizations }) => requestingOrganizations,\n  );\n\nconst makeSelectError = () =>\n  createSelector(selectOrganizationScreenStateDomain, ({ error }) => error);\n\nconst makeSelectErrorMessage = () =>\n  createSelector(\n    selectOrganizationScreenStateDomain,\n    ({ errorMessage }) => errorMessage,\n  );\n\n/**\n * Default selector used by SelectOrganizationScreen\n */\n\nconst makeSelectSelectOrganizationScreenState = () =>\n  createSelector(selectOrganizationScreenStateDomain, subState => subState);\n\nexport default makeSelectSelectOrganizationScreenState;\nexport {\n  selectOrganizationScreenStateDomain,\n  makeSelectIntersectOrganizations,\n  makeSelectSelectedOrganization,\n  makeSelectRequestingOrganizations,\n  makeSelectEnableContinueButton,\n  makeSelectError,\n  makeSelectErrorMessage,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,IAAI,MAAM,aAAa;AAC9B,OAAOC,OAAO,MAAM,gBAAgB;AACpC,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,cAAc,QAAQ,UAAU;AAGzC,SAASC,YAAY,QAAQ,WAAW;;AAExC;AACA;AACA;;AAEA,MAAMC,mCAAmC,GAAIC,KAAgB,IAC3DA,KAAK,CAACC,wBAAwB,IAAIH,YAAY;;AAEhD;AACA;AACA;;AAEA,MAAMI,gCAAgC,GAAGA,CAAA,KACvCL,cAAc,CACZE,mCAAmC,EACnC,CAAC;EAAEI;AAAc,CAAC,KAAKA,aACzB,CAAC;AAEH,MAAMC,8BAA8B,GAAGA,CAAA,KACrCP,cAAc,CAACE,mCAAmC,EAAE,CAAC;EAAEI;AAAc,CAAC,KACpET,IAAI,CAACS,aAAa,EAAE;EAAEE,UAAU,EAAE;AAAK,CAAC,CAC1C,CAAC;AAEH,MAAMC,8BAA8B,GAAGA,CAAA,KACrCT,cAAc,CACZE,mCAAmC,EACnC,CAAC;EAAEI,aAAa;EAAEI;AAAM,CAAC,KACvBZ,OAAO,CAACQ,aAAa,CAAC,IACrBP,IAAI,CAACO,aAAa,EAAE;EAAEE,UAAU,EAAE;AAAK,CAAC,CAAC,IAAI,CAACE,KACnD,CAAC;AAEH,MAAMC,iCAAiC,GAAGA,CAAA,KACxCX,cAAc,CACZE,mCAAmC,EACnC,CAAC;EAAEU;AAAwB,CAAC,KAAKA,uBACnC,CAAC;AAEH,MAAMC,eAAe,GAAGA,CAAA,KACtBb,cAAc,CAACE,mCAAmC,EAAE,CAAC;EAAEQ;AAAM,CAAC,KAAKA,KAAK,CAAC;AAE3E,MAAMI,sBAAsB,GAAGA,CAAA,KAC7Bd,cAAc,CACZE,mCAAmC,EACnC,CAAC;EAAEa;AAAa,CAAC,KAAKA,YACxB,CAAC;;AAEH;AACA;AACA;;AAEA,MAAMC,uCAAuC,GAAGA,CAAA,KAC9ChB,cAAc,CAACE,mCAAmC,EAAEe,QAAQ,IAAIA,QAAQ,CAAC;AAE3E,eAAeD,uCAAuC;AACtD,SACEd,mCAAmC,EACnCG,gCAAgC,EAChCE,8BAA8B,EAC9BI,iCAAiC,EACjCF,8BAA8B,EAC9BI,eAAe,EACfC,sBAAsB","ignoreList":[]}