{"version":3,"names":["selectAppStateDomain","filter","createSelector","initialState","selectIncidentCategoryScreenStateDomain","state","incidentCategoryScreen","makeSelectIncidentCategories","configs","result","categories","incidentCategories","i","length","row","j","category","push","makeSelectSelectedCategory","makeSelectIncidentCategoryScreenState","subState"],"sources":["selectors.ts"],"sourcesContent":["/**\n *\n * SelectCategoryScreen selectors\n *\n */\n\nimport { selectAppStateDomain } from '../../../../../containers/app/selectors';\nimport { IncidentCategoryConfig } from 'incident-code-core';\nimport filter from 'lodash/filter';\nimport { createSelector } from 'reselect';\nimport { RootState } from '../../../../../store/types';\n\nimport { initialState } from './reducer';\n\n/**\n * Direct selector to the SelectCategoryScreen state domain\n */\n\nconst selectIncidentCategoryScreenStateDomain = (state: RootState) =>\n  state.incidentCategoryScreen || initialState;\n\n/**\n * Other specific selectors\n */\n\nconst makeSelectIncidentCategories = () =>\n  createSelector(selectAppStateDomain, ({ configs }) => {\n    const result: IncidentCategoryConfig[][] = [];\n    const categories = filter(configs.incidentCategories, 'enabled');\n    for (let i = 0; i < categories.length; i += 3) {\n      const row: IncidentCategoryConfig[] = [];\n      for (let j = 0; j < 3; j += 1) {\n        const category = categories[i + j];\n        if (category) {\n          row.push(category);\n        }\n      }\n\n      result.push(row);\n    }\n    return result;\n  });\n\nconst makeSelectSelectedCategory = () =>\n  createSelector(\n    selectIncidentCategoryScreenStateDomain,\n    ({ category }) => category,\n  );\n\n/**\n * Default selector used by SelectCategoryScreen\n */\n\nconst makeSelectIncidentCategoryScreenState = () =>\n  createSelector(selectIncidentCategoryScreenStateDomain, subState => subState);\n\nexport default makeSelectIncidentCategoryScreenState;\nexport { makeSelectIncidentCategories, makeSelectSelectedCategory };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,oBAAoB,QAAQ,yCAAyC;AAE9E,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,cAAc,QAAQ,UAAU;AAGzC,SAASC,YAAY,QAAQ,WAAW;;AAExC;AACA;AACA;;AAEA,MAAMC,uCAAuC,GAAIC,KAAgB,IAC/DA,KAAK,CAACC,sBAAsB,IAAIH,YAAY;;AAE9C;AACA;AACA;;AAEA,MAAMI,4BAA4B,GAAGA,CAAA,KACnCL,cAAc,CAACF,oBAAoB,EAAE,CAAC;EAAEQ;AAAQ,CAAC,KAAK;EACpD,MAAMC,MAAkC,GAAG,EAAE;EAC7C,MAAMC,UAAU,GAAGT,MAAM,CAACO,OAAO,CAACG,kBAAkB,EAAE,SAAS,CAAC;EAChE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IAC7C,MAAME,GAA6B,GAAG,EAAE;IACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;MAC7B,MAAMC,QAAQ,GAAGN,UAAU,CAACE,CAAC,GAAGG,CAAC,CAAC;MAClC,IAAIC,QAAQ,EAAE;QACZF,GAAG,CAACG,IAAI,CAACD,QAAQ,CAAC;MACpB;IACF;IAEAP,MAAM,CAACQ,IAAI,CAACH,GAAG,CAAC;EAClB;EACA,OAAOL,MAAM;AACf,CAAC,CAAC;AAEJ,MAAMS,0BAA0B,GAAGA,CAAA,KACjChB,cAAc,CACZE,uCAAuC,EACvC,CAAC;EAAEY;AAAS,CAAC,KAAKA,QACpB,CAAC;;AAEH;AACA;AACA;;AAEA,MAAMG,qCAAqC,GAAGA,CAAA,KAC5CjB,cAAc,CAACE,uCAAuC,EAAEgB,QAAQ,IAAIA,QAAQ,CAAC;AAE/E,eAAeD,qCAAqC;AACpD,SAASZ,4BAA4B,EAAEW,0BAA0B","ignoreList":[]}