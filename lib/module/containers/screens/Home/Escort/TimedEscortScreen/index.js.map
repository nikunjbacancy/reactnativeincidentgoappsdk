{"version":3,"names":["images","Header","LoadingIndicator","SafeAreaContainer","ScreenActionButton","Screens","isEmpty","React","useCallback","useEffect","useState","useIntl","Keyboard","StatusBar","View","withNavigationFocus","makeCall","useAction","useSelector","NavigatorService","getIntersectOrganizationsRequest","getOrganizationProceduresRequest","toggleSelectOrganization","toggleSelectProcedure","messages","makeSelectEnableNextButton","makeSelectError","makeSelectErrorMessage","makeSelectIntersectOrganizations","makeSelectOrganizationProcedures","makeSelectRequestingOrganizations","makeSelectSelectedOrganization","makeSelectSelectedProcedure","Call911Button","Call911Container","Call911Info","Call911Title","Container","ErrorMessage","ErrorRow","InfoRow","InfoText","ItemCheckImage","ItemRow","ItemText","List","NextButtonRow","ProcedureList","EscortScreen","isFocused","navigation","isSafetyTimer","getParam","formatMessage","isKeyboardShow","setIsKeyboardShow","checkedOrg","setCheckedOrg","organizations","organization","procedures","procedure","nextButtonEnabled","error","errorMessage","requestingOrganizations","console","log","toggleSelectOrganizationAction","toggleSelectProcedureAction","getIntersectOrganizationsAction","getOrganizationProceduresAction","goToSelectProcedure","goToSafetyTimerCountdown","goToCountdownAction","navigate","Home","Escort","Countdown","procedureSelectionBack","length","EscortType","subscriptions","addListener","forEach","s","_s$remove","remove","call","id","call911","createElement","renderTimedHeader","Fragment","title","timedTitle","timedInfo","renderSafetyHeader","safetyTitle","safetyInfo","renderItem","itemInfo","org","item","onPress","source","icCheck","name","renderOrganizations","safetyCall911Title","timedCall911Title","call911Info","text","keyExtractor","_org$id","toString","data","style","marginTop","disabled","next","selectProcedure","onCancel","back","renderProcedureSelection","renderedProcedures","filter","p","procedureSelection","noProcedures","proc","_proc$id","extraData","renderProcedure","proced","isSelected","barStyle","backgroundColor","isKeyboard"],"sources":["index.tsx"],"sourcesContent":["import { images } from '../../../../../assets';\nimport {\n  Header,\n  LoadingIndicator,\n  SafeAreaContainer,\n  ScreenActionButton,\n} from '../../../../../components';\nimport Screens from '../../../../../containers/providers/RoutesProvider/screens';\nimport isEmpty from 'lodash/isEmpty';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Keyboard, ListRenderItemInfo, StatusBar, View, EmitterSubscription } from 'react-native';\nimport { ScreenProps } from 'react-native-screens';\nimport { withNavigationFocus } from 'react-navigation';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport { OrganizationSelection, ProcedureSelection } from 'types';\nimport { makeCall } from '../../../../../utils/device';\nimport { useAction, useSelector } from '../../../../../utils/hooks';\nimport NavigatorService from '../../../../../utils/navigation';\n\nimport {\n  getIntersectOrganizationsRequest,\n  getOrganizationProceduresRequest,\n  toggleSelectOrganization,\n  toggleSelectProcedure,\n} from './actions';\nimport messages from './messages';\nimport {\n  makeSelectEnableNextButton,\n  makeSelectError,\n  makeSelectErrorMessage,\n  makeSelectIntersectOrganizations,\n  makeSelectOrganizationProcedures,\n  makeSelectRequestingOrganizations,\n  makeSelectSelectedOrganization,\n  makeSelectSelectedProcedure,\n} from './selectors';\nimport {\n  Call911Button,\n  Call911Container,\n  Call911Info,\n  Call911Title,\n  Container,\n  ErrorMessage,\n  ErrorRow,\n  InfoRow,\n  InfoText,\n  ItemCheckImage,\n  ItemRow,\n  ItemText,\n  List,\n  NextButtonRow,\n  ProcedureList,\n} from './styles';\n\ninterface Params {\n  safetyTimer: boolean;\n}\n\ninterface Props extends NavigationStackScreenProps<Params, ScreenProps> {\n  isFocused: boolean;\n}\n\nconst EscortScreen: FC<Props> = ({ isFocused, navigation }) => {\n  const isSafetyTimer = navigation.getParam('safetyTimer');\n  const { formatMessage } = useIntl();\n\n  const [isKeyboardShow, setIsKeyboardShow] = useState(false);\n  const [checkedOrg, setCheckedOrg] = useState<any>(null);\n\n  const organizations = useSelector(makeSelectIntersectOrganizations());\n\n  const organization = useSelector(makeSelectSelectedOrganization());\n  const procedures = useSelector(makeSelectOrganizationProcedures());\n  const procedure = useSelector(makeSelectSelectedProcedure());\n\n  const nextButtonEnabled = useSelector(makeSelectEnableNextButton());\n  const error = useSelector(makeSelectError());\n  const errorMessage = useSelector(makeSelectErrorMessage());\n  const requestingOrganizations = useSelector(\n    makeSelectRequestingOrganizations(),\n  );\n  console.log(\"=requestingOrganizations===>\",requestingOrganizations)\n  const toggleSelectOrganizationAction = useAction(toggleSelectOrganization);\n  const toggleSelectProcedureAction = useAction(toggleSelectProcedure);\n  const getIntersectOrganizationsAction = useAction(\n    getIntersectOrganizationsRequest,\n  );\n\n  const getOrganizationProceduresAction = useAction(\n    getOrganizationProceduresRequest,\n  );\n\n  const goToSelectProcedure = () => {\n    if (checkedOrg) {\n      toggleSelectOrganizationAction(checkedOrg);\n      if (!isSafetyTimer) {\n        getOrganizationProceduresAction(checkedOrg);\n      } else {\n        goToSafetyTimerCountdown();\n      }\n    }\n  };\n\n  const goToCountdownAction = () => {\n    NavigatorService.navigate(Screens.Home.Escort.Countdown, {\n      procedure,\n      organization,\n    });\n  };\n\n  const goToSafetyTimerCountdown = () => {\n    NavigatorService.navigate(Screens.Home.Escort.Countdown, {\n      procedure,\n      organization,\n      isSafetyTimer,\n    });\n  };\n\n  const procedureSelectionBack = () => {\n    toggleSelectProcedureAction(null);\n    toggleSelectOrganizationAction(null);\n    if (organizations && organizations.length <= 1) {\n      NavigatorService.navigate(Screens.Home.Escort.EscortType);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"organization====>\",organization)\n    console.log(\"isSafetyTimer====>\",isSafetyTimer)\n    if (organization && isSafetyTimer) {\n      goToSafetyTimerCountdown();\n    }\n  }, [organization, isSafetyTimer]);\n\n  useEffect(() => {\n    if (isFocused) {\n      getIntersectOrganizationsAction();\n      let subscriptions: EmitterSubscription[];\n      subscriptions = [\n        Keyboard.addListener(\n          'keyboardDidShow',\n          () => setIsKeyboardShow(true),\n        ),\n        Keyboard.addListener(\n          'keyboardDidHide',\n          () => setIsKeyboardShow(false),\n        )\n      ];\n  \n      return () => {\n        subscriptions.forEach((s) => s?.remove?.());\n      }\n    }\n    else\n    {\n      return () => {}\n    }\n\n  }, [isFocused]);\n\n  useEffect(() => {\n    if (organizations?.length === 1) {\n      const { id } = organizations[0];\n      if (id !== checkedOrg) {\n        setCheckedOrg(id);\n        toggleSelectOrganizationAction(id);\n        if (!isSafetyTimer) {\n          getOrganizationProceduresAction(id);\n        }\n      }\n    }\n  }, [organizations?.length]);\n\n  const call911 = useCallback(() => makeCall('911'), []);\n\n  if (requestingOrganizations) return <LoadingIndicator />;\n\n  const renderTimedHeader = () => (\n    <>\n      <Header title={formatMessage(messages.timedTitle)} />\n      <InfoRow>\n        <InfoText>{formatMessage(messages.timedInfo)}</InfoText>\n      </InfoRow>\n      {error && (\n        <ErrorRow>\n          <ErrorMessage>{errorMessage}</ErrorMessage>\n        </ErrorRow>\n      )}\n    </>\n  );\n  const renderSafetyHeader = () => (\n    <>\n      <Header title={formatMessage(messages.safetyTitle)} />\n      <InfoRow>\n        <InfoText>{formatMessage(messages.safetyInfo)}</InfoText>\n      </InfoRow>\n      {error && (\n        <ErrorRow>\n          <ErrorMessage>{errorMessage}</ErrorMessage>\n        </ErrorRow>\n      )}\n    </>\n  );\n\n  const renderItem = (itemInfo: ListRenderItemInfo<OrganizationSelection>) => {\n    const org = itemInfo.item;\n\n    return (\n      <ItemRow onPress={() => setCheckedOrg(org.id)}>\n        <>\n          {org.id === checkedOrg && (\n            <ItemCheckImage source={images.icCheck()} />\n          )}\n          <ItemText>{`${org.name}`}</ItemText>\n        </>\n      </ItemRow>\n    );\n  };\n\n  const renderOrganizations = () => {\n    console.log(\"organizations=>\",organizations)\n    if (isEmpty(organizations)) {\n      return (\n        <>\n          <Header\n            title={\n              isSafetyTimer\n                ? formatMessage(messages.safetyTitle)\n                : formatMessage(messages.timedTitle)\n            }\n          />\n          <Call911Container>\n            <Call911Title>\n              {isSafetyTimer\n                ? formatMessage(messages.safetyCall911Title)\n                : formatMessage(messages.timedCall911Title)}\n            </Call911Title>\n            <Call911Info>{formatMessage(messages.call911Info)}</Call911Info>\n            <Call911Button\n              text={formatMessage(messages.call911)}\n              onPress={call911}\n            />\n          </Call911Container>\n        </>\n      );\n    }\n    return (\n      <>\n        {isSafetyTimer ? renderSafetyHeader() : renderTimedHeader()}\n        <List\n          keyExtractor={(org: any) => org?.id?.toString() || ''}\n          data={organizations || []}\n          // extraData={organizations}\n          renderItem={renderItem}\n        />\n        <View style={{ marginTop: 'auto' }} />\n        <NextButtonRow>\n          <ScreenActionButton\n            disabled={!checkedOrg}\n            text={\n              isSafetyTimer\n                ? formatMessage(messages.next)\n                : formatMessage(messages.selectProcedure)\n            }\n            onPress={goToSelectProcedure}\n            onCancel={NavigatorService.back}\n          />\n        </NextButtonRow>\n      </>\n    );\n  };\n\n  // TODO: refactor renderHeader to work for both scenarios\n  const renderProcedureSelection = () => {\n    const renderedProcedures =\n      procedures?.filter(p => p.organization === organization?.id) || [];\n    return (\n      <>\n        <Header title={formatMessage(messages.timedTitle)} />\n        <InfoRow>\n          <InfoText>{formatMessage(messages.procedureSelection)}</InfoText>\n        </InfoRow>\n        {error && (\n          <ErrorRow>\n            <ErrorMessage>{errorMessage}</ErrorMessage>\n          </ErrorRow>\n        )}\n        {!renderedProcedures.length && (\n          <InfoRow>\n            <InfoText>{formatMessage(messages.noProcedures)}</InfoText>\n          </InfoRow>\n        )}\n        {procedures && (\n          <ProcedureList\n            keyExtractor={(proc: any) => proc.id?.toString() || ''}\n            data={renderedProcedures}\n            extraData={renderedProcedures}\n            renderItem={renderProcedure}\n          />\n        )}\n        <NextButtonRow>\n          <ScreenActionButton\n            disabled={!nextButtonEnabled}\n            text={formatMessage(messages.next)}\n            onPress={goToCountdownAction}\n            onCancel={procedureSelectionBack}\n          />\n        </NextButtonRow>\n      </>\n    );\n  };\n\n  const renderProcedure = (\n    itemInfo: ListRenderItemInfo<ProcedureSelection>,\n  ) => {\n    const proced = itemInfo.item;\n\n    return (\n      <ItemRow onPress={() => toggleSelectProcedureAction(proced.id)}>\n        <>\n          {proced.isSelected && <ItemCheckImage source={images.icCheck()} />}\n          <ItemText>{proced.name}</ItemText>\n        </>\n      </ItemRow>\n    );\n  };\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <Container isKeyboard={isKeyboardShow}>\n          {organization ? renderProcedureSelection() : renderOrganizations()}\n        </Container>\n      </SafeAreaContainer>\n    </>\n  );\n};\n\nexport default withNavigationFocus(EscortScreen);\n"],"mappings":"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","ignoreList":[]}