{"version":3,"names":["CLEAR_SELECTIONS","GET_INTERSECT_ORGANIZATIONS_FAILURE","GET_INTERSECT_ORGANIZATIONS_REQUEST","GET_INTERSECT_ORGANIZATIONS_SUCCESS","GET_ORGANIZATION_PROCEDURES_FAILURE","GET_ORGANIZATION_PROCEDURES_REQUEST","GET_ORGANIZATION_PROCEDURES_SUCCESS","TOGGLE_SELECT_ORGANIZATION","TOGGLE_SELECT_PROCEDURE","getIntersectOrganizationsRequest","type","getIntersectOrganizationsSuccess","payload","getIntersectOrganizationsFailure","error","getOrganizationProceduresRequest","id","getOrganizationProceduresSuccess","procedures","getOrganizationProceduresFailure","toggleSelectOrganization","toggleSelectProcedure","clearSelections"],"sources":["actions.ts"],"sourcesContent":["/**\n *\n * TimedEscortScreen actions\n *\n */\n\nimport { Id } from 'incident-code-core';\nimport { IntersectOrganizationSelection, ProcedureSelection } from 'types';\n\nimport {\n  CLEAR_SELECTIONS,\n  GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  GET_INTERSECT_ORGANIZATIONS_REQUEST,\n  GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  GET_ORGANIZATION_PROCEDURES_FAILURE,\n  GET_ORGANIZATION_PROCEDURES_REQUEST,\n  GET_ORGANIZATION_PROCEDURES_SUCCESS,\n  TOGGLE_SELECT_ORGANIZATION,\n  TOGGLE_SELECT_PROCEDURE,\n} from './constants';\nimport { TimedEscortActionTypes } from './types';\n\nexport const getIntersectOrganizationsRequest = (): TimedEscortActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_REQUEST,\n});\n\nexport const getIntersectOrganizationsSuccess = (payload: {\n  organizations: IntersectOrganizationSelection[];\n  organizationGroups: any[];\n}): TimedEscortActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  payload,\n});\n\nexport const getIntersectOrganizationsFailure = (\n  error: Error,\n): TimedEscortActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  payload: error,\n  error: true,\n});\n\nexport const getOrganizationProceduresRequest = (\n  id: Id,\n): TimedEscortActionTypes => ({\n  type: GET_ORGANIZATION_PROCEDURES_REQUEST,\n  payload: id,\n});\n\nexport const getOrganizationProceduresSuccess = (\n  procedures: ProcedureSelection[],\n): TimedEscortActionTypes => ({\n  type: GET_ORGANIZATION_PROCEDURES_SUCCESS,\n  payload: procedures,\n});\n\nexport const getOrganizationProceduresFailure = (\n  error: Error,\n): TimedEscortActionTypes => ({\n  type: GET_ORGANIZATION_PROCEDURES_FAILURE,\n  payload: error,\n  error: true,\n});\n\nexport const toggleSelectOrganization = (id: Id): TimedEscortActionTypes => ({\n  type: TOGGLE_SELECT_ORGANIZATION,\n  payload: id,\n});\n\nexport const toggleSelectProcedure = (id: Id): TimedEscortActionTypes => ({\n  type: TOGGLE_SELECT_PROCEDURE,\n  payload: id,\n});\n\nexport const clearSelections = () => ({ type: CLEAR_SELECTIONS });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAKA,SACEA,gBAAgB,EAChBC,mCAAmC,EACnCC,mCAAmC,EACnCC,mCAAmC,EACnCC,mCAAmC,EACnCC,mCAAmC,EACnCC,mCAAmC,EACnCC,0BAA0B,EAC1BC,uBAAuB,QAClB,aAAa;AAGpB,OAAO,MAAMC,gCAAgC,GAAGA,CAAA,MAA+B;EAC7EC,IAAI,EAAER;AACR,CAAC,CAAC;AAEF,OAAO,MAAMS,gCAAgC,GAAIC,OAGhD,KAA8B;EAC7BF,IAAI,EAAEP,mCAAmC;EACzCS;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,gCAAgC,GAC3CC,KAAY,KACgB;EAC5BJ,IAAI,EAAET,mCAAmC;EACzCW,OAAO,EAAEE,KAAK;EACdA,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,OAAO,MAAMC,gCAAgC,GAC3CC,EAAM,KACsB;EAC5BN,IAAI,EAAEL,mCAAmC;EACzCO,OAAO,EAAEI;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,gCAAgC,GAC3CC,UAAgC,KACJ;EAC5BR,IAAI,EAAEJ,mCAAmC;EACzCM,OAAO,EAAEM;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,gCAAgC,GAC3CL,KAAY,KACgB;EAC5BJ,IAAI,EAAEN,mCAAmC;EACzCQ,OAAO,EAAEE,KAAK;EACdA,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,OAAO,MAAMM,wBAAwB,GAAIJ,EAAM,KAA8B;EAC3EN,IAAI,EAAEH,0BAA0B;EAChCK,OAAO,EAAEI;AACX,CAAC,CAAC;AAEF,OAAO,MAAMK,qBAAqB,GAAIL,EAAM,KAA8B;EACxEN,IAAI,EAAEF,uBAAuB;EAC7BI,OAAO,EAAEI;AACX,CAAC,CAAC;AAEF,OAAO,MAAMM,eAAe,GAAGA,CAAA,MAAO;EAAEZ,IAAI,EAAEV;AAAiB,CAAC,CAAC","ignoreList":[]}