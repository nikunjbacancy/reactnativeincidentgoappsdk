{"version":3,"names":["produce","map","GET_INTERSECT_ORGANIZATIONS_FAILURE","GET_INTERSECT_ORGANIZATIONS_REQUEST","GET_INTERSECT_ORGANIZATIONS_SUCCESS","TOGGLE_SELECT_ORGANIZATION","initialState","organizations","undefined","organizationGroups","requestingOrganizations","error","errorMessage","selectOrganizationScreenReducer","draft","action","type","payload","organization","id","isSelected","message"],"sources":["reducer.ts"],"sourcesContent":["/**\n *\n * SelectOrganizationScreen reducer\n *\n */\n\nimport produce, { Draft } from 'immer';\nimport map from 'lodash/map';\n\nimport {\n  GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  GET_INTERSECT_ORGANIZATIONS_REQUEST,\n  GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  TOGGLE_SELECT_ORGANIZATION,\n} from './constants';\nimport {\n  SelectOrganizationActionTypes,\n  SelectOrganizationState,\n} from './types';\n\nexport const initialState: SelectOrganizationState = {\n  organizations: undefined,\n  organizationGroups: [],\n  requestingOrganizations: true,\n  error: false,\n  errorMessage: '',\n};\n\nconst selectOrganizationScreenReducer = produce(\n  (\n    draft: Draft<SelectOrganizationState>,\n    action: SelectOrganizationActionTypes,\n  ) => {\n    switch (action.type) {\n      case GET_INTERSECT_ORGANIZATIONS_REQUEST:\n        draft.requestingOrganizations = true;\n        break;\n      case GET_INTERSECT_ORGANIZATIONS_SUCCESS:\n        draft.requestingOrganizations = false;\n        draft.organizations = action.payload.organizations;\n        break;\n      case TOGGLE_SELECT_ORGANIZATION:\n        draft.error = false;\n        draft.organizations = map(draft.organizations, organization => {\n          if (organization.id === action.payload) {\n            return {\n              ...organization,\n              isSelected: !organization.isSelected,\n            };\n          }\n          return {\n            ...organization,\n            isSelected: false,\n          };\n        });\n        break;\n      case GET_INTERSECT_ORGANIZATIONS_FAILURE:\n        draft.error = action.error;\n        draft.errorMessage = action.payload.message;\n        draft.requestingOrganizations = false;\n        break;\n      default:\n    }\n  },\n  initialState,\n);\n\nexport default selectOrganizationScreenReducer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,OAAO,MAAiB,OAAO;AACtC,OAAOC,GAAG,MAAM,YAAY;AAE5B,SACEC,mCAAmC,EACnCC,mCAAmC,EACnCC,mCAAmC,EACnCC,0BAA0B,QACrB,aAAa;AAMpB,OAAO,MAAMC,YAAqC,GAAG;EACnDC,aAAa,EAAEC,SAAS;EACxBC,kBAAkB,EAAE,EAAE;EACtBC,uBAAuB,EAAE,IAAI;EAC7BC,KAAK,EAAE,KAAK;EACZC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,+BAA+B,GAAGb,OAAO,CAC7C,CACEc,KAAqC,EACrCC,MAAqC,KAClC;EACH,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKb,mCAAmC;MACtCW,KAAK,CAACJ,uBAAuB,GAAG,IAAI;MACpC;IACF,KAAKN,mCAAmC;MACtCU,KAAK,CAACJ,uBAAuB,GAAG,KAAK;MACrCI,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACE,OAAO,CAACV,aAAa;MAClD;IACF,KAAKF,0BAA0B;MAC7BS,KAAK,CAACH,KAAK,GAAG,KAAK;MACnBG,KAAK,CAACP,aAAa,GAAGN,GAAG,CAACa,KAAK,CAACP,aAAa,EAAEW,YAAY,IAAI;QAC7D,IAAIA,YAAY,CAACC,EAAE,KAAKJ,MAAM,CAACE,OAAO,EAAE;UACtC,OAAO;YACL,GAAGC,YAAY;YACfE,UAAU,EAAE,CAACF,YAAY,CAACE;UAC5B,CAAC;QACH;QACA,OAAO;UACL,GAAGF,YAAY;UACfE,UAAU,EAAE;QACd,CAAC;MACH,CAAC,CAAC;MACF;IACF,KAAKlB,mCAAmC;MACtCY,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACJ,KAAK;MAC1BG,KAAK,CAACF,YAAY,GAAGG,MAAM,CAACE,OAAO,CAACI,OAAO;MAC3CP,KAAK,CAACJ,uBAAuB,GAAG,KAAK;MACrC;IACF;EACF;AACF,CAAC,EACDJ,YACF,CAAC;AAED,eAAeO,+BAA+B","ignoreList":[]}