{"version":3,"names":["AsyncStorage","AppEvent","event","twilio","images","CallModal","ChatModal","SafeAreaContainer","PanicButton","ClearLocationData","LogErrorToDb","makeSelectAppLocation","makeSelectTwilioAccessToken","filter","forEach","isEmpty","React","useCallback","useEffect","useRef","useState","useIntl","Alert","AppState","StatusBar","KeepAwake","TwilioVideo","TwilioVideoLocalView","useAction","useBackButton","useSelector","stopBackgroundGeolocation","addBadge","removeBadge","isTokenExpired","refreshTwilioAccessToken","requestCameraPermissions","PermissionStatus","api","addMessage","appStateChangeAction","clearDataAndGoBack","enterPanicMode","exitPanicMode","hideCallModal","hideChatModal","hideExitPanicModal","hideSafeModal","imSafeRequest","sendMessageRequest","setEscortFromPassive","showCallModal","showChatModal","showExitPanicModal","showPanicInfo","showSafeModal","startChat","toggleRecordType","ESCORT_STATE_KEY","PANIC_MODE_KEY","ExitPanicModal","messages","RecordAudio","SafeModal","makeSelectIsPanicMode","makeSelectMessages","makeSelectRecordType","makeSelectRequestingImSafe","makeSelectShouldShowCallModal","makeSelectShouldShowChatModal","makeSelectShouldShowExitPanicModal","makeSelectShouldShowPanicInfo","makeSelectShouldShowSafeModal","makeSelectAppState","AudioStream","BottomControls","CameraFlipButton","ChatButton","ChatContainer","Container","Logo","MiddleControls","OrganizationName","PanicInfoContainer","PanicOverlay","PhoneButton","RecordContainer","RecordDot","SafeButton","SafeButtonText","SharingText","StyledBadge","ToggleContainer","ToggleImage","ToggleImageContainer","ToggleText","TimerExpiredBanner","EscortState","PanicMode","RecordType","connectionTypes","EscortScreen","navigation","getParam","permissionStatus","setPermissionStatus","Checking","incidentEscort","organization","fromPassive","badges","setBadges","showTimerExpired","setShowTimerExpired","connectionState","setConnectionState","disconnected","locationRef","formatMessage","showCallModalAction","hideCallModalAction","showSafeModalAction","hideSafeModalAction","toggleRecordTypeAction","startChatAction","showChatModalAction","hideChatModalAction","sendMessageAction","addMessageAction","imSafeAction","showPanicInfoAction","enterPanicModeAction","exitPanicModeAction","showExitPanicModalAction","hideExitPanicModalAction","clearDataAndGoBackAction","setTriggeredFromPassiveAction","clearLocation","logError","appStateStatusChange","shouldShowCallModal","shouldShowSafeModal","recordType","shouldShowChatModal","chatMessages","requestingImSafe","shouldShowPanicInfo","shouldShowExitPanicModal","accessToken","isPanicMode","location","appState","twilioVideoRef","panicModeRef","tryRequestCameraPermissions","then","Granted","catch","Blocked","onEscortClosed","current","setTimeout","alert","escortClosed","escortClosedDetail","text","ok","onPress","cancelable","handleAppStateChange","state","initTwilioVideo","connnected","_twilioVideoRef$curre","_incidentEscort$twili","token","connect","roomName","roomId","access_token","maintainVideoTrackInBackground","enableAudio","enableRemoteAudio","connecting","initEffects","activate","on","OnEscortClosed","currentState","addEventListener","asyncInit","panicMode","getItem","Active","setItem","Started","_incidentEscort$twili2","_twilioVideoRef$curre2","_incidentEscort$twili3","console","log","err","logger","initEffectCleanUp","off","deactivate","removeEventListener","asyncCleanup","_twilioVideoRef$curre3","Finished","disconnect","message","_twilioVideoRef$curre4","setLocalVideoEnabled","Video","manageChatNotifications","notificationAdded","notificationBadges","n","id","OnNotificationBadge","messageAdded","OnMessageAdded","onMessageOpenChatBox","OnChatMessageTap","clean","_incidentEscort$id","removeChannelEvents","toString","e","_twilioVideoRef$curre5","_twilioVideoRef$curre6","setLocalAudioEnabled","fromTimerExpired","_twilioVideoRef$curre7","_twilioVideoRef$curre8","handleSendMessage","messagesToSent","handleSafeModalContinue","comment","_twilioVideoRef$curre9","handleEnterPanicModeAction","Audio","_twilioVideoRef$curre10","handleExitPanicModeAction","clearBadges","onFlipButtonClick","_twilioVideoRef$curre11","flipCamera","handleRoomDidConnect","_twilioVideoRef$curre12","_twilioVideoRef$curre13","_twilioVideoRef$curre14","_twilioVideoRef$curre15","setRemoteAudioEnabled","source","raw","JSON","stringify","handleRoomDisconnect","payload","error","handleRoomConnectionFail","createElement","Fragment","barStyle","backgroundColor","applyZOrder","enabled","style","flex","escort","organizationName","name","sharingAudio","shareVideo","image","icFlip","endPanic","imSafe","onFill","panic","icPhoneCall","disabled","icMicrophone","icCamera","audioOnly","icChat","length","isVisible","hideModal","onContinue","onMessageSent","onShow","onHide","onConfirm","ref","onRoomDidConnect","onRoomDidDisconnect","onRoomDidFailToConnect"],"sources":["index.tsx"],"sourcesContent":["/* eslint-disable simple-import-sort/sort */\n/* eslint-disable no-unused-expressions,@typescript-eslint/no-misused-promises */\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AppEvent, event, twilio } from '../../../../../api';\nimport { images } from '../../../../../assets';\nimport {\n  CallModal,\n  ChatModal,\n  SafeAreaContainer,\n  PanicButton,\n} from '../../../../../components';\nimport { ClearLocationData, LogErrorToDb } from '../../../../../containers/app/actions';\nimport {\n  makeSelectAppLocation,\n  makeSelectTwilioAccessToken,\n} from '../../../../../containers/app/selectors';\nimport { Id, IncidentEscort, Organization } from 'incident-code-core';\nimport filter from 'lodash/filter';\nimport forEach from 'lodash/forEach';\nimport isEmpty from 'lodash/isEmpty';\nimport React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Alert, AppState, AppStateStatus, StatusBar } from 'react-native';\nimport { Location } from 'react-native-background-geolocation';\nimport { IMessage as GiftedChatMessage } from 'react-native-gifted-chat';\nimport KeepAwake from 'react-native-keep-awake';\nimport { ScreenProps } from 'react-native-screens';\nimport {\n  TwilioVideo,\n  TwilioVideoLocalView,\n} from 'react-native-twilio-video-webrtc';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport { useAction, useBackButton, useSelector } from '../../../../../utils/hooks';\nimport { stopBackgroundGeolocation } from '../../../../../utils/location/backgroundGeolocation';\nimport { addBadge, removeBadge } from '../../../../../utils/notification';\nimport { isTokenExpired, refreshTwilioAccessToken } from '../../../../../utils/token';\nimport { requestCameraPermissions } from '../../../../../utils/permission';\n\nenum PermissionStatus {\n  Checking,\n  Granted,\n  Blocked,\n}\n\nimport * as api from '../../../../../api';\nimport {\n  addMessage,\n  appStateChangeAction,\n  clearDataAndGoBack,\n  enterPanicMode,\n  exitPanicMode,\n  hideCallModal,\n  hideChatModal,\n  hideExitPanicModal,\n  hideSafeModal,\n  imSafeRequest,\n  sendMessageRequest,\n  setEscortFromPassive,\n  showCallModal,\n  showChatModal,\n  showExitPanicModal,\n  showPanicInfo,\n  showSafeModal,\n  startChat,\n  toggleRecordType,\n} from './actions';\nimport { ESCORT_STATE_KEY, PANIC_MODE_KEY } from './constants';\nimport ExitPanicModal from './ExitPanicModal';\nimport messages from './messages';\nimport RecordAudio from './RecordAudio';\nimport SafeModal from './SafeModal';\nimport {\n  makeSelectIsPanicMode,\n  makeSelectMessages,\n  makeSelectRecordType,\n  makeSelectRequestingImSafe,\n  makeSelectShouldShowCallModal,\n  makeSelectShouldShowChatModal,\n  makeSelectShouldShowExitPanicModal,\n  makeSelectShouldShowPanicInfo,\n  makeSelectShouldShowSafeModal,\n  makeSelectAppState,\n} from './selectors';\nimport {\n  AudioStream,\n  BottomControls,\n  CameraFlipButton,\n  ChatButton,\n  ChatContainer,\n  Container,\n  Logo,\n  MiddleControls,\n  OrganizationName,\n  PanicInfoContainer,\n  PanicOverlay,\n  PhoneButton,\n  RecordContainer,\n  RecordDot,\n  SafeButton,\n  SafeButtonText,\n  SharingText,\n  StyledBadge,\n  ToggleContainer,\n  ToggleImage,\n  ToggleImageContainer,\n  ToggleText,\n} from './styles';\nimport TimerExpiredBanner from './TimerExpired';\nimport { EscortState, PanicMode, RecordType } from './types';\n\nenum connectionTypes {\n  disconnected = 'disconnected',\n  connecting = 'connnecting',\n  connnected = 'connected',\n}\n\ninterface Params {\n  incidentEscort: IncidentEscort;\n  organization: Organization;\n  fromPassive?: boolean;\n}\ninterface Props extends NavigationStackScreenProps<Params, ScreenProps> { }\n\nconst EscortScreen: FC<Props> = ({ navigation: { getParam } }) => {\n\n  const [permissionStatus, setPermissionStatus] = useState(\n    PermissionStatus.Checking,\n  );\n\n  const incidentEscort = getParam('incidentEscort');\n  const organization = getParam('organization');\n  const fromPassive = getParam('fromPassive');\n\n  const [badges, setBadges] = useState<Id[]>([]);\n  const [showTimerExpired, setShowTimerExpired] = useState(false);\n  const [connectionState, setConnectionState] = useState<connectionTypes>(\n    connectionTypes.disconnected,\n  );\n  const locationRef = useRef<Location>();\n\n  const { formatMessage } = useIntl();\n\n  const showCallModalAction = useAction(showCallModal);\n  const hideCallModalAction = useAction(hideCallModal);\n  const showSafeModalAction = useAction(showSafeModal);\n  const hideSafeModalAction = useAction(hideSafeModal);\n  const toggleRecordTypeAction = useAction(toggleRecordType);\n  const startChatAction = useAction(startChat);\n  const showChatModalAction = useAction(showChatModal);\n  const hideChatModalAction = useAction(hideChatModal);\n  const sendMessageAction = useAction(sendMessageRequest);\n  const addMessageAction = useAction(addMessage);\n  const imSafeAction = useAction(imSafeRequest);\n  const showPanicInfoAction = useAction(showPanicInfo);\n  const enterPanicModeAction = useAction(enterPanicMode);\n  const exitPanicModeAction = useAction(exitPanicMode);\n  const showExitPanicModalAction = useAction(showExitPanicModal);\n  const hideExitPanicModalAction = useAction(hideExitPanicModal);\n  const clearDataAndGoBackAction = useAction(clearDataAndGoBack);\n  const setTriggeredFromPassiveAction = useAction(setEscortFromPassive);\n  const clearLocation = useAction(ClearLocationData);\n  const logError = useAction(LogErrorToDb);\n  const appStateStatusChange = useAction(appStateChangeAction);\n  const shouldShowCallModal = useSelector(makeSelectShouldShowCallModal());\n  const shouldShowSafeModal = useSelector(makeSelectShouldShowSafeModal());\n  const recordType = useSelector(makeSelectRecordType());\n  const shouldShowChatModal = useSelector(makeSelectShouldShowChatModal());\n  const chatMessages = useSelector(makeSelectMessages());\n  const requestingImSafe = useSelector(makeSelectRequestingImSafe());\n  const shouldShowPanicInfo = useSelector(makeSelectShouldShowPanicInfo());\n  const shouldShowExitPanicModal = useSelector(\n    makeSelectShouldShowExitPanicModal(),\n  );\n  const accessToken = useSelector(makeSelectTwilioAccessToken());\n  const isPanicMode = useSelector(makeSelectIsPanicMode());\n  const location = useSelector(makeSelectAppLocation());\n  const appState = useSelector(makeSelectAppState());\n\n  const twilioVideoRef = useRef<TwilioVideo>(null);\n  const panicModeRef = useRef(false);\n\n  // console.log(\"isPanicMode ====>\",isPanicMode)\n\n  useBackButton(() => {\n    showSafeModalAction();\n    return true;\n  });\n\n\n  const tryRequestCameraPermissions = () => {\n    requestCameraPermissions()\n      .then(() => {\n        // console.log(\"camera permission granted\")\n        setPermissionStatus(PermissionStatus.Granted);\n      })\n      .catch(() => {\n        // console.log(\"camera permission blocked\")\n        setPermissionStatus(PermissionStatus.Blocked);\n      });\n  };\n\n\n  const onEscortClosed = () => {\n    hideChatModalAction();\n    exitPanicModeAction(incidentEscort);\n    panicModeRef.current = false;\n    setTimeout(\n      async () => {\n        Alert.alert(\n          formatMessage(messages.escortClosed),\n          formatMessage(messages.escortClosedDetail),\n          [\n            {\n              text: formatMessage(messages.ok),\n              onPress: clearDataAndGoBackAction,\n            },\n          ],\n          { cancelable: false },\n        );\n        await stopBackgroundGeolocation(clearLocation);\n      },\n      shouldShowChatModal ? 5000 : 1500,\n    );\n  };\n\n  const handleAppStateChange = (state: AppStateStatus) => {\n    appStateStatusChange({ state, incidentEscort });\n  };\n\n  //initialize twilio video\n  const initTwilioVideo = async () => {\n    if (showTimerExpired === true && connectionState !== connectionTypes.connnected) {\n      // console.log(\"initTwilioVideo===>\")\n      let token = accessToken;\n      if (isTokenExpired(accessToken)) {\n        token = await refreshTwilioAccessToken();\n      }\n      // console.log(\"incidentEscort.twilio?.roomId===>\",incidentEscort.twilio?.roomId)\n      twilioVideoRef.current?.connect({\n        roomName: incidentEscort.twilio?.roomId,\n        accessToken: token.access_token || '',\n        maintainVideoTrackInBackground: true,\n        enableAudio: true,\n        enableRemoteAudio: true\n      });\n      // console.log(\"-initTwilioVideo Connecting--->\")\n      setConnectionState(connectionTypes.connecting);\n    }\n  }\n\n  useEffect(function initEffects() {\n    KeepAwake.activate(); // sync\n    event.on(AppEvent.OnEscortClosed, onEscortClosed); // sync\n    handleAppStateChange(AppState.currentState); // if app is restart mid escort, need to update AppState to 'active'\n    AppState.addEventListener('change', handleAppStateChange); // sync\n    tryRequestCameraPermissions()\n    const asyncInit = async () => {\n      try {\n        const panicMode = await AsyncStorage.getItem(PANIC_MODE_KEY);\n        // console.log(\"=panicMode======>\", panicMode)\n        if (panicMode === PanicMode.Active) {\n          panicModeRef.current = true;\n          enterPanicModeAction(incidentEscort);\n        } else {\n          panicModeRef.current = false;\n        }\n        await AsyncStorage.setItem(ESCORT_STATE_KEY, EscortState.Started);\n\n        // console.log(\"=panicMode======>\", panicMode)\n        // console.log(\"=isPanicMode======>\", isPanicMode)\n        // let token = accessToken;\n        // if (isTokenExpired(accessToken)) {\n        //   token = await refreshTwilioAccessToken();\n        // }\n        // twilioVideoRef.current?.connect({\n        //   roomName: incidentEscort.twilio?.roomId,\n        //   accessToken: token.access_token || '',\n        //   maintainVideoTrackInBackground: true,\n        //   enableAudio: true,\n        //   enableRemoteAudio:true\n        // });\n        // console.log(\"-Connecting--->\")\n        // setConnectionState(connectionTypes.connecting);\n\n\n\n        if (AppState.currentState === 'active' && showTimerExpired === false && isPanicMode === false) {\n          let token = accessToken;\n          if (isTokenExpired(accessToken)) {\n            token = await refreshTwilioAccessToken();\n          }\n          console.log(\"-incidentEscort.twilio?.roomId 2--->\",incidentEscort.twilio?.roomId)\n          twilioVideoRef.current?.connect({\n            roomName: incidentEscort.twilio?.roomId,\n            accessToken: token.access_token || '',\n            maintainVideoTrackInBackground: true,\n            enableAudio: true,\n            enableRemoteAudio: true\n          });\n          // console.log(\"-initEffects Connectin g--->\")\n          setConnectionState(connectionTypes.connecting);\n        }\n\n\n\n      } catch (err) {\n        api.logger.log('Record Screen async init', err);\n      }\n    };\n    asyncInit();\n    return function initEffectCleanUp() {\n      event.off(AppEvent.OnEscortClosed, onEscortClosed); // sync\n      KeepAwake.deactivate(); // sync\n      AppState.removeEventListener('change', handleAppStateChange); // sync\n      const asyncCleanup = async () => {\n        try {\n          await AsyncStorage.setItem(ESCORT_STATE_KEY, EscortState.Finished); // async\n          twilioVideoRef.current?.disconnect();\n        } catch (err) {\n          api.logger.log('Record Screen async cleanup', (err as Error).message);\n        }\n      };\n      asyncCleanup();\n    };\n  }, []);\n\n  // Manage toggle sideEffect\n  useEffect(() => {\n    (async () => {\n      try {\n        if (!isPanicMode && connectionState === connectionTypes.connnected) {\n          await twilioVideoRef.current?.setLocalVideoEnabled(\n            recordType === RecordType.Video,\n          );\n        }\n      } catch (err) {\n        api.logger.log('Toggle video enabled ERR: ', (err as Error).message);\n      }\n    })();\n  }, [recordType, isPanicMode]);\n\n  // // Manage toggle sideEffect\n  // useEffect(() => {\n  //   (async () => {\n  //     try {\n  //       console.log(\"isPanicMode****==>\",isPanicMode)\n  //       if (isPanicMode && connectionState !== connectionTypes.connnected) {\n  //         let token = accessToken;\n  //         if (isTokenExpired(accessToken)) {\n  //           token = await refreshTwilioAccessToken();\n  //         }\n  //         twilioVideoRef.current?.connect({\n  //           roomName: incidentEscort.twilio?.roomId,\n  //           accessToken: token.access_token || '',\n  //           maintainVideoTrackInBackground: true,\n  //           enableAudio: true,\n  //           enableRemoteAudio: true\n  //         });\n  //         console.log(\"-useEffect Connecting--->\")\n  //         setConnectionState(connectionTypes.connecting);\n  //       }\n  //     } catch (err) {\n  //       api.logger.log('Toggle video enabled ERR: ', err);\n  //     }\n  //   })();\n  // }, [isPanicMode]);\n\n  useEffect(\n    function manageChatNotifications() {\n      startChatAction(incidentEscort);\n      const notificationAdded = (notificationBadges: Id[]) => {\n        setBadges(filter(notificationBadges, n => n === incidentEscort.id));\n      };\n      event.on(AppEvent.OnNotificationBadge, notificationAdded);\n      const messageAdded = async (message: GiftedChatMessage) => {\n        await addBadge(incidentEscort.id as Id);\n        addMessageAction(message);\n      };\n      event.on(AppEvent.OnMessageAdded, messageAdded);\n\n      const onMessageOpenChatBox = async (message: GiftedChatMessage) => {\n        console.log(\"open chat box===>\",message)\n        showChatModalAction()\n      };\n      event.on(AppEvent.OnChatMessageTap, onMessageOpenChatBox);\n      return function clean() {\n        event.off(AppEvent.OnNotificationBadge, notificationAdded);\n        event.off(AppEvent.OnMessageAdded, messageAdded);\n        twilio\n          .removeChannelEvents(incidentEscort.id?.toString() || '')\n          .then()\n          .catch(e => api.logger.log('Remove chat channel event', e));\n      };\n    },\n    [addMessageAction, incidentEscort, startChatAction],\n  );\n\n  useEffect(() => {\n    (() => {\n      if (connectionState === connectionTypes.connnected) {\n        if (panicModeRef.current) {\n          try {\n            // console.log(\"Video Enable\")\n            setTimeout(async () => {\n              toggleRecordTypeAction(incidentEscort);\n              await twilioVideoRef.current?.setLocalAudioEnabled(true);\n              await twilioVideoRef.current?.setLocalVideoEnabled(true);\n            }, 5000);\n          } catch (err) {\n            api.logger.log('Enter panic ERR: ', (err as Error).message);\n          }\n        }\n      }\n    })();\n  }, [incidentEscort, toggleRecordTypeAction, connectionState]);\n\n  useEffect(() => {\n    setShowTimerExpired(!!incidentEscort.fromTimerExpired);\n  }, [incidentEscort]);\n\n  useEffect(() => {\n    if (fromPassive) {\n      setTriggeredFromPassiveAction();\n    }\n  }, [fromPassive, setTriggeredFromPassiveAction]);\n\n  useEffect(() => {\n    locationRef.current = location;\n  }, [location]);\n\n  useEffect(() => {\n    (async () => {\n      if (!panicModeRef.current && appState === 'active') {\n        initTwilioVideo() // initialize twilio video\n        await twilioVideoRef.current?.setLocalAudioEnabled(true);\n        await twilioVideoRef.current?.setLocalVideoEnabled(\n          recordType === RecordType.Video,\n        );\n      }\n    })();\n  }, [appState, recordType]);\n\n  const handleSendMessage = useCallback(\n    (messagesToSent: GiftedChatMessage[]) => {\n      forEach(messagesToSent, message => {\n        sendMessageAction({\n          incidentEscort,\n          message,\n          location: locationRef.current,\n        });\n      });\n    },\n    [incidentEscort, sendMessageAction],\n  );\n\n  const handleSafeModalContinue = useCallback(\n    (comment: string | undefined) => {\n      exitPanicModeAction(incidentEscort);\n      panicModeRef.current = false;\n\n      imSafeAction({ incidentEscort, comment });\n      twilioVideoRef.current?.disconnect();\n      if (!fromPassive) {\n        (async () => {\n          await stopBackgroundGeolocation(clearLocation);\n        })();\n      }\n    },\n    [imSafeAction, incidentEscort, fromPassive],\n  );\n\n  const handleEnterPanicModeAction = useCallback(() => {\n    enterPanicModeAction(incidentEscort);\n    panicModeRef.current = true;\n    if (recordType === RecordType.Audio && connectionState === connectionTypes.connnected) {\n      toggleRecordTypeAction(incidentEscort);\n      twilioVideoRef.current?.setLocalVideoEnabled(true);\n    }\n  }, [\n    enterPanicModeAction,\n    incidentEscort,\n    recordType,\n    toggleRecordTypeAction,\n    connectionState,\n  ]);\n\n  const handleExitPanicModeAction = useCallback(() => {\n    exitPanicModeAction(incidentEscort);\n    panicModeRef.current = false;\n  }, [exitPanicModeAction, incidentEscort]);\n\n  const clearBadges = useCallback(async () => {\n    await removeBadge(incidentEscort.id as Id);\n  }, [incidentEscort]);\n\n  const onFlipButtonClick = useCallback(() => {\n    // console.log(\"-connectionState->\", connectionState)\n    // console.log(\"-twilioVideoRef.current?->\", twilioVideoRef.current)\n    if (connectionState === connectionTypes.connnected) {\n      twilioVideoRef.current?.flipCamera();\n    }\n  }, [connectionState]);\n\n  const handleRoomDidConnect = useCallback(async () => {\n    try {\n      console.log(\"-Connected--->\")\n      setConnectionState(connectionTypes.connnected);\n      await twilioVideoRef.current?.setRemoteAudioEnabled(true);\n      await twilioVideoRef.current?.setLocalAudioEnabled(true);\n      await twilioVideoRef.current?.setLocalVideoEnabled(false);\n      twilioVideoRef.current?.flipCamera();\n    } catch (e) {\n      logError({\n        source: 'handleRoomDidConnect',\n        message: (e as Error).message,\n        raw: JSON.stringify(e),\n      });\n    }\n  }, [logError]);\n\n  const handleRoomDisconnect = useCallback(\n    payload => {\n      console.log(\"-DisConnected--->\")\n      setConnectionState(connectionTypes.disconnected);\n      logError({\n        source: 'Record Screen: OnRoomDidDisconnect',\n        message: payload.error,\n        raw: JSON.stringify(payload),\n      });\n    },\n    [logError],\n  );\n\n  // const reconnect = async () => {\n\n  //   let token = accessToken;\n  //   if (isTokenExpired(accessToken)) {\n  //     token = await refreshTwilioAccessToken();\n  //   }\n  //   twilioVideoRef.current?.connect({\n  //     roomName: incidentEscort.twilio?.roomId,\n  //     accessToken: token.access_token || '',\n  //     maintainVideoTrackInBackground: true,\n  //     encodingParameters: { enableH264Codec: true }\n  //   });\n  //   console.log(\"-Connecting--->\")\n  //   setConnectionState(connectionTypes.connecting);\n  // }\n\n  const handleRoomConnectionFail = useCallback(\n    payload => {\n      console.log(\"-Connection Failed--->\", payload)\n      setConnectionState(connectionTypes.disconnected);\n      // reconnect()\n      logError({\n        source: 'Record Screen: OnRoomDidFailToConnect',\n        message: payload.error,\n        raw: JSON.stringify(payload),\n      });\n    },\n    [logError],\n\n  );\n\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <Container>\n          <RecordContainer>\n            {connectionState === connectionTypes.connnected && (\n              <TwilioVideoLocalView\n                applyZOrder={true}\n                enabled={recordType === RecordType.Video}\n                style={{ flex: 1 }}\n              />\n            )}\n            {recordType === RecordType.Audio && (\n              <RecordAudio location={location} />\n            )}\n            <Logo />\n            <OrganizationName>\n              {formatMessage(messages.escort, {\n                organizationName: organization.name,\n              })}\n            </OrganizationName>\n            {showTimerExpired && <TimerExpiredBanner />}\n            <SharingText>\n              {formatMessage(\n                recordType === RecordType.Audio\n                  ? messages.sharingAudio\n                  : messages.shareVideo,\n              )}\n            </SharingText>\n            {recordType === RecordType.Audio && <AudioStream />}\n            {recordType === RecordType.Video && <RecordDot />}\n            {shouldShowPanicInfo && <PanicInfoContainer />}\n            {recordType === RecordType.Video && (\n              <CameraFlipButton\n                onPress={onFlipButtonClick}\n                image={images.icFlip()}\n              />\n            )}\n          </RecordContainer>\n          <MiddleControls>\n            <SafeButton\n              onPress={\n                isPanicMode ? showExitPanicModalAction : showSafeModalAction\n              }\n            >\n              <SafeButtonText>\n                {formatMessage(\n                  isPanicMode ? messages.endPanic : messages.imSafe,\n                )}\n              </SafeButtonText>\n            </SafeButton>\n            <PanicButton\n              isPanicMode={isPanicMode}\n              onPress={showPanicInfoAction}\n              onFill={handleEnterPanicModeAction}\n              text={formatMessage(messages.panic)}\n            />\n          </MiddleControls>\n          <BottomControls>\n            <PhoneButton\n              onPress={showCallModalAction}\n              image={images.icPhoneCall()}\n            />\n            <ToggleContainer\n              disabled={isPanicMode}\n              recordType={recordType}\n              onPress={() => toggleRecordTypeAction(incidentEscort)}\n            >\n              <ToggleImageContainer>\n                <ToggleImage\n                  source={\n                    recordType === RecordType.Audio\n                      ? images.icMicrophone()\n                      : images.icCamera()\n                  }\n                />\n              </ToggleImageContainer>\n              <ToggleText>\n                {recordType === RecordType.Audio\n                  ? formatMessage(messages.shareVideo)\n                  : formatMessage(messages.audioOnly)}\n              </ToggleText>\n            </ToggleContainer>\n            <ChatContainer>\n              <ChatButton\n                onPress={showChatModalAction}\n                image={images.icChat()}\n              />\n              {!isEmpty(badges) && <StyledBadge length={badges.length} />}\n            </ChatContainer>\n          </BottomControls>\n        </Container>\n        <CallModal\n          isVisible={shouldShowCallModal}\n          hideModal={hideCallModalAction}\n          organization={organization}\n        />\n        <SafeModal\n          isVisible={shouldShowSafeModal}\n          hideModal={hideSafeModalAction}\n          onContinue={handleSafeModalContinue}\n          requestingImSafe={requestingImSafe}\n        />\n        {location && (\n          <ChatModal\n            isVisible={shouldShowChatModal}\n            hideModal={hideChatModalAction}\n            organization={organization}\n            messages={chatMessages}\n            onMessageSent={handleSendMessage}\n            onShow={clearBadges}\n            onHide={clearBadges}\n          />\n        )}\n        <ExitPanicModal\n          isVisible={shouldShowExitPanicModal}\n          hideModal={hideExitPanicModalAction}\n          onConfirm={handleExitPanicModeAction}\n        />\n\n        <TwilioVideo\n          ref={twilioVideoRef}\n          onRoomDidConnect={handleRoomDidConnect}\n          onRoomDidDisconnect={handleRoomDisconnect}\n          onRoomDidFailToConnect={handleRoomConnectionFail}\n\n        />\n\n        {/* {recordType == RecordType.Video ?\n          <TwilioVideo\n            ref={twilioVideoRef}\n            onRoomDidConnect={handleRoomDidConnect}\n            onRoomDidDisconnect={handleRoomDisconnect}\n            onRoomDidFailToConnect={handleRoomConnectionFail}\n          /> :\n          null\n        } */}\n      </SafeAreaContainer>\n      {isPanicMode && <PanicOverlay />}\n    </>\n  );\n};\n\nexport default EscortScreen;\n\n"],"mappings":"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","ignoreList":[]}