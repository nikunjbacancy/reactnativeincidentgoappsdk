{"version":3,"names":["AsyncStorage","TOKEN_KEY","createAxiosInstance","getVersion","isTokenExpired","sdkConfigs","refreshTokenAxios","setHeaders","config","token","undefined","headers","configs","headerSecurityCode","Authorization","token_type","access_token","refreshToken","post","then","response","data","configInterceptors","axios","interceptors","request","use","tokenStr","getItem","JSON","parse","error","Promise","reject"],"sources":["interceptor.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { TOKEN_KEY } from '../containers/app/constants';\nimport { AccessToken } from 'incident-code-core';\nimport createAxiosInstance from '../utils/axios';\nimport { getVersion } from '../utils/device';\nimport { isTokenExpired } from '../utils/token';\nimport { sdkConfigs } from '../sdkConfigs'\n\nconst refreshTokenAxios = createAxiosInstance();\n\nconst setHeaders = (\n  config: AxiosRequestConfig,\n  token: AccessToken | undefined = undefined,\n): AxiosRequestConfig => {\n  const { headers } = config;\n  headers['Security-Code'] = sdkConfigs.configs.headerSecurityCode;\n  headers['Client-Version'] = getVersion();\n\n  if (token) {\n    headers.Authorization = `${token.token_type} ${token.access_token}`;\n  }\n\n  return config;\n};\n\nconst refreshToken = (config: AxiosRequestConfig) =>\n  refreshTokenAxios\n    .post('auth')\n    .then((response: AxiosResponse<AccessToken>) =>\n      setHeaders(config, response.data),\n    );\n\nconst configInterceptors = (axios: AxiosInstance) => {\n  \n  axios.interceptors.request.use(async config => {\n    const tokenStr = await AsyncStorage.getItem(TOKEN_KEY);\n\n    if (!tokenStr) {\n      return setHeaders(config);\n    }\n    const token = JSON.parse(tokenStr);\n    if (isTokenExpired(token)) {\n      return refreshToken(config);\n    }\n    return setHeaders(config, token);\n  });\n\n  axios.interceptors.response.use(\n    response =>\n      // Do something with response data\n      response,\n    error =>\n      // Do something with response error\n      Promise.reject(error),\n  );\n};\n\nexport default configInterceptors;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,2CAA2C;AAEpE,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,OAAOC,mBAAmB,MAAM,gBAAgB;AAChD,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,UAAU,QAAQ,eAAe;AAE1C,MAAMC,iBAAiB,GAAGJ,mBAAmB,CAAC,CAAC;AAE/C,MAAMK,UAAU,GAAGA,CACjBC,MAA0B,EAC1BC,KAA8B,GAAGC,SAAS,KACnB;EACvB,MAAM;IAAEC;EAAQ,CAAC,GAAGH,MAAM;EAC1BG,OAAO,CAAC,eAAe,CAAC,GAAGN,UAAU,CAACO,OAAO,CAACC,kBAAkB;EAChEF,OAAO,CAAC,gBAAgB,CAAC,GAAGR,UAAU,CAAC,CAAC;EAExC,IAAIM,KAAK,EAAE;IACTE,OAAO,CAACG,aAAa,GAAG,GAAGL,KAAK,CAACM,UAAU,IAAIN,KAAK,CAACO,YAAY,EAAE;EACrE;EAEA,OAAOR,MAAM;AACf,CAAC;AAED,MAAMS,YAAY,GAAIT,MAA0B,IAC9CF,iBAAiB,CACdY,IAAI,CAAC,MAAM,CAAC,CACZC,IAAI,CAAEC,QAAoC,IACzCb,UAAU,CAACC,MAAM,EAAEY,QAAQ,CAACC,IAAI,CAClC,CAAC;AAEL,MAAMC,kBAAkB,GAAIC,KAAoB,IAAK;EAEnDA,KAAK,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAMlB,MAAM,IAAI;IAC7C,MAAMmB,QAAQ,GAAG,MAAM3B,YAAY,CAAC4B,OAAO,CAAC3B,SAAS,CAAC;IAEtD,IAAI,CAAC0B,QAAQ,EAAE;MACb,OAAOpB,UAAU,CAACC,MAAM,CAAC;IAC3B;IACA,MAAMC,KAAK,GAAGoB,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC;IAClC,IAAIvB,cAAc,CAACK,KAAK,CAAC,EAAE;MACzB,OAAOQ,YAAY,CAACT,MAAM,CAAC;IAC7B;IACA,OAAOD,UAAU,CAACC,MAAM,EAAEC,KAAK,CAAC;EAClC,CAAC,CAAC;EAEFc,KAAK,CAACC,YAAY,CAACJ,QAAQ,CAACM,GAAG,CAC7BN,QAAQ;EACN;EACAA,QAAQ,EACVW,KAAK;EACH;EACAC,OAAO,CAACC,MAAM,CAACF,KAAK,CACxB,CAAC;AACH,CAAC;AAED,eAAeT,kBAAkB","ignoreList":[]}