{"version":3,"names":["AsyncStorage","Reactotron","applyMiddleware","createStore","composeWithDevTools","persistReducer","persistStore","createReduxPromiseListener","createSagaMiddleware","rootReducer","rootSaga","initialState","persistConfig","key","storage","whitelist","sagaMonitor","createSagaMonitor","sagaMiddleware","reduxPromiseListener","middlewares","enhancers","middleware","createEnhancer","persistedReducer","store","persistor","run","promiseListener"],"sources":["index.ts"],"sourcesContent":["/**\n *\n * Create the store with dynamic reducers\n *\n */\n\n import AsyncStorage from '@react-native-async-storage/async-storage';\nimport Reactotron from '../core/reactotron';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport createReduxPromiseListener from 'redux-promise-listener';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './reducers';\nimport { rootSaga } from './sagas';\n\n// Create redux store with history\nconst initialState = {};\n\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['app', 'languageProvider'],\n};\n\n// create our new saga monitor\nconst sagaMonitor = Reactotron.createSagaMonitor!();\n\nconst sagaMiddleware = createSagaMiddleware({ sagaMonitor });\nconst reduxPromiseListener: any = createReduxPromiseListener();\n\n// Create the store with two middlewares\n// 1. sagaMiddleware: Makes redux-sagas work\n// 2. routerMiddleware: Syncs the location/URL path to the state\nconst middlewares = [sagaMiddleware];\nconst enhancers = [\n  applyMiddleware(...middlewares, reduxPromiseListener.middleware),\n  Reactotron.createEnhancer!(),\n];\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(\n  persistedReducer, // root reducer with router state\n  initialState,\n  composeWithDevTools(...enhancers),\n);\n\nconst persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nexport { store, persistor, reduxPromiseListener as promiseListener };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEC,OAAOA,YAAY,MAAM,2CAA2C;AACrE,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,SAASC,eAAe,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,cAAc,EAAEC,YAAY,QAAQ,eAAe;AAC5D,OAAOC,0BAA0B,MAAM,wBAAwB;AAC/D,OAAOC,oBAAoB,MAAM,YAAY;AAE7C,OAAOC,WAAW,MAAM,YAAY;AACpC,SAASC,QAAQ,QAAQ,SAAS;;AAElC;AACA,MAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAEd,YAAY;EACrBe,SAAS,EAAE,CAAC,KAAK,EAAE,kBAAkB;AACvC,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGf,UAAU,CAACgB,iBAAiB,CAAE,CAAC;AAEnD,MAAMC,cAAc,GAAGV,oBAAoB,CAAC;EAAEQ;AAAY,CAAC,CAAC;AAC5D,MAAMG,oBAAyB,GAAGZ,0BAA0B,CAAC,CAAC;;AAE9D;AACA;AACA;AACA,MAAMa,WAAW,GAAG,CAACF,cAAc,CAAC;AACpC,MAAMG,SAAS,GAAG,CAChBnB,eAAe,CAAC,GAAGkB,WAAW,EAAED,oBAAoB,CAACG,UAAU,CAAC,EAChErB,UAAU,CAACsB,cAAc,CAAE,CAAC,CAC7B;AAED,MAAMC,gBAAgB,GAAGnB,cAAc,CAACO,aAAa,EAAEH,WAAW,CAAC;AAEnE,MAAMgB,KAAK,GAAGtB,WAAW,CACvBqB,gBAAgB;AAAE;AAClBb,YAAY,EACZP,mBAAmB,CAAC,GAAGiB,SAAS,CAClC,CAAC;AAED,MAAMK,SAAS,GAAGpB,YAAY,CAACmB,KAAK,CAAC;AAErCP,cAAc,CAACS,GAAG,CAACjB,QAAQ,CAAC;AAE5B,SAASe,KAAK,EAAEC,SAAS,EAAEP,oBAAoB,IAAIS,eAAe","ignoreList":[]}