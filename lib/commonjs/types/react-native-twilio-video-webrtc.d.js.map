{"version":3,"names":[],"sources":["react-native-twilio-video-webrtc.d.ts"],"sourcesContent":["/* eslint-disable import/prefer-default-export,react/prefer-stateless-function,max-classes-per-file */\ndeclare module 'react-native-twilio-video-webrtc' {\n  import { ViewProps } from 'react-native';\n\n  interface ParticipantTrack {\n    participant: string;\n    track: string;\n  }\n\n  interface TwilioVideoProps extends ViewProps {\n    /**\n     * Flag that enables screen sharing RCTRootView instead of camera capture\n     */\n    screenShare?: boolean;\n\n    /**\n     * Called when the room has connected\n     *\n     * @param {{roomName, participants}}\n     */\n    onRoomDidConnect?({\n      roomName,\n      participants,\n    }: {\n      roomName: string;\n      participants: Map;\n    }): void;\n\n    /**\n     * Called when the room has disconnected\n     *\n     * @param {{roomName, error}}\n     */\n    onRoomDidDisconnect?({\n      roomName,\n      error,\n    }: {\n      roomName: string;\n      error: Error;\n    });\n\n    /**\n     * Called when connection with room failed\n     *\n     * @param {{roomName, error}}\n     */\n    onRoomDidFailToConnect?({\n      roomName,\n      error,\n    }: {\n      roomName: string;\n      error: Error;\n    });\n\n    /**\n     * Called when a new participant has connected\n     *\n     * @param {{roomName, participant}}\n     */\n    onRoomParticipantDidConnect?({\n      roomName,\n      participant,\n    }: {\n      roomName: string;\n      participant: string;\n    });\n\n    /**\n     * Called when a participant has disconnected\n     *\n     * @param {{roomName, participant}}\n     */\n    onRoomParticipantDidDisconnect?({\n      roomName,\n      participant,\n    }: {\n      roomName: string;\n      participant: string;\n    });\n\n    /**\n     * Called when a new video track has been added\n     *\n     * @param {{participant, track, enabled}}\n     */\n    onParticipantAddedVideoTrack?({\n      participant,\n      track,\n      enabled,\n    }: {\n      participant: string;\n      track: string;\n      enabled: boolean;\n    });\n\n    /**\n     * Called when a video track has been removed\n     *\n     * @param {{participant, track}}\n     */\n    onParticipantRemovedVideoTrack?({ participant, track }: ParticipantTrack);\n\n    /**\n     * Called when a new audio track has been added\n     *\n     * @param {{participant, track}}\n     */\n    onParticipantAddedAudioTrack?({ participant, track }: ParticipantTrack);\n\n    /**\n     * Called when a audio track has been removed\n     *\n     * @param {{participant, track}}\n     */\n    onParticipantRemovedAudioTrack?({ participant, track }: ParticipantTrack);\n\n    /**\n     * Called when a video track has been enabled.\n     *\n     * @param {{participant, track}}\n     */\n    onParticipantEnabledVideoTrack?({ participant, track }: ParticipantTrack);\n\n    /**\n     * Called when a video track has been disabled.\n     *\n     * @param {{participant, track}}\n     */\n    onParticipantDisabledVideoTrack?({ participant, track }: ParticipantTrack);\n\n    /**\n     * Called when an audio track has been enabled.\n     *\n     * @param {{participant, track}}\n     */\n    onParticipantEnabledAudioTrack?({ participant, track }: ParticipantTrack);\n\n    /**\n     * Called when an audio track has been disabled.\n     *\n     * @param {{participant, track}}\n     */\n    onParticipantDisabledAudioTrack?({ participant, track }: ParticipantTrack);\n\n    /**\n     * Called when the camera has started\n     *\n     */\n    onCameraDidStart?(): void;\n\n    /**\n     * Called when the camera has been interrupted\n     *\n     */\n    onCameraWasInterrupted?(): void;\n\n    /**\n     * Called when the camera has stopped runing with an error\n     *\n     * @param {{error}} The error message description\n     */\n    onCameraDidStopRunning?({ error }: { error: Error }): void;\n\n    /**\n     * Called when stats are received (after calling getStats)\n     *\n     */\n    onStatsReceived?(): void;\n  }\n\n  interface TwilioVideoLocalProps extends ViewProps {\n    enabled: boolean;\n  }\n\n  export class TwilioVideo extends React.Component<TwilioVideoProps> {\n    setLocalAudioEnabled(enabled: boolean): Promise<boolean>;\n\n    setLocalVideoEnabled(enabled: boolean): Promise<boolean>;\n\n    connect({\n      roomName,\n      accessToken,\n      enableAudio,\n      enableVideo,\n      enableRemoteAudio,\n    }: {\n      roomName: string | undefined;\n      accessToken: string;\n      enableAudio?: boolean;\n      enableVideo?: boolean;\n      enableRemoteAudio?: boolean;\n    }): void;\n\n    disconnect(): void;\n\n    flipCamera(): void;\n  }\n\n  export class TwilioVideoLocalView extends React.Component<\n    TwilioVideoLocalProps\n  > {}\n}\n"],"mappings":"","ignoreList":[]}