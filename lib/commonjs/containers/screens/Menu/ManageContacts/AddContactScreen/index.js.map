{"version":3,"names":["_assets","require","_components","_debounce","_interopRequireDefault","_react","_interopRequireWildcard","_reactIntl","_reactNative","_reactNativePermissions","_hooks","_navigation","_messages","_actions","_ContactItem","_selectors","_styles","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","AddContactScreen","formatMessage","useIntl","getContactsRequestAction","useAction","getContactsRequest","filterContactsAction","filterContacts","addContactRequestAction","addContactRequest","filteredContacts","useSelector","makeSelectFilteredContacts","permissionStatus","makeSelectPermissionStatus","useEffect","onSelectContact","useCallback","contact","RESULTS","UNAVAILABLE","createElement","LoadingIndicator","GRANTED","Fragment","StatusBar","barStyle","backgroundColor","SafeAreaContainer","ErrorContainer","ErrorHeader","ErrorText","messages","addContactTitle","ErrorView","errorMessage","contactPermissionError","debouncedFilterContacts","debounce","filterText","renderItem","itemInfo","person","item","renderEmpty","NoMatchesContainer","NoMatchesText","noMatches","Container","Header","title","InputRow","TextInput","keyboardAppearance","placeholder","searchPlaceholder","onChangeText","List","data","keyboardShouldPersistTaps","keyExtractor","id","ListEmptyComponent","BackButtonRow","ScreenActionButton","onCancel","NavigatorService","back","tintColor","colors","white","_default","exports"],"sources":["index.tsx"],"sourcesContent":["import { colors } from '../../../../../assets';\nimport {\n  ErrorView,\n  Header,\n  LoadingIndicator,\n  SafeAreaContainer,\n  ScreenActionButton,\n} from '../../../../../components';\nimport { AppUserContact } from 'incident-code-core';\nimport debounce from 'lodash/debounce';\nimport React, { FC, useCallback, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { ListRenderItemInfo, StatusBar } from 'react-native';\nimport { RESULTS } from 'react-native-permissions';\nimport { useAction, useSelector } from '../../../../../utils/hooks';\nimport NavigatorService from '../../../../../utils/navigation';\n\nimport messages from '../ContactScreen/messages';\nimport {\n  addContactRequest,\n  filterContacts,\n  getContactsRequest,\n} from './actions';\nimport ContactItem from './ContactItem';\nimport {\n  makeSelectFilteredContacts,\n  makeSelectPermissionStatus,\n} from './selectors';\nimport {\n  BackButtonRow,\n  Container,\n  ErrorContainer,\n  ErrorHeader,\n  ErrorText,\n  InputRow,\n  List,\n  NoMatchesContainer,\n  NoMatchesText,\n  TextInput,\n} from './styles';\n\nconst AddContactScreen: FC = () => {\n  const { formatMessage } = useIntl();\n\n  const getContactsRequestAction = useAction(getContactsRequest);\n  const filterContactsAction = useAction(filterContacts);\n  const addContactRequestAction = useAction(addContactRequest);\n\n  const filteredContacts = useSelector(makeSelectFilteredContacts());\n  const permissionStatus = useSelector(makeSelectPermissionStatus());\n\n  useEffect(() => {\n    getContactsRequestAction();\n  }, []);\n\n  const onSelectContact = useCallback((contact: AppUserContact) => {\n    addContactRequestAction(contact);\n  }, []);\n\n  if (permissionStatus === RESULTS.UNAVAILABLE) return <LoadingIndicator />;\n  if (permissionStatus !== RESULTS.GRANTED)\n    return (\n      <>\n        <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n        <SafeAreaContainer>\n          <ErrorContainer>\n            <ErrorHeader>\n              <ErrorText>{formatMessage(messages.addContactTitle)}</ErrorText>\n              <ErrorView\n                errorMessage={formatMessage(messages.contactPermissionError)}\n              />\n            </ErrorHeader>\n          </ErrorContainer>\n        </SafeAreaContainer>\n      </>\n    );\n\n  const debouncedFilterContacts = debounce((filterText: string) => {\n    filterContactsAction(filterText);\n  }, 100);\n\n  const renderItem = (itemInfo: ListRenderItemInfo<AppUserContact>) => (\n    <ContactItem person={itemInfo.item} onSelectContact={onSelectContact} />\n  );\n\n  const renderEmpty = () => (\n    <NoMatchesContainer>\n      <NoMatchesText>{formatMessage(messages.noMatches)}</NoMatchesText>\n    </NoMatchesContainer>\n  );\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <Container>\n          <Header title={formatMessage(messages.addContactTitle)} />\n          <InputRow>\n            <TextInput\n              keyboardAppearance=\"light\"\n              placeholder={formatMessage(messages.searchPlaceholder)}\n              onChangeText={debouncedFilterContacts}\n            />\n          </InputRow>\n          <List\n            data={filteredContacts}\n            keyboardShouldPersistTaps=\"always\"\n            keyExtractor={(item: any) => item?.id || ''}\n            ListEmptyComponent={renderEmpty()}\n            renderItem={renderItem}\n          />\n        </Container>\n        <BackButtonRow>\n          <ScreenActionButton\n            onCancel={NavigatorService.back}\n            tintColor={colors.white}\n          />\n        </BackButtonRow>\n      </SafeAreaContainer>\n    </>\n  );\n};\n\nexport default AddContactScreen;\n"],"mappings":"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","ignoreList":[]}