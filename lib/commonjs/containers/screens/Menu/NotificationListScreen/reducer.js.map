{"version":3,"names":["_immer","_interopRequireDefault","require","_constants","e","__esModule","default","initialState","exports","isLoading","listData","unreadCount","notiReadData","notificationListReducer","produce","draft","action","type","NOTIFICATION_LIST_REQUEST","NOTIFICATION_LIST_SUCCESS","payload","totalUnreadNotificationCount","NOTIFICATION_LIST_FAILURE","NOTIFICATION_LIST_RESET","NOTIFICATION_UNREAD_COUNT","count","UPDATE_READUNREAD_STATUS_REQUEST","updatedListData","records","map","item","id","notiId","isRead","UPDATE_READUNREAD_STATUS_SUCCESS","currentStatus","pnMessage","data","isReadFrom","RESET_UPDATE_READUNREAD_STATUS","UPDATE_READUNREAD_STATUS_FAILURE","READ_ALL_NOTIFICATION_REQUEST","READ_ALL_NOTIFICATION_SUCCESS","_default"],"sources":["reducer.ts"],"sourcesContent":["/**\n *\n * AddContactScreen reducer\n *\n */\n\nimport produce, { Draft } from 'immer';\n\nimport {\n  NOTIFICATION_LIST_REQUEST,\n  NOTIFICATION_LIST_SUCCESS,\n  NOTIFICATION_LIST_FAILURE,\n  NOTIFICATION_LIST_RESET,\n  UPDATE_READUNREAD_STATUS_FAILURE,\n  UPDATE_READUNREAD_STATUS_REQUEST,\n  UPDATE_READUNREAD_STATUS_SUCCESS,\n  NOTIFICATION_UNREAD_COUNT,\n  RESET_UPDATE_READUNREAD_STATUS,\n  READ_ALL_NOTIFICATION_REQUEST,\n  READ_ALL_NOTIFICATION_SUCCESS\n} from './constants';\nimport { NotificationListState, NotificationListActionTypes } from './types';\n\nexport const initialState: NotificationListState = {\n  isLoading: true,\n  listData: null,\n  unreadCount: 0,\n  notiReadData: null\n};\n\nconst notificationListReducer = produce(\n  (draft: Draft<NotificationListState>, action: NotificationListActionTypes) => {\n    switch (action.type) {\n      case NOTIFICATION_LIST_REQUEST:\n        draft.isLoading = true;\n        break;\n      case NOTIFICATION_LIST_SUCCESS:\n        draft.isLoading = false;\n        draft.listData = action.payload;\n        draft.unreadCount = action.payload.totalUnreadNotificationCount;\n        break;\n      case NOTIFICATION_LIST_FAILURE:\n        draft.isLoading = false;\n        draft.listData = null;\n        break;\n      case NOTIFICATION_LIST_RESET:\n        draft.isLoading = false;\n        draft.listData = null;\n        break;\n      case NOTIFICATION_UNREAD_COUNT:\n        draft.unreadCount = action.count;\n        break;\n      case UPDATE_READUNREAD_STATUS_REQUEST:\n        if (draft.listData) {\n          const updatedListData = draft.listData.records.map((item: any) => {\n            if (item.id === action.payload.notiId) {\n              item.isRead = true\n            }\n            return item;\n          });\n          draft.listData.records = updatedListData;\n        }\n        draft.isLoading = false;\n        break;\n      case UPDATE_READUNREAD_STATUS_SUCCESS:\n        draft.unreadCount = action.payload.totalUnreadNotificationCount\n        if (action.payload.currentStatus.pnMessage.data.type == \"Location\" && action.payload.isReadFrom == \"app\") {\n          draft.notiReadData = action.payload\n        }\n        break;\n      case RESET_UPDATE_READUNREAD_STATUS:\n        draft.notiReadData = null\n        break;\n      case UPDATE_READUNREAD_STATUS_FAILURE:\n        draft.isLoading = false;\n        draft.listData = null;\n        break;\n      case UPDATE_READUNREAD_STATUS_FAILURE:\n        draft.isLoading = false;\n        draft.listData = null;\n        break;\n      case READ_ALL_NOTIFICATION_REQUEST:\n        draft.unreadCount = 0;\n        break;\n      case READ_ALL_NOTIFICATION_SUCCESS:\n        if (draft.listData) {\n          const updatedListData = draft.listData.records.map((item: any) => {\n            item.isRead = true\n            return item;\n          });\n          draft.listData.records = updatedListData;\n        }\n        draft.isLoading = false;\n        draft.unreadCount = 0;\n        break;\n      default:\n    }\n  },\n  initialState,\n);\n\nexport default notificationListReducer;\n"],"mappings":"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","ignoreList":[]}