{"version":3,"names":["_assets","require","_api","_components","_react","_interopRequireWildcard","_hooks","_reactIntl","_reactNative","_navigation","_interopRequireDefault","_screens","_selectors","_messages","_PanicActionModal","_actions","_lodash","_common","_backgroundGeolocation","_styles","_actions2","_incidentCodeCore","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","restrictTime","minuts","NotificationListScreen","userData","useSelector","makeSelectUser","notificationList","setNotificationList","useState","records","getNotificationAction","useAction","notificationListRequest","resetNotificationAction","resetNotificationList","updateReadUnreadStatus","notificationReadUnreadStatusRequest","markReadAllNotification","readAllNotificationRequest","isLoading","state","notificationListState","result","listData","unreadNotyCounts","unreadCount","formatMessage","useIntl","refreshing","setRefreshing","isNofityDetailModelShow","setNotifyDetailModelShow","notify_title","setNotifyTitle","notify_msg","setNotifyMsg","showPanicActionPopup","setPanicActionPopup","geoCredPNObject","setGeoCredPNObject","geoCredStatusUpdate","geoCredStatusRequest","useEffect","console","log","id","refreshList","event","on","AppEvent","OnRefreshNotificationList","off","onRefresh","handleNotificationTap","item","data","pnMessage","undefined","android","title","body","type","IncidentType","Normal","NavigatorService","navigate","Screens","Menu","Tips","TipDetail","incident","showChat","tipId","Escort","PassiveEscort","back","emit","OnSiteKeyNotificataionReceived","gmtDateStr","getLocalTime","sentAt","getTimeAgo","isRead","setTimeout","payload","userID","notiId","readFrom","onYesTap","location","fetchLocation","JSON","stringify","locationId","userId","incidentId","response","lat","coords","latitude","toString","lng","longitude","updateUserLoctionData","onNoTap","NotificationItem","formattedDate","daysAgo","formatUTCtoLocalDate","createElement","NotificationItemContainer","onPress","NotificationItemTitle","NotificationItemBody","numberOfLines","NotificationItemTimeStamp","toLowerCase","itemData","parse","message","View","renderNotificationItem","index","onMarkReadAllTap","Alert","alert","messages","markReadAll","msgMarkReadAll","text","no","style","yes","makeAPIForMarkAllReadAction","Fragment","StatusBar","barStyle","backgroundColor","SafeAreaContainer","HeaderWithButton","onButtonClick","uneadNotification","Container","LoadingIndicator","length","NoRecordsFound","noRecords","ListContainer","FlatList","slice","reverse","renderItem","keyExtractor","refreshControl","RefreshControl","ScreenActionModal","isVisible","actionText","onAction","onHide","showActionIcon","showSuccessIcon","isEmpty","actionPositiveText","actionNagetiveText","showIcon","BackButtonRow","ScreenActionButton","onCancel","tintColor","colors","white","_default","exports"],"sources":["index.tsx"],"sourcesContent":["// import NavigatorService from 'utils/navigation';\nimport { colors } from '../../../../assets';\nimport { AppEvent, event } from '../../../../api';\nimport { HeaderWithButton, SafeAreaContainer, ScreenActionButton } from '../../../../components';\nimport React, { useEffect, useState, } from 'react';\nimport { useAction, useSelector } from '../../../../utils/hooks';\nimport { useIntl } from 'react-intl';\nimport { StatusBar, View, FlatList, RefreshControl, Alert } from 'react-native';\nimport { LoadingIndicator, ScreenActionModal } from '../../../../components';\nimport NavigatorService from '../../../../utils/navigation';\nimport Screens from '../../../../containers/providers/RoutesProvider/screens';\nimport { makeSelectUser } from '../../../../containers/app/selectors';\nimport messages from './messages';\nimport PanicActionModal from '../../../../components/PanicActionModal';\nimport { geoCredStatusRequest } from '../../../../utils/location/actions';\nimport { isEmpty } from 'lodash';\nimport { getTimeAgo, getLocalTime, formatUTCtoLocalDate } from '../../../../utils/common'\nimport { makeSelectIsLoading, makeSelectNotificatioons } from './selectors';\nimport { updateUserLoctionData, fetchLocation } from '../../../../utils/location/backgroundGeolocation';\n\nimport {\n  BackButtonRow,\n  Container,\n  NoRecordsFound,\n  NotificationItemContainer,\n  NotificationItemBody,\n  NotificationItemTitle,\n  NotificationItemTimeStamp,\n  ListContainer\n} from './styles';\nimport {\n  notificationListRequest,\n  resetNotificationList,\n  notificationReadUnreadStatusRequest,\n  readAllNotificationRequest\n} from './actions';\n\nimport {  IncidentType } from 'incident-code-core';\n// import { getTimeZone } from 'react-native-localize';\n\ntype NotificationRecord = {\n  pnMessage: any;\n  isRead: boolean;\n  userID: string;\n  id: string;\n  // add other properties as needed\n};\n\ntype NotificationList = {\n  records: NotificationRecord[];\n};\n\nconst restrictTime = {\n  minuts: 30,\n};\n\nconst NotificationListScreen = () => {\n\n  const userData = useSelector(makeSelectUser());\n  const [notificationList, setNotificationList] = useState<NotificationList>({ records: [] });\n  const getNotificationAction = useAction(notificationListRequest);\n  const resetNotificationAction = useAction(resetNotificationList);\n  const updateReadUnreadStatus = useAction(notificationReadUnreadStatusRequest);\n  const markReadAllNotification = useAction(readAllNotificationRequest);\n  const isLoading = useSelector((state) => { return state.notificationListState.isLoading });\n  const result = useSelector((state) => { return state.notificationListState.listData });\n  const unreadNotyCounts = useSelector((state) => { return state.notificationListState.unreadCount });\n  const { formatMessage } = useIntl();\n  const [refreshing, setRefreshing] = useState(false);\n  const [isNofityDetailModelShow, setNotifyDetailModelShow] = useState(false);\n  const [notify_title, setNotifyTitle] = useState(\"\");\n  const [notify_msg, setNotifyMsg] = useState(\"\");\n  const [showPanicActionPopup, setPanicActionPopup] = useState(false)\n  const [geoCredPNObject, setGeoCredPNObject] = useState({});\n  const geoCredStatusUpdate = useAction(geoCredStatusRequest)\n\n  useEffect(() => {\n    console.log(\"unreadNotyCounts===>\", unreadNotyCounts)\n    getNotificationAction(userData.id);\n  }, []);\n\n\n\n  useEffect(() => {\n    if (result != null) {\n      // console.log(\"setNotificationList result=>\",JSON.stringify(result.records.slice().reverse()))\n      setNotificationList(result);\n      // unreadCount(result.totalUnreadNotificationCount)\n      setRefreshing(false);\n    }\n  }, [result]);\n\n  const refreshList = () => {\n    resetNotificationAction(null)\n    getNotificationAction(userData.id);\n  }\n\n  useEffect(() => {\n    event.on(AppEvent.OnRefreshNotificationList, refreshList);\n    return () => {\n      event.off(AppEvent.OnRefreshNotificationList, refreshList); // sync\n    };\n  });\n\n  const onRefresh = () => {\n    setRefreshing(true);\n    resetNotificationAction(null)\n    getNotificationAction(userData.id);\n  };\n\n  const handleNotificationTap = (item: any) => {\n    const data = item.pnMessage.data\n    if (data == undefined) {\n      setNotifyTitle(item.pnMessage.android.data.title)\n      setNotifyMsg(item.pnMessage.android.data.body)\n      setNotifyDetailModelShow(true)\n    } else {\n      if (data.type === IncidentType.Normal && data.event === 'resolved') {\n        NavigatorService.navigate(Screens.Menu.Tips.TipDetail, {\n          incident: undefined,\n          showChat: false,\n          tipId: data?.tipId\n        });\n      } else if (data.type === IncidentType.Escort && data.event === 'resolved') {\n        // incident closed\n      } else if (data.type === IncidentType.PassiveEscort && data.event === 'resolved') {\n        // incident closed\n      } else if (data.type === IncidentType.Escort && data.event === 'PanicCreated' || data.event === 'PanicAccepted') {\n        // incident created and accepted\n        0\n      } else if (data.type === 'group' && data.event === 'groupChanged' || data.event === 'groupUpdated') {\n        // group updated\n        NavigatorService.back()\n      }\n      else if (data.type === 'SiteKey' && data.event === 'SiteKey') {\n        // group updated\n        event.emit(AppEvent.OnSiteKeyNotificataionReceived, data);\n      }\n      else if (data.type === 'Location' && data.event === 'LocationQuestion') {\n        const gmtDateStr = getLocalTime(data.sentAt);\n        if (getTimeAgo(gmtDateStr) <= restrictTime.minuts) {\n          if (!item.isRead) {\n            setTimeout(() => {\n              setGeoCredPNObject(data)\n              setPanicActionPopup(true)\n            }, 100);\n          } else {\n            console.log(\"no action\")\n          }\n        } else {\n\n        }\n      }\n    }\n    if (!item.isRead) {\n      setTimeout(() => {\n        let payload = {\n          isRead: true,\n          userID: userData.id,\n          notiId: item.id,\n          readFrom: \"Notification\"\n        }\n        updateReadUnreadStatus(payload)\n      }, 400);\n    }\n\n  }\n\n  // geocred feature ::: call on Click YES Button \n  const onYesTap = async () => {\n\n    setPanicActionPopup(false)\n    const location = await fetchLocation();\n    console.log(\"location--==>\", JSON.stringify(location))\n    if (location) {\n      const locationId = geoCredPNObject != null ? +geoCredPNObject.locationId : 0;\n      let payload = {\n        userId: userData.id,\n        locationId: locationId,\n        incidentId: geoCredPNObject != null ? geoCredPNObject?.incidentId : \"\",\n        response: \"yes\",\n        lat: location.coords.latitude.toString(),\n        lng: location.coords.longitude.toString()\n      }\n      geoCredStatusUpdate(payload)\n      updateUserLoctionData(location)\n    }\n\n  }\n\n  // geocred feature ::: call on Click NO Button \n  const onNoTap = async () => {\n\n    setPanicActionPopup(false)\n    const location = await fetchLocation();\n    console.log(\"location--==>\", JSON.stringify(location))\n    if (location) {\n      const locationId = geoCredPNObject != null ? +geoCredPNObject.locationId : 0;\n      let payload = {\n        userId: userData.id,\n        locationId: locationId,\n        incidentId: geoCredPNObject != null ? geoCredPNObject?.incidentId : \"\",\n        response: \"no\",\n        lat: location.coords.latitude.toString(),\n        lng: location.coords.longitude.toString()\n      }\n      geoCredStatusUpdate(payload)\n      updateUserLoctionData(location)\n    }\n  }\n\n  const NotificationItem = ({ item }) => {\n\n    const data = item.pnMessage.data\n\n    if (data == undefined) {\n      const { formattedDate, daysAgo } = formatUTCtoLocalDate(item.pnMessage.android.data.sentAt);\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{item.pnMessage.android.data.title}</NotificationItemTitle>\n          <NotificationItemBody numberOfLines={3}>{item.pnMessage.android.data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    }\n    const type = data.type.toLowerCase()\n    const { formattedDate, daysAgo } = formatUTCtoLocalDate(data.sentAt);\n    // console.log(\"type===>\",type)\n    if (type === IncidentType.Normal && data.event === 'resolved') {\n\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{data.title}</NotificationItemTitle>\n          <NotificationItemBody>{data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === IncidentType.Escort && data.event === 'resolved') {\n      // incident closed\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{data.title}</NotificationItemTitle>\n          <NotificationItemBody>{data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === IncidentType.PassiveEscort && data.event === 'resolved') {\n      // incident closed\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{data.title}</NotificationItemTitle>\n          <NotificationItemBody>{data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === IncidentType.Escort && data.event === 'PanicCreated') {\n      // incident created\n      const itemData = JSON.parse(data.data)\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{itemData.title}</NotificationItemTitle>\n          <NotificationItemBody>{itemData.message}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === IncidentType.Escort && data.event === 'PanicAccepted') {\n      // incident accepted\n      const itemData = JSON.parse(data.data)\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{itemData.title}</NotificationItemTitle>\n          <NotificationItemBody>{itemData.message}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === 'group' && data.event === 'groupChanged' || data.event === 'groupUpdated') {\n      // group updated \n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{data.title}</NotificationItemTitle>\n          <NotificationItemBody>{data.body}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else if (type === 'location' && data.event === 'LocationQuestion') {\n      const itemData = JSON.parse(data.data)\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{itemData.title}</NotificationItemTitle>\n          <NotificationItemBody>{itemData.message}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    }\n    else if (type === 'sitekey' && data.event === 'SiteKey') {\n      const itemData = JSON.parse(data.data)\n      return (\n        <NotificationItemContainer isRead={item.isRead} onPress={() => handleNotificationTap(item)}>\n          <NotificationItemTitle>{itemData.title}</NotificationItemTitle>\n          <NotificationItemBody>{itemData.message}</NotificationItemBody>\n          <NotificationItemTimeStamp>{formattedDate + \", \" + daysAgo}</NotificationItemTimeStamp>\n        </NotificationItemContainer>\n      );\n    } else {\n      return <View></View>\n    }\n  };\n\n  // render notification item\n  const renderNotificationItem = (item: any, index: number) => {\n    return <NotificationItem item={item} />;\n  }\n\n  const onMarkReadAllTap = () => {\n    console.log(\"read all\")\n    Alert.alert(\n      formatMessage(messages.markReadAll),\n      formatMessage(messages.msgMarkReadAll),\n      [{\n        text: formatMessage(messages.no),\n        onPress: () => console.log(\"Cancel Pressed\"),\n        style: \"cancel\"\n      },\n      {\n        text: formatMessage(messages.yes),\n        onPress: () => makeAPIForMarkAllReadAction()\n      }]\n    );\n  }\n\n  const makeAPIForMarkAllReadAction = () => {\n    markReadAllNotification(userData.id)\n  }\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <HeaderWithButton\n          title={formatMessage(messages.title)}\n          onButtonClick={() => onMarkReadAllTap()}\n          uneadNotification={unreadNotyCounts}\n        />\n        <Container>\n\n          {isLoading ?\n            <LoadingIndicator></LoadingIndicator> :\n            notificationList.records.length === 0 && (\n              <NoRecordsFound>{formatMessage(messages.noRecords)}</NoRecordsFound>\n            )\n          }\n\n          {!isLoading && (<ListContainer>\n            <FlatList\n              data={notificationList.records.length !== 0 ? notificationList.records.slice().reverse() : []}\n              renderItem={({ item, index }) => renderNotificationItem(item, index)}\n              keyExtractor={item => item?.id}\n              refreshControl={\n                <RefreshControl\n                  refreshing={refreshing}\n                  onRefresh={onRefresh}\n                />\n              }\n            />\n          </ListContainer>)}\n          <ScreenActionModal\n            isVisible={isNofityDetailModelShow}\n            title={notify_title}\n            message={notify_msg}\n            actionText='Ignore'\n            onAction={() => setNotifyDetailModelShow(false)}\n            onHide={() => setNotifyDetailModelShow(false)}\n            showActionIcon={false}\n            showSuccessIcon={false}\n          />\n          <PanicActionModal\n            isVisible={showPanicActionPopup}\n            title={!isEmpty(geoCredPNObject) ? JSON.parse(geoCredPNObject.data).title : \"\"}\n            message={!isEmpty(geoCredPNObject) ? JSON.parse(geoCredPNObject.data).message : \"\"}\n            actionPositiveText={\"Yes\"}\n            actionNagetiveText={\"No\"}\n            onAction={() => onYesTap()}\n            onHide={() => onNoTap()}\n            showIcon={true}\n            showActionIcon={true}\n          />\n        </Container>\n        <BackButtonRow>\n          <ScreenActionButton\n            onCancel={NavigatorService.back}\n            tintColor={colors.white}\n          />\n        </BackButtonRow>\n      </SafeAreaContainer>\n    </>\n  );\n};\n\nexport default NotificationListScreen;\n"],"mappings":"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","ignoreList":[]}