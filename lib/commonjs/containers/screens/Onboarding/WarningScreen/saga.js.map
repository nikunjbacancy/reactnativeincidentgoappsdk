{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","api","_interopRequireWildcard","_saga","_screens","_constants","_types","_actions","_actions2","_effects","_location","_navigation","_actions3","_constants2","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","delayHidePanicInfo","delay","put","hidePanicInfo","startDuressRequest","payload","location","getCachedFineGeoPoint","response","organizations","findIntersectOrganizations","data","getIntersectOrganizationsSuccess","length","triggerOnboardForInactiveUser","_organizations$","toggleSelectOrganization","id","AsyncStorage","setItem","PANIC_MODE_KEY","PanicMode","Active","startEscortRequest","onLocation","NavigatorService","navigate","Screens","Home","Escort","EscortRequest","isPanic","error","duressRequestError","message","warningScreenSaga","takeLatest","SHOW_PANIC_INFO","TRIGGER_DURESS_REQUEST"],"sources":["saga.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as api from '../../../../api';\nimport { triggerOnboardForInactiveUser } from '../../../../containers/app/saga';\nimport Screens from '../../../../containers/providers/RoutesProvider/screens';\nimport { PANIC_MODE_KEY } from '../../../../containers/screens/Home/Escort/RecordScreen/constants';\nimport { PanicMode } from '../../../../containers/screens/Home/Escort/RecordScreen/types';\nimport { startEscortRequest } from '../../../../containers/screens/Home/Escort/RequestScreen/actions';\nimport {\n  getIntersectOrganizationsSuccess,\n  toggleSelectOrganization,\n} from '../../../../containers/screens/Home/Escort/SelectOrganizationScreen/actions';\nimport { GeoPoint, Id } from 'incident-code-core';\nimport { call, delay, put, takeLatest } from 'redux-saga/effects';\nimport { getCachedFineGeoPoint } from '../../../../utils/location';\nimport NavigatorService from '../../../../utils/navigation';\n\nimport { duressRequestError, hidePanicInfo } from './actions';\nimport { SHOW_PANIC_INFO, TRIGGER_DURESS_REQUEST } from './constants';\nimport { TriggerDuressRequestAction } from './types';\n\nfunction* delayHidePanicInfo() {\n  yield delay(3000);\n  yield put(hidePanicInfo());\n}\n\nfunction* startDuressRequest({ payload }: TriggerDuressRequestAction):any {\n  try {\n    const location: GeoPoint = yield call(getCachedFineGeoPoint);\n    const response = yield call(api.organizations.findIntersectOrganizations,location);\n    const { organizations } = response.data;\n\n    yield put(getIntersectOrganizationsSuccess(organizations));\n    if (organizations.length === 0) {\n      yield* triggerOnboardForInactiveUser();\n    } else {\n      yield put(toggleSelectOrganization(organizations[0]?.id as Id));\n    }\n    yield call(AsyncStorage.setItem, PANIC_MODE_KEY, PanicMode.Active);\n    yield put(startEscortRequest(payload.onLocation, 'Duress triggered', true));\n    yield call(NavigatorService.navigate, Screens.Home.Escort.EscortRequest, {\n      isPanic: true,\n    });\n  } catch (error: any) {\n    yield call(duressRequestError, error.message);\n  }\n}\n\nexport default function* warningScreenSaga() {\n  yield takeLatest(SHOW_PANIC_INFO, delayHidePanicInfo);\n  yield takeLatest(TRIGGER_DURESS_REQUEST, startDuressRequest);\n}\n"],"mappings":"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","ignoreList":[]}