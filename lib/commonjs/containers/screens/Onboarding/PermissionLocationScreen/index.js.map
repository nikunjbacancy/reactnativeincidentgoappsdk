{"version":3,"names":["_assets","require","_react","_interopRequireDefault","_reactNative","_components","_reactIntl","_screens","_actions","_selectors","_requestLocationPermission","_styles","_messages","_reactNativePermissions","_action","_hooks","_navigation","e","__esModule","default","PermissionLocationScreen","formatMessage","useIntl","userData","useSelector","makeSelectUser","locationAlwaysPermissionsAction","useAction","locationAlwaysPermissionsRequest","getAllGeofenceRequestAction","getAllGeofenceRequest","handleAlreadyEnabled","console","log","Platform","OS","NativeModules","Location","checkLocationAlwaysPermission","response","messages","enabled","openSettings","NavigatorService","navigate","Screens","Home","Index","getAllGeofences","handleAllow","requestLocationPermissions","then","catch","error","id","createElement","Fragment","StatusBar","barStyle","backgroundColor","Background","SafeAreaContainer","ScrollView","LogoRow","Image","source","images","logoWithText","TitleRow","TitleText","title","ItemRow","ItemIcon","icLocation","ItemText","location","replace","allowAllTime","PaddingView","size","ButtonRow","AllowButton","onPress","text","allow","AlreadyAllowed","SettingButton","settings","_default","exports"],"sources":["index.tsx"],"sourcesContent":["import { images } from '../../../../assets';\nimport React from 'react';\nimport { StatusBar, ScrollView, Image, NativeModules, Platform } from 'react-native';\nimport { GradientButton, SafeAreaContainer, PaddingView } from '../../../../components';\nimport { useIntl } from 'react-intl';\nimport Screens from '../../../../containers/providers/RoutesProvider/screens';\nimport { getAllGeofenceRequest } from '../../../../utils/location/actions';\nimport { makeSelectUser } from '../../../../containers/app/selectors';\nimport requestLocationPermissions from '../../../../utils/permission/requestLocationPermission';\n\nimport {\n    Background,\n    LogoRow,\n    TitleRow,\n    TitleText,\n    ItemIcon,\n    ItemRow,\n    ItemText,\n    ButtonRow,\n    SettingButton,\n    AlreadyAllowed,\n    AllowButton\n} from './styles';\nimport messages from './messages';\nimport { openSettings } from 'react-native-permissions';\nimport { locationAlwaysPermissionsRequest } from './action';\nimport { useAction, useSelector } from '../../../../utils/hooks';\nimport NavigatorService from '../../../../utils/navigation';\n\nconst PermissionLocationScreen = () => {\n    const { formatMessage } = useIntl();\n    const userData = useSelector(makeSelectUser());\n    const locationAlwaysPermissionsAction = useAction(locationAlwaysPermissionsRequest);\n    const getAllGeofenceRequestAction = useAction(getAllGeofenceRequest);\n\n    const handleAlreadyEnabled = () => {\n\n        console.log(\"handleAlreadyEnabled\")\n        if (Platform.OS === \"ios\") {\n            NativeModules.Location.checkLocationAlwaysPermission(\"Test\", \"Location\", (response: String) => {\n                console.log(\"response:\" + response);\n                if (response === 'RNPermissionStatusAuthorized') {\n                    locationAlwaysPermissionsAction(formatMessage(messages.enabled));\n                    // NavigatorService.navigate(Screens.Home.Index);\n                }\n                else {\n                    openSettings();\n                }\n            });\n        } else {\n            NavigatorService.navigate(Screens.Home.Index);\n            getAllGeofences()\n        }\n    }\n\n    // handle allow\n    const handleAllow = () => {\n        requestLocationPermissions().then(() => {\n            NavigatorService.navigate(Screens.Home.Index);\n            locationAlwaysPermissionsAction(formatMessage(messages.enabled));\n            getAllGeofences()\n        }).catch((error) => {\n            console.log(\"request error==>\", error)\n        })\n    }\n\n    const getAllGeofences = () => {\n        //getAllGeofenceRequest\n        if (userData.id) {\n            getAllGeofenceRequestAction(userData.id);\n        } else {\n            // Handle the case when userData.id is not available\n        }\n    }\n\n    return (\n        <>\n            <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n            <Background />\n            <SafeAreaContainer>\n                <ScrollView>\n                    <LogoRow>\n                        <Image source={images.logoWithText()} />\n                    </LogoRow>\n                    <TitleRow>\n                        <TitleText>{formatMessage(messages.title)}</TitleText>\n                    </TitleRow>\n                    <>\n                        <ItemRow>\n                            <ItemIcon source={images.icLocation()} />\n                            <ItemText>{Platform.OS == 'android' ? formatMessage(messages.location).replace(\"ALWAYS\", formatMessage(messages.allowAllTime))\n                                : formatMessage(messages.location)}</ItemText>\n                        </ItemRow>\n                        <PaddingView size={1} />\n                    </>\n\n                    {Platform.OS == 'android' ?\n                        <ButtonRow>\n                            <AllowButton\n                                onPress={handleAllow}\n                                text={formatMessage(messages.allow)}\n                            />\n                            <AlreadyAllowed\n                                onPress={handleAlreadyEnabled}\n                                text={formatMessage(messages.enabled)}\n                            />\n                        </ButtonRow> :\n                        <ButtonRow>\n                            <AlreadyAllowed\n                                onPress={handleAlreadyEnabled}\n                                text={formatMessage(messages.enabled)}\n                            />\n                            <SettingButton\n                                onPress={openSettings}\n                                text={formatMessage(messages.settings)}\n                            />\n                        </ButtonRow>\n                    }\n                </ScrollView>\n            </SafeAreaContainer>\n        </>\n    );\n}\n\nexport default PermissionLocationScreen;"],"mappings":"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","ignoreList":[]}