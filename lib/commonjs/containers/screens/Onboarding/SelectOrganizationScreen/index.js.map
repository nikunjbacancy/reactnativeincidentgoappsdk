{"version":3,"names":["_assets","require","_components","_incidentCodeCore","_react","_interopRequireWildcard","_reactIntl","_reactNative","_hooks","_navigation","_interopRequireDefault","_actions","_messages","_selectors","_styles","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","SelectOrganizationScreen","navigation","getParam","fromMenu","formatMessage","useIntl","organizations","useSelector","makeSelectOrganizations","selectedOrganizations","makeSelectSelectedOrganizations","nextButtonEnabled","makeSelectEnableNextButton","error","makeSelectError","errorMessage","makeSelectErrorMessage","getOrganizationsAction","useAction","getOrganizationsRequest","updateOrganizationsAction","updateOrganizationsRequest","toggleSelectOrganizationAction","toggleSelectOrganization","useEffect","createElement","LoadingIndicator","onSearchChanged","debounce","keyword","handleNextButtonClicked","data","renderHeader","Fragment","HeaderRow","Logo","TitleRow","TitleText","messages","title","InfoRow","InfoText","info","required","RequiredText","key","LogoRow","Image","source","images","logoWithText","SearchRow","SearchInput","keyboardAppearance","placeholder","searchPlaceholder","onChangeText","ErrorRow","ErrorMessage","renderItem","itemInfo","organization","item","ItemRow","onPress","id","isSelected","ItemCheckImage","icCheck","ItemText","name","StatusBar","barStyle","backgroundColor","Background","SafeAreaContainer","List","keyExtractor","_organization$id","toString","ListHeaderComponent","extraData","ContinueButtonRow","SelectButton","disabled","onCancel","NavigatorService","back","text","select","tintColor","colors","white","GradientButton","next","_default","exports"],"sources":["index.tsx"],"sourcesContent":["import { colors, images } from '../../../../assets';\nimport {\n  GradientButton,\n  LoadingIndicator,\n  SafeAreaContainer,\n} from '../../../../components';\nimport { debounce } from 'incident-code-core';\nimport React, { FC, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Image, ListRenderItemInfo, StatusBar } from 'react-native';\nimport { ScreenProps } from 'react-native-screens';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport { OrganizationSelection } from 'types';\nimport { useAction, useSelector } from '../../../../utils/hooks';\nimport NavigatorService from '../../../../utils/navigation';\n\nimport {\n  getOrganizationsRequest,\n  toggleSelectOrganization,\n  updateOrganizationsRequest,\n} from './actions';\nimport messages from './messages';\nimport {\n  makeSelectEnableNextButton,\n  makeSelectError,\n  makeSelectErrorMessage,\n  makeSelectOrganizations,\n  makeSelectSelectedOrganizations,\n} from './selectors';\nimport {\n  Background,\n  ContinueButtonRow,\n  ErrorMessage,\n  ErrorRow,\n  HeaderRow,\n  InfoRow,\n  InfoText,\n  ItemCheckImage,\n  ItemRow,\n  ItemText,\n  List,\n  Logo,\n  LogoRow,\n  RequiredText,\n  SearchInput,\n  SearchRow,\n  SelectButton,\n  TitleRow,\n  TitleText,\n} from './styles';\n\ninterface Params {\n  fromMenu: boolean;\n}\ninterface Props extends NavigationStackScreenProps<Params, ScreenProps> {}\n\nconst SelectOrganizationScreen: FC<Props> = ({ navigation: { getParam } }) => {\n  const fromMenu = getParam('fromMenu');\n\n  const { formatMessage } = useIntl();\n\n  const organizations = useSelector(makeSelectOrganizations());\n  const selectedOrganizations = useSelector(makeSelectSelectedOrganizations());\n  const nextButtonEnabled = useSelector(makeSelectEnableNextButton());\n  const error = useSelector(makeSelectError());\n  const errorMessage = useSelector(makeSelectErrorMessage());\n\n  const getOrganizationsAction = useAction(getOrganizationsRequest);\n  const updateOrganizationsAction = useAction(updateOrganizationsRequest);\n  const toggleSelectOrganizationAction = useAction(toggleSelectOrganization);\n\n  useEffect(() => {\n    getOrganizationsAction();\n  }, []);\n\n  if (!organizations) return <LoadingIndicator />;\n\n  const onSearchChanged = debounce((keyword?: string) => {\n    getOrganizationsAction(keyword);\n  }, 300);\n\n  const handleNextButtonClicked = () => {\n    updateOrganizationsAction({ data: selectedOrganizations, fromMenu });\n  };\n\n  const renderHeader = () => (\n    <>\n      {fromMenu ? (\n        <HeaderRow>\n          <Logo />\n          <TitleRow>\n            <TitleText>{formatMessage(messages.title)}</TitleText>\n          </TitleRow>\n          <InfoRow>\n            <InfoText>\n              {formatMessage(messages.info, {\n                required: (\n                  <RequiredText key=\"1\">\n                    {formatMessage(messages.required)}\n                  </RequiredText>\n                ),\n              })}\n            </InfoText>\n          </InfoRow>\n        </HeaderRow>\n      ) : (\n        <>\n          <LogoRow>\n            <Image source={images.logoWithText()} />\n          </LogoRow>\n          <InfoRow>\n            <InfoText>\n              {formatMessage(messages.info, {\n                required: (\n                  <RequiredText key=\"1\">\n                    {formatMessage(messages.required)}\n                  </RequiredText>\n                ),\n              })}\n            </InfoText>\n          </InfoRow>\n        </>\n      )}\n      <SearchRow>\n        <SearchInput\n          keyboardAppearance=\"light\"\n          placeholder={formatMessage(messages.searchPlaceholder)}\n          onChangeText={onSearchChanged}\n        />\n      </SearchRow>\n      {error && (\n        <ErrorRow>\n          <ErrorMessage>{errorMessage}</ErrorMessage>\n        </ErrorRow>\n      )}\n    </>\n  );\n\n  const renderItem = (itemInfo: ListRenderItemInfo<OrganizationSelection>) => {\n    const organization = itemInfo.item;\n\n    return (\n      <ItemRow onPress={() => toggleSelectOrganizationAction(organization.id)}>\n        <>\n          {organization.isSelected && (\n            <ItemCheckImage source={images.icCheck()} />\n          )}\n          <ItemText>{itemInfo.item.name}</ItemText>\n        </>\n      </ItemRow>\n    );\n  };\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      {!fromMenu && <Background />}\n      <SafeAreaContainer>\n        <List\n          keyExtractor={(organization : any) => organization.id?.toString() || ''}\n          ListHeaderComponent={renderHeader()}\n          data={organizations}\n          extraData={organizations}\n          renderItem={renderItem}\n        />\n\n        {fromMenu ? (\n          <ContinueButtonRow>\n            <SelectButton\n              disabled={!nextButtonEnabled}\n              onCancel={NavigatorService.back}\n              text={formatMessage(messages.select)}\n              onPress={handleNextButtonClicked}\n              tintColor={colors.white}\n            />\n          </ContinueButtonRow>\n        ) : (\n          <ContinueButtonRow>\n            <GradientButton\n              disabled={!nextButtonEnabled}\n              text={formatMessage(messages.next)}\n              onPress={handleNextButtonClicked}\n            />\n          </ContinueButtonRow>\n        )}\n      </SafeAreaContainer>\n    </>\n  );\n};\n\nexport default SelectOrganizationScreen;\n"],"mappings":"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","ignoreList":[]}