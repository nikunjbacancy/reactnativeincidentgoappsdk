{"version":3,"names":["api","_interopRequireWildcard","require","_saga","_selectors","_actions","_effects","_error","_actions2","_actions3","_constants","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","createIncident","response","incidents","put","createIncidentSuccess","data","logger","debug","error","warn","createIncidentFailure","handleError","uploadVideo","payload","spawn","uploadVideoInParallel","filePath","options","getAmazonS3Options","addIncidentVideo","id","isUploaded","checkVideoUploadCompletion","uploadVideoSuccess","uploadVideoFailure","incident","select","makeSelectNewTipIncident","amazonOptionsResponse","getAmazonOptions","getVideo","delay","Error","deleteIncident","deleteIncidentSuccess","hideCancelIncidentModal","removeScreenAction","deleteIncidentFailure","getUserOrganizations","organizations","getUserOrganizationsSuccess","code","triggerOnboardForInactiveUser","getUserOrganizationsFailure","createTipWithChat","getIntersectOrganizationsRequest","createTipWithChatSuccess","createTipWithChatFailure","getLastActiveTipOrganization","organizationResponse","getOrganization","getLastTipOrganizationSuccess","getLastTipOrganizationFailure","newTipScreenSaga","takeLatest","CREATE_INCIDENT_REQUEST","UPLOAD_VIDEO_REQUEST","DELETE_INCIDENT_REQUEST","GET_USER_ORGANIZATIONS_REQUEST","CREATE_TIP_WITH_CHAT_REQUEST","GET_LAST_ACTIVE_TIP_ORGANIZATION_REQUEST"],"sources":["saga.ts"],"sourcesContent":["/**\n *\n * VideoRecordScreen saga\n *\n */\n\nimport * as api from '../../../../../api';\nimport { AxiosResponse } from 'axios';\nimport { triggerOnboardForInactiveUser } from '../../../../../containers/app/saga';\nimport { makeSelectNewTipIncident } from '../../../../../containers/app/selectors';\nimport { removeScreenAction } from '../../../../../containers/providers/RoutesProvider/actions';\nimport {\n  Incident,\n  IncidentVideo,\n  IncidentVideoUploadOptions,\n  Organization,\n} from 'incident-code-core';\nimport {\n  call,\n  delay,\n  put,\n  select,\n  spawn,\n  takeLatest,\n} from 'redux-saga/effects';\nimport { handleError } from '../../../../../utils/error';\n\nimport { getIntersectOrganizationsRequest } from '../SelectOrganizationScreen/actions';\nimport {\n  addIncidentVideo,\n  createIncidentFailure,\n  createIncidentSuccess,\n  createTipWithChatFailure,\n  createTipWithChatSuccess,\n  deleteIncidentFailure,\n  deleteIncidentSuccess,\n  getLastTipOrganizationFailure,\n  getLastTipOrganizationSuccess,\n  getUserOrganizationsFailure,\n  getUserOrganizationsSuccess,\n  hideCancelIncidentModal,\n  uploadVideoFailure,\n  uploadVideoSuccess,\n} from './actions';\nimport {\n  CREATE_INCIDENT_REQUEST,\n  CREATE_TIP_WITH_CHAT_REQUEST,\n  DELETE_INCIDENT_REQUEST,\n  GET_LAST_ACTIVE_TIP_ORGANIZATION_REQUEST,\n  GET_USER_ORGANIZATIONS_REQUEST,\n  UPLOAD_VIDEO_REQUEST,\n} from './constants';\nimport {\n  GetLastActiveTipOrganizationRequestAction,\n  UploadVideoRequestAction,\n} from './types';\n\nexport function* createIncident() {\n  try {\n    const response: AxiosResponse<Incident> = yield call(\n      api.incidents.createIncident,\n    );\n    yield put(createIncidentSuccess(response.data));\n    api.logger.debug('CreateIncident', 'Success', response.data);\n  } catch (error: any) {\n    api.logger.warn('CreateIncident', 'Create Failed', error);\n    yield put(createIncidentFailure(handleError(error)));\n  }\n}\n\nexport function* uploadVideo({ payload }: UploadVideoRequestAction) {\n  yield spawn(uploadVideoInParallel, payload);\n}\n\nfunction* uploadVideoInParallel(filePath: string): any {\n  try {\n    const options = yield call(getAmazonS3Options, filePath);\n\n    // add empty video card\n    yield put(addIncidentVideo({ id: options.id, isUploaded: false }));\n\n    yield call(api.incidents.uploadVideo, options);\n\n    yield call(checkVideoUploadCompletion, options);\n\n    yield put(uploadVideoSuccess());\n\n    api.logger.debug('UploadVideo', 'Success');\n  } catch (error: any) {\n    api.logger.warn('UploadVideo', 'Upload Failed', error);\n    yield put(uploadVideoFailure(handleError(error)));\n  }\n}\n\nfunction* getAmazonS3Options(filePath: string) {\n  let incident: Incident = yield select(makeSelectNewTipIncident());\n  try {\n    if (!incident) {\n      yield call(createIncident);\n      incident = yield select(makeSelectNewTipIncident());\n    }\n\n    // get amazon S3 authorization\n    const amazonOptionsResponse: AxiosResponse<IncidentVideoUploadOptions> = yield call(\n      api.incidents.getAmazonOptions,\n      incident,\n      filePath,\n    );\n\n    api.logger.debug('Get S3 options', 'Success', amazonOptionsResponse.data);\n\n    return amazonOptionsResponse.data;\n  } catch (error: any) {\n    api.logger.warn('Get S3 options', 'Failed', error);\n    yield put(uploadVideoFailure(handleError(error)));\n    return null;\n  }\n}\n\nfunction* checkVideoUploadCompletion(options: IncidentVideoUploadOptions) {\n  for (let i = 0; i < 10; i += 1) {\n    try {\n      const response: AxiosResponse<IncidentVideo> = yield call(\n        api.incidents.getVideo,\n        options.id,\n      );\n      if (response.data.isUploaded) {\n        yield put(addIncidentVideo(response.data));\n        api.logger.debug('CheckVideoUpload', 'Success', response.data);\n        return;\n      }\n    } catch (error) {\n      api.logger.warn('CheckVideoUpload', 'Failed', error);\n    } finally {\n      yield delay(2000);\n    }\n  }\n  throw new Error('Upload video to S3 failed');\n}\n\nfunction* deleteIncident() {\n  try {\n    const incident: Incident = yield select(makeSelectNewTipIncident());\n    if (incident) {\n      yield call(api.incidents.deleteIncident, incident.id);\n    }\n    yield put(deleteIncidentSuccess());\n    yield put(hideCancelIncidentModal());\n    yield put(removeScreenAction());\n  } catch (error: any) {\n    api.logger.warn('Delete incident', 'Failed', error);\n    yield put(deleteIncidentFailure(handleError(error)));\n  }\n}\n\nfunction* getUserOrganizations() {\n  try {\n    const response: AxiosResponse<Organization[]> = yield call(\n      api.organizations.getUserOrganizations,\n    );\n    yield put(getUserOrganizationsSuccess(response.data));\n  } catch (error: any) {\n    if (error.response.data.code === 'user_no_belong_organization') {\n      yield* triggerOnboardForInactiveUser();\n    }\n    api.logger.warn('Get user organizations', 'Failed', error);\n    yield put(getUserOrganizationsFailure(handleError(error)));\n  }\n}\n\nfunction* createTipWithChat() {\n  try {\n    yield call(createIncident);\n    yield put(getIntersectOrganizationsRequest());\n    yield put(createTipWithChatSuccess());\n  } catch (error: any) {\n    yield put(createTipWithChatFailure(handleError(error)));\n  }\n}\n\nfunction* getLastActiveTipOrganization({\n  payload,\n}: GetLastActiveTipOrganizationRequestAction) {\n  try {\n    const organizationResponse: AxiosResponse<Organization> = yield call(\n      api.organizations.getOrganization,\n      payload,\n    );\n    yield put(getLastTipOrganizationSuccess(organizationResponse.data));\n  } catch (error: any) {\n    yield put(getLastTipOrganizationFailure(handleError(error)));\n  }\n}\n\nexport default function* newTipScreenSaga() {\n  yield takeLatest(CREATE_INCIDENT_REQUEST, createIncident);\n  yield takeLatest(UPLOAD_VIDEO_REQUEST, uploadVideo);\n  yield takeLatest(DELETE_INCIDENT_REQUEST, deleteIncident);\n  yield takeLatest(GET_USER_ORGANIZATIONS_REQUEST, getUserOrganizations);\n  yield takeLatest(CREATE_TIP_WITH_CHAT_REQUEST, createTipWithChat);\n  yield takeLatest(\n    GET_LAST_ACTIVE_TIP_ORGANIZATION_REQUEST,\n    getLastActiveTipOrganization,\n  );\n}\n"],"mappings":"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","ignoreList":[]}