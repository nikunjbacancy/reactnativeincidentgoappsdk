{"version":3,"names":["_constants","require","getIntersectOrganizationsRequest","type","GET_INTERSECT_ORGANIZATIONS_REQUEST","exports","getIntersectOrganizationsSuccess","organizations","GET_INTERSECT_ORGANIZATIONS_SUCCESS","payload","getIntersectOrganizationsFailure","error","GET_INTERSECT_ORGANIZATIONS_FAILURE","toggleSelectOrganization","id","TOGGLE_SELECT_ORGANIZATION","addSelectedOrganizationRequest","SELECT_INCIDENT_ORGANIZATION_REQUEST","addSelectedOrganizationSuccess","organization","SELECT_INCIDENT_ORGANIZATION_SUCCESS","addSelectedOrganizationFailure","SELECT_INCIDENT_ORGANIZATION_FAILURE"],"sources":["actions.ts"],"sourcesContent":["/**\n *\n * SelectOrganizationScreen actions\n *\n */\n\nimport { Id, OrganizationWithArea } from 'incident-code-core';\nimport { IntersectOrganizationSelection } from 'types';\n\nimport {\n  GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  GET_INTERSECT_ORGANIZATIONS_REQUEST,\n  GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  SELECT_INCIDENT_ORGANIZATION_FAILURE,\n  SELECT_INCIDENT_ORGANIZATION_REQUEST,\n  SELECT_INCIDENT_ORGANIZATION_SUCCESS,\n  TOGGLE_SELECT_ORGANIZATION,\n} from './constants';\nimport { SelectOrganizationActionTypes } from './types';\n\nexport const getIntersectOrganizationsRequest = (): SelectOrganizationActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_REQUEST,\n});\n\nexport const getIntersectOrganizationsSuccess = (\n  organizations: IntersectOrganizationSelection[],\n): SelectOrganizationActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  payload: organizations,\n});\n\nexport const getIntersectOrganizationsFailure = (\n  error: Error,\n): SelectOrganizationActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  payload: error,\n  error: true,\n});\n\nexport const toggleSelectOrganization = (\n  id: Id,\n): SelectOrganizationActionTypes => ({\n  type: TOGGLE_SELECT_ORGANIZATION,\n  payload: id,\n});\n\nexport const addSelectedOrganizationRequest = (): SelectOrganizationActionTypes => ({\n  type: SELECT_INCIDENT_ORGANIZATION_REQUEST,\n});\n\nexport const addSelectedOrganizationSuccess = (\n  organization: OrganizationWithArea,\n): SelectOrganizationActionTypes => ({\n  type: SELECT_INCIDENT_ORGANIZATION_SUCCESS,\n  payload: organization,\n});\n\nexport const addSelectedOrganizationFailure = (\n  error: Error,\n): SelectOrganizationActionTypes => ({\n  type: SELECT_INCIDENT_ORGANIZATION_FAILURE,\n  payload: error,\n  error: true,\n});\n"],"mappings":";;;;;;AASA,IAAAA,UAAA,GAAAC,OAAA;AATA;AACA;AACA;AACA;AACA;;AAgBO,MAAMC,gCAAgC,GAAGA,CAAA,MAAsC;EACpFC,IAAI,EAAEC;AACR,CAAC,CAAC;AAACC,OAAA,CAAAH,gCAAA,GAAAA,gCAAA;AAEI,MAAMI,gCAAgC,GAC3CC,aAA+C,KACZ;EACnCJ,IAAI,EAAEK,8CAAmC;EACzCC,OAAO,EAAEF;AACX,CAAC,CAAC;AAACF,OAAA,CAAAC,gCAAA,GAAAA,gCAAA;AAEI,MAAMI,gCAAgC,GAC3CC,KAAY,KACuB;EACnCR,IAAI,EAAES,8CAAmC;EACzCH,OAAO,EAAEE,KAAK;EACdA,KAAK,EAAE;AACT,CAAC,CAAC;AAACN,OAAA,CAAAK,gCAAA,GAAAA,gCAAA;AAEI,MAAMG,wBAAwB,GACnCC,EAAM,KAC6B;EACnCX,IAAI,EAAEY,qCAA0B;EAChCN,OAAO,EAAEK;AACX,CAAC,CAAC;AAACT,OAAA,CAAAQ,wBAAA,GAAAA,wBAAA;AAEI,MAAMG,8BAA8B,GAAGA,CAAA,MAAsC;EAClFb,IAAI,EAAEc;AACR,CAAC,CAAC;AAACZ,OAAA,CAAAW,8BAAA,GAAAA,8BAAA;AAEI,MAAME,8BAA8B,GACzCC,YAAkC,KACC;EACnChB,IAAI,EAAEiB,+CAAoC;EAC1CX,OAAO,EAAEU;AACX,CAAC,CAAC;AAACd,OAAA,CAAAa,8BAAA,GAAAA,8BAAA;AAEI,MAAMG,8BAA8B,GACzCV,KAAY,KACuB;EACnCR,IAAI,EAAEmB,+CAAoC;EAC1Cb,OAAO,EAAEE,KAAK;EACdA,KAAK,EAAE;AACT,CAAC,CAAC;AAACN,OAAA,CAAAgB,8BAAA,GAAAA,8BAAA","ignoreList":[]}