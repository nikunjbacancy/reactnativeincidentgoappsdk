{"version":3,"names":["_immer","_interopRequireDefault","require","_map","_constants","e","__esModule","default","initialState","exports","organizations","undefined","requestingOrganizations","error","errorMessage","organizationNotifyScreenReducer","produce","draft","action","type","GET_INTERSECT_ORGANIZATIONS_REQUEST","GET_INTERSECT_ORGANIZATIONS_SUCCESS","payload","TOGGLE_SELECT_ORGANIZATION","map","organization","id","isSelected","GET_INTERSECT_ORGANIZATIONS_FAILURE","SELECT_INCIDENT_ORGANIZATION_FAILURE","message","_default"],"sources":["reducer.ts"],"sourcesContent":["/**\n *\n * SelectOrganizationScreen reducer\n *\n */\n\nimport produce, { Draft } from 'immer';\nimport map from 'lodash/map';\n\nimport {\n  GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  GET_INTERSECT_ORGANIZATIONS_REQUEST,\n  GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  SELECT_INCIDENT_ORGANIZATION_FAILURE,\n  TOGGLE_SELECT_ORGANIZATION,\n} from './constants';\nimport { OrganizationNotifyState } from './types';\n\nexport const initialState: OrganizationNotifyState = {\n  organizations: undefined,\n  requestingOrganizations: false,\n  error: false,\n  errorMessage: '',\n};\n\nconst organizationNotifyScreenReducer = produce(\n  (draft: Draft<OrganizationNotifyState>, action) => {\n    switch (action.type) {\n      case GET_INTERSECT_ORGANIZATIONS_REQUEST:\n        draft.requestingOrganizations = true;\n        break;\n      case GET_INTERSECT_ORGANIZATIONS_SUCCESS:\n        draft.requestingOrganizations = false;\n        draft.organizations = action.payload.organizations;\n        break;\n      case TOGGLE_SELECT_ORGANIZATION:\n        draft.organizations = map(draft.organizations, organization => {\n          if (organization.id === action.payload) {\n            return {\n              ...organization,\n              isSelected: !organization.isSelected,\n            };\n          }\n          return {\n            ...organization,\n            isSelected: false,\n          };\n        });\n        break;\n      case GET_INTERSECT_ORGANIZATIONS_FAILURE:\n      case SELECT_INCIDENT_ORGANIZATION_FAILURE:\n        draft.error = action.error;\n        draft.errorMessage = action.payload.message;\n        draft.requestingOrganizations = false;\n        break;\n      default:\n    }\n  },\n  initialState,\n);\n\nexport default organizationNotifyScreenReducer;\n"],"mappings":";;;;;;AAMA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,IAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEA,IAAAE,UAAA,GAAAF,OAAA;AAMqB,SAAAD,uBAAAI,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAfrB;AACA;AACA;AACA;AACA;;AAcO,MAAMG,YAAqC,GAAAC,OAAA,CAAAD,YAAA,GAAG;EACnDE,aAAa,EAAEC,SAAS;EACxBC,uBAAuB,EAAE,KAAK;EAC9BC,KAAK,EAAE,KAAK;EACZC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,+BAA+B,GAAG,IAAAC,cAAO,EAC7C,CAACC,KAAqC,EAAEC,MAAM,KAAK;EACjD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKC,8CAAmC;MACtCH,KAAK,CAACL,uBAAuB,GAAG,IAAI;MACpC;IACF,KAAKS,8CAAmC;MACtCJ,KAAK,CAACL,uBAAuB,GAAG,KAAK;MACrCK,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACI,OAAO,CAACZ,aAAa;MAClD;IACF,KAAKa,qCAA0B;MAC7BN,KAAK,CAACP,aAAa,GAAG,IAAAc,YAAG,EAACP,KAAK,CAACP,aAAa,EAAEe,YAAY,IAAI;QAC7D,IAAIA,YAAY,CAACC,EAAE,KAAKR,MAAM,CAACI,OAAO,EAAE;UACtC,OAAO;YACL,GAAGG,YAAY;YACfE,UAAU,EAAE,CAACF,YAAY,CAACE;UAC5B,CAAC;QACH;QACA,OAAO;UACL,GAAGF,YAAY;UACfE,UAAU,EAAE;QACd,CAAC;MACH,CAAC,CAAC;MACF;IACF,KAAKC,8CAAmC;IACxC,KAAKC,+CAAoC;MACvCZ,KAAK,CAACJ,KAAK,GAAGK,MAAM,CAACL,KAAK;MAC1BI,KAAK,CAACH,YAAY,GAAGI,MAAM,CAACI,OAAO,CAACQ,OAAO;MAC3Cb,KAAK,CAACL,uBAAuB,GAAG,KAAK;MACrC;IACF;EACF;AACF,CAAC,EACDJ,YACF,CAAC;AAAC,IAAAuB,QAAA,GAAAtB,OAAA,CAAAF,OAAA,GAEaQ,+BAA+B","ignoreList":[]}