{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_api","_interopRequireWildcard","api","_assets","_components","_actions","_selectors","_filter","_forEach","_isEmpty","_react","_reactIntl","_reactNative","_reactNativeKeepAwake","_reactNativeTwilioVideoWebrtc","_hooks","_backgroundGeolocation","_notification","_token","_permission","_actions2","_constants","_ExitPanicModal","_messages","_RecordAudio","_SafeModal","_selectors2","_styles","_TimerExpired","_types","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","PermissionStatus","connectionTypes","EscortScreen","navigation","getParam","permissionStatus","setPermissionStatus","useState","Checking","incidentEscort","organization","fromPassive","badges","setBadges","showTimerExpired","setShowTimerExpired","connectionState","setConnectionState","disconnected","locationRef","useRef","formatMessage","useIntl","showCallModalAction","useAction","showCallModal","hideCallModalAction","hideCallModal","showSafeModalAction","showSafeModal","hideSafeModalAction","hideSafeModal","toggleRecordTypeAction","toggleRecordType","startChatAction","startChat","showChatModalAction","showChatModal","hideChatModalAction","hideChatModal","sendMessageAction","sendMessageRequest","addMessageAction","addMessage","imSafeAction","imSafeRequest","showPanicInfoAction","showPanicInfo","enterPanicModeAction","enterPanicMode","exitPanicModeAction","exitPanicMode","showExitPanicModalAction","showExitPanicModal","hideExitPanicModalAction","hideExitPanicModal","clearDataAndGoBackAction","clearDataAndGoBack","setTriggeredFromPassiveAction","setEscortFromPassive","clearLocation","ClearLocationData","logError","LogErrorToDb","appStateStatusChange","appStateChangeAction","shouldShowCallModal","useSelector","makeSelectShouldShowCallModal","shouldShowSafeModal","makeSelectShouldShowSafeModal","recordType","makeSelectRecordType","shouldShowChatModal","makeSelectShouldShowChatModal","chatMessages","makeSelectMessages","requestingImSafe","makeSelectRequestingImSafe","shouldShowPanicInfo","makeSelectShouldShowPanicInfo","shouldShowExitPanicModal","makeSelectShouldShowExitPanicModal","accessToken","makeSelectTwilioAccessToken","isPanicMode","makeSelectIsPanicMode","location","makeSelectAppLocation","appState","makeSelectAppState","twilioVideoRef","panicModeRef","useBackButton","tryRequestCameraPermissions","requestCameraPermissions","then","Granted","catch","Blocked","onEscortClosed","current","setTimeout","Alert","alert","messages","escortClosed","escortClosedDetail","text","ok","onPress","cancelable","stopBackgroundGeolocation","handleAppStateChange","state","initTwilioVideo","connnected","_twilioVideoRef$curre","_incidentEscort$twili","token","isTokenExpired","refreshTwilioAccessToken","connect","roomName","twilio","roomId","access_token","maintainVideoTrackInBackground","enableAudio","enableRemoteAudio","connecting","useEffect","initEffects","KeepAwake","activate","event","on","AppEvent","OnEscortClosed","AppState","currentState","addEventListener","asyncInit","panicMode","AsyncStorage","getItem","PANIC_MODE_KEY","PanicMode","Active","setItem","ESCORT_STATE_KEY","EscortState","Started","_incidentEscort$twili2","_twilioVideoRef$curre2","_incidentEscort$twili3","console","log","err","logger","initEffectCleanUp","off","deactivate","removeEventListener","asyncCleanup","_twilioVideoRef$curre3","Finished","disconnect","message","_twilioVideoRef$curre4","setLocalVideoEnabled","RecordType","Video","manageChatNotifications","notificationAdded","notificationBadges","filter","id","OnNotificationBadge","messageAdded","addBadge","OnMessageAdded","onMessageOpenChatBox","OnChatMessageTap","clean","_incidentEscort$id","removeChannelEvents","toString","_twilioVideoRef$curre5","_twilioVideoRef$curre6","setLocalAudioEnabled","fromTimerExpired","_twilioVideoRef$curre7","_twilioVideoRef$curre8","handleSendMessage","useCallback","messagesToSent","forEach","handleSafeModalContinue","comment","_twilioVideoRef$curre9","handleEnterPanicModeAction","Audio","_twilioVideoRef$curre10","handleExitPanicModeAction","clearBadges","removeBadge","onFlipButtonClick","_twilioVideoRef$curre11","flipCamera","handleRoomDidConnect","_twilioVideoRef$curre12","_twilioVideoRef$curre13","_twilioVideoRef$curre14","_twilioVideoRef$curre15","setRemoteAudioEnabled","source","raw","JSON","stringify","handleRoomDisconnect","payload","error","handleRoomConnectionFail","createElement","Fragment","StatusBar","barStyle","backgroundColor","SafeAreaContainer","Container","RecordContainer","TwilioVideoLocalView","applyZOrder","enabled","style","flex","Logo","OrganizationName","escort","organizationName","name","SharingText","sharingAudio","shareVideo","AudioStream","RecordDot","PanicInfoContainer","CameraFlipButton","image","images","icFlip","MiddleControls","SafeButton","SafeButtonText","endPanic","imSafe","PanicButton","onFill","panic","BottomControls","PhoneButton","icPhoneCall","ToggleContainer","disabled","ToggleImageContainer","ToggleImage","icMicrophone","icCamera","ToggleText","audioOnly","ChatContainer","ChatButton","icChat","isEmpty","StyledBadge","length","CallModal","isVisible","hideModal","onContinue","ChatModal","onMessageSent","onShow","onHide","onConfirm","TwilioVideo","ref","onRoomDidConnect","onRoomDidDisconnect","onRoomDidFailToConnect","PanicOverlay","_default","exports"],"sources":["index.tsx"],"sourcesContent":["/* eslint-disable simple-import-sort/sort */\n/* eslint-disable no-unused-expressions,@typescript-eslint/no-misused-promises */\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AppEvent, event, twilio } from '../../../../../api';\nimport { images } from '../../../../../assets';\nimport {\n  CallModal,\n  ChatModal,\n  SafeAreaContainer,\n  PanicButton,\n} from '../../../../../components';\nimport { ClearLocationData, LogErrorToDb } from '../../../../../containers/app/actions';\nimport {\n  makeSelectAppLocation,\n  makeSelectTwilioAccessToken,\n} from '../../../../../containers/app/selectors';\nimport { Id, IncidentEscort, Organization } from 'incident-code-core';\nimport filter from 'lodash/filter';\nimport forEach from 'lodash/forEach';\nimport isEmpty from 'lodash/isEmpty';\nimport React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Alert, AppState, AppStateStatus, StatusBar } from 'react-native';\nimport { Location } from 'react-native-background-geolocation';\nimport { IMessage as GiftedChatMessage } from 'react-native-gifted-chat';\nimport KeepAwake from 'react-native-keep-awake';\nimport { ScreenProps } from 'react-native-screens';\nimport {\n  TwilioVideo,\n  TwilioVideoLocalView,\n} from 'react-native-twilio-video-webrtc';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport { useAction, useBackButton, useSelector } from '../../../../../utils/hooks';\nimport { stopBackgroundGeolocation } from '../../../../../utils/location/backgroundGeolocation';\nimport { addBadge, removeBadge } from '../../../../../utils/notification';\nimport { isTokenExpired, refreshTwilioAccessToken } from '../../../../../utils/token';\nimport { requestCameraPermissions } from '../../../../../utils/permission';\n\nenum PermissionStatus {\n  Checking,\n  Granted,\n  Blocked,\n}\n\nimport * as api from '../../../../../api';\nimport {\n  addMessage,\n  appStateChangeAction,\n  clearDataAndGoBack,\n  enterPanicMode,\n  exitPanicMode,\n  hideCallModal,\n  hideChatModal,\n  hideExitPanicModal,\n  hideSafeModal,\n  imSafeRequest,\n  sendMessageRequest,\n  setEscortFromPassive,\n  showCallModal,\n  showChatModal,\n  showExitPanicModal,\n  showPanicInfo,\n  showSafeModal,\n  startChat,\n  toggleRecordType,\n} from './actions';\nimport { ESCORT_STATE_KEY, PANIC_MODE_KEY } from './constants';\nimport ExitPanicModal from './ExitPanicModal';\nimport messages from './messages';\nimport RecordAudio from './RecordAudio';\nimport SafeModal from './SafeModal';\nimport {\n  makeSelectIsPanicMode,\n  makeSelectMessages,\n  makeSelectRecordType,\n  makeSelectRequestingImSafe,\n  makeSelectShouldShowCallModal,\n  makeSelectShouldShowChatModal,\n  makeSelectShouldShowExitPanicModal,\n  makeSelectShouldShowPanicInfo,\n  makeSelectShouldShowSafeModal,\n  makeSelectAppState,\n} from './selectors';\nimport {\n  AudioStream,\n  BottomControls,\n  CameraFlipButton,\n  ChatButton,\n  ChatContainer,\n  Container,\n  Logo,\n  MiddleControls,\n  OrganizationName,\n  PanicInfoContainer,\n  PanicOverlay,\n  PhoneButton,\n  RecordContainer,\n  RecordDot,\n  SafeButton,\n  SafeButtonText,\n  SharingText,\n  StyledBadge,\n  ToggleContainer,\n  ToggleImage,\n  ToggleImageContainer,\n  ToggleText,\n} from './styles';\nimport TimerExpiredBanner from './TimerExpired';\nimport { EscortState, PanicMode, RecordType } from './types';\n\nenum connectionTypes {\n  disconnected = 'disconnected',\n  connecting = 'connnecting',\n  connnected = 'connected',\n}\n\ninterface Params {\n  incidentEscort: IncidentEscort;\n  organization: Organization;\n  fromPassive?: boolean;\n}\ninterface Props extends NavigationStackScreenProps<Params, ScreenProps> { }\n\nconst EscortScreen: FC<Props> = ({ navigation: { getParam } }) => {\n\n  const [permissionStatus, setPermissionStatus] = useState(\n    PermissionStatus.Checking,\n  );\n\n  const incidentEscort = getParam('incidentEscort');\n  const organization = getParam('organization');\n  const fromPassive = getParam('fromPassive');\n\n  const [badges, setBadges] = useState<Id[]>([]);\n  const [showTimerExpired, setShowTimerExpired] = useState(false);\n  const [connectionState, setConnectionState] = useState<connectionTypes>(\n    connectionTypes.disconnected,\n  );\n  const locationRef = useRef<Location>();\n\n  const { formatMessage } = useIntl();\n\n  const showCallModalAction = useAction(showCallModal);\n  const hideCallModalAction = useAction(hideCallModal);\n  const showSafeModalAction = useAction(showSafeModal);\n  const hideSafeModalAction = useAction(hideSafeModal);\n  const toggleRecordTypeAction = useAction(toggleRecordType);\n  const startChatAction = useAction(startChat);\n  const showChatModalAction = useAction(showChatModal);\n  const hideChatModalAction = useAction(hideChatModal);\n  const sendMessageAction = useAction(sendMessageRequest);\n  const addMessageAction = useAction(addMessage);\n  const imSafeAction = useAction(imSafeRequest);\n  const showPanicInfoAction = useAction(showPanicInfo);\n  const enterPanicModeAction = useAction(enterPanicMode);\n  const exitPanicModeAction = useAction(exitPanicMode);\n  const showExitPanicModalAction = useAction(showExitPanicModal);\n  const hideExitPanicModalAction = useAction(hideExitPanicModal);\n  const clearDataAndGoBackAction = useAction(clearDataAndGoBack);\n  const setTriggeredFromPassiveAction = useAction(setEscortFromPassive);\n  const clearLocation = useAction(ClearLocationData);\n  const logError = useAction(LogErrorToDb);\n  const appStateStatusChange = useAction(appStateChangeAction);\n  const shouldShowCallModal = useSelector(makeSelectShouldShowCallModal());\n  const shouldShowSafeModal = useSelector(makeSelectShouldShowSafeModal());\n  const recordType = useSelector(makeSelectRecordType());\n  const shouldShowChatModal = useSelector(makeSelectShouldShowChatModal());\n  const chatMessages = useSelector(makeSelectMessages());\n  const requestingImSafe = useSelector(makeSelectRequestingImSafe());\n  const shouldShowPanicInfo = useSelector(makeSelectShouldShowPanicInfo());\n  const shouldShowExitPanicModal = useSelector(\n    makeSelectShouldShowExitPanicModal(),\n  );\n  const accessToken = useSelector(makeSelectTwilioAccessToken());\n  const isPanicMode = useSelector(makeSelectIsPanicMode());\n  const location = useSelector(makeSelectAppLocation());\n  const appState = useSelector(makeSelectAppState());\n\n  const twilioVideoRef = useRef<TwilioVideo>(null);\n  const panicModeRef = useRef(false);\n\n  // console.log(\"isPanicMode ====>\",isPanicMode)\n\n  useBackButton(() => {\n    showSafeModalAction();\n    return true;\n  });\n\n\n  const tryRequestCameraPermissions = () => {\n    requestCameraPermissions()\n      .then(() => {\n        // console.log(\"camera permission granted\")\n        setPermissionStatus(PermissionStatus.Granted);\n      })\n      .catch(() => {\n        // console.log(\"camera permission blocked\")\n        setPermissionStatus(PermissionStatus.Blocked);\n      });\n  };\n\n\n  const onEscortClosed = () => {\n    hideChatModalAction();\n    exitPanicModeAction(incidentEscort);\n    panicModeRef.current = false;\n    setTimeout(\n      async () => {\n        Alert.alert(\n          formatMessage(messages.escortClosed),\n          formatMessage(messages.escortClosedDetail),\n          [\n            {\n              text: formatMessage(messages.ok),\n              onPress: clearDataAndGoBackAction,\n            },\n          ],\n          { cancelable: false },\n        );\n        await stopBackgroundGeolocation(clearLocation);\n      },\n      shouldShowChatModal ? 5000 : 1500,\n    );\n  };\n\n  const handleAppStateChange = (state: AppStateStatus) => {\n    appStateStatusChange({ state, incidentEscort });\n  };\n\n  //initialize twilio video\n  const initTwilioVideo = async () => {\n    if (showTimerExpired === true && connectionState !== connectionTypes.connnected) {\n      // console.log(\"initTwilioVideo===>\")\n      let token = accessToken;\n      if (isTokenExpired(accessToken)) {\n        token = await refreshTwilioAccessToken();\n      }\n      // console.log(\"incidentEscort.twilio?.roomId===>\",incidentEscort.twilio?.roomId)\n      twilioVideoRef.current?.connect({\n        roomName: incidentEscort.twilio?.roomId,\n        accessToken: token.access_token || '',\n        maintainVideoTrackInBackground: true,\n        enableAudio: true,\n        enableRemoteAudio: true\n      });\n      // console.log(\"-initTwilioVideo Connecting--->\")\n      setConnectionState(connectionTypes.connecting);\n    }\n  }\n\n  useEffect(function initEffects() {\n    KeepAwake.activate(); // sync\n    event.on(AppEvent.OnEscortClosed, onEscortClosed); // sync\n    handleAppStateChange(AppState.currentState); // if app is restart mid escort, need to update AppState to 'active'\n    AppState.addEventListener('change', handleAppStateChange); // sync\n    tryRequestCameraPermissions()\n    const asyncInit = async () => {\n      try {\n        const panicMode = await AsyncStorage.getItem(PANIC_MODE_KEY);\n        // console.log(\"=panicMode======>\", panicMode)\n        if (panicMode === PanicMode.Active) {\n          panicModeRef.current = true;\n          enterPanicModeAction(incidentEscort);\n        } else {\n          panicModeRef.current = false;\n        }\n        await AsyncStorage.setItem(ESCORT_STATE_KEY, EscortState.Started);\n\n        // console.log(\"=panicMode======>\", panicMode)\n        // console.log(\"=isPanicMode======>\", isPanicMode)\n        // let token = accessToken;\n        // if (isTokenExpired(accessToken)) {\n        //   token = await refreshTwilioAccessToken();\n        // }\n        // twilioVideoRef.current?.connect({\n        //   roomName: incidentEscort.twilio?.roomId,\n        //   accessToken: token.access_token || '',\n        //   maintainVideoTrackInBackground: true,\n        //   enableAudio: true,\n        //   enableRemoteAudio:true\n        // });\n        // console.log(\"-Connecting--->\")\n        // setConnectionState(connectionTypes.connecting);\n\n\n\n        if (AppState.currentState === 'active' && showTimerExpired === false && isPanicMode === false) {\n          let token = accessToken;\n          if (isTokenExpired(accessToken)) {\n            token = await refreshTwilioAccessToken();\n          }\n          console.log(\"-incidentEscort.twilio?.roomId 2--->\",incidentEscort.twilio?.roomId)\n          twilioVideoRef.current?.connect({\n            roomName: incidentEscort.twilio?.roomId,\n            accessToken: token.access_token || '',\n            maintainVideoTrackInBackground: true,\n            enableAudio: true,\n            enableRemoteAudio: true\n          });\n          // console.log(\"-initEffects Connectin g--->\")\n          setConnectionState(connectionTypes.connecting);\n        }\n\n\n\n      } catch (err) {\n        api.logger.log('Record Screen async init', err);\n      }\n    };\n    asyncInit();\n    return function initEffectCleanUp() {\n      event.off(AppEvent.OnEscortClosed, onEscortClosed); // sync\n      KeepAwake.deactivate(); // sync\n      AppState.removeEventListener('change', handleAppStateChange); // sync\n      const asyncCleanup = async () => {\n        try {\n          await AsyncStorage.setItem(ESCORT_STATE_KEY, EscortState.Finished); // async\n          twilioVideoRef.current?.disconnect();\n        } catch (err) {\n          api.logger.log('Record Screen async cleanup', (err as Error).message);\n        }\n      };\n      asyncCleanup();\n    };\n  }, []);\n\n  // Manage toggle sideEffect\n  useEffect(() => {\n    (async () => {\n      try {\n        if (!isPanicMode && connectionState === connectionTypes.connnected) {\n          await twilioVideoRef.current?.setLocalVideoEnabled(\n            recordType === RecordType.Video,\n          );\n        }\n      } catch (err) {\n        api.logger.log('Toggle video enabled ERR: ', (err as Error).message);\n      }\n    })();\n  }, [recordType, isPanicMode]);\n\n  // // Manage toggle sideEffect\n  // useEffect(() => {\n  //   (async () => {\n  //     try {\n  //       console.log(\"isPanicMode****==>\",isPanicMode)\n  //       if (isPanicMode && connectionState !== connectionTypes.connnected) {\n  //         let token = accessToken;\n  //         if (isTokenExpired(accessToken)) {\n  //           token = await refreshTwilioAccessToken();\n  //         }\n  //         twilioVideoRef.current?.connect({\n  //           roomName: incidentEscort.twilio?.roomId,\n  //           accessToken: token.access_token || '',\n  //           maintainVideoTrackInBackground: true,\n  //           enableAudio: true,\n  //           enableRemoteAudio: true\n  //         });\n  //         console.log(\"-useEffect Connecting--->\")\n  //         setConnectionState(connectionTypes.connecting);\n  //       }\n  //     } catch (err) {\n  //       api.logger.log('Toggle video enabled ERR: ', err);\n  //     }\n  //   })();\n  // }, [isPanicMode]);\n\n  useEffect(\n    function manageChatNotifications() {\n      startChatAction(incidentEscort);\n      const notificationAdded = (notificationBadges: Id[]) => {\n        setBadges(filter(notificationBadges, n => n === incidentEscort.id));\n      };\n      event.on(AppEvent.OnNotificationBadge, notificationAdded);\n      const messageAdded = async (message: GiftedChatMessage) => {\n        await addBadge(incidentEscort.id as Id);\n        addMessageAction(message);\n      };\n      event.on(AppEvent.OnMessageAdded, messageAdded);\n\n      const onMessageOpenChatBox = async (message: GiftedChatMessage) => {\n        console.log(\"open chat box===>\",message)\n        showChatModalAction()\n      };\n      event.on(AppEvent.OnChatMessageTap, onMessageOpenChatBox);\n      return function clean() {\n        event.off(AppEvent.OnNotificationBadge, notificationAdded);\n        event.off(AppEvent.OnMessageAdded, messageAdded);\n        twilio\n          .removeChannelEvents(incidentEscort.id?.toString() || '')\n          .then()\n          .catch(e => api.logger.log('Remove chat channel event', e));\n      };\n    },\n    [addMessageAction, incidentEscort, startChatAction],\n  );\n\n  useEffect(() => {\n    (() => {\n      if (connectionState === connectionTypes.connnected) {\n        if (panicModeRef.current) {\n          try {\n            // console.log(\"Video Enable\")\n            setTimeout(async () => {\n              toggleRecordTypeAction(incidentEscort);\n              await twilioVideoRef.current?.setLocalAudioEnabled(true);\n              await twilioVideoRef.current?.setLocalVideoEnabled(true);\n            }, 5000);\n          } catch (err) {\n            api.logger.log('Enter panic ERR: ', (err as Error).message);\n          }\n        }\n      }\n    })();\n  }, [incidentEscort, toggleRecordTypeAction, connectionState]);\n\n  useEffect(() => {\n    setShowTimerExpired(!!incidentEscort.fromTimerExpired);\n  }, [incidentEscort]);\n\n  useEffect(() => {\n    if (fromPassive) {\n      setTriggeredFromPassiveAction();\n    }\n  }, [fromPassive, setTriggeredFromPassiveAction]);\n\n  useEffect(() => {\n    locationRef.current = location;\n  }, [location]);\n\n  useEffect(() => {\n    (async () => {\n      if (!panicModeRef.current && appState === 'active') {\n        initTwilioVideo() // initialize twilio video\n        await twilioVideoRef.current?.setLocalAudioEnabled(true);\n        await twilioVideoRef.current?.setLocalVideoEnabled(\n          recordType === RecordType.Video,\n        );\n      }\n    })();\n  }, [appState, recordType]);\n\n  const handleSendMessage = useCallback(\n    (messagesToSent: GiftedChatMessage[]) => {\n      forEach(messagesToSent, message => {\n        sendMessageAction({\n          incidentEscort,\n          message,\n          location: locationRef.current,\n        });\n      });\n    },\n    [incidentEscort, sendMessageAction],\n  );\n\n  const handleSafeModalContinue = useCallback(\n    (comment: string | undefined) => {\n      exitPanicModeAction(incidentEscort);\n      panicModeRef.current = false;\n\n      imSafeAction({ incidentEscort, comment });\n      twilioVideoRef.current?.disconnect();\n      if (!fromPassive) {\n        (async () => {\n          await stopBackgroundGeolocation(clearLocation);\n        })();\n      }\n    },\n    [imSafeAction, incidentEscort, fromPassive],\n  );\n\n  const handleEnterPanicModeAction = useCallback(() => {\n    enterPanicModeAction(incidentEscort);\n    panicModeRef.current = true;\n    if (recordType === RecordType.Audio && connectionState === connectionTypes.connnected) {\n      toggleRecordTypeAction(incidentEscort);\n      twilioVideoRef.current?.setLocalVideoEnabled(true);\n    }\n  }, [\n    enterPanicModeAction,\n    incidentEscort,\n    recordType,\n    toggleRecordTypeAction,\n    connectionState,\n  ]);\n\n  const handleExitPanicModeAction = useCallback(() => {\n    exitPanicModeAction(incidentEscort);\n    panicModeRef.current = false;\n  }, [exitPanicModeAction, incidentEscort]);\n\n  const clearBadges = useCallback(async () => {\n    await removeBadge(incidentEscort.id as Id);\n  }, [incidentEscort]);\n\n  const onFlipButtonClick = useCallback(() => {\n    // console.log(\"-connectionState->\", connectionState)\n    // console.log(\"-twilioVideoRef.current?->\", twilioVideoRef.current)\n    if (connectionState === connectionTypes.connnected) {\n      twilioVideoRef.current?.flipCamera();\n    }\n  }, [connectionState]);\n\n  const handleRoomDidConnect = useCallback(async () => {\n    try {\n      console.log(\"-Connected--->\")\n      setConnectionState(connectionTypes.connnected);\n      await twilioVideoRef.current?.setRemoteAudioEnabled(true);\n      await twilioVideoRef.current?.setLocalAudioEnabled(true);\n      await twilioVideoRef.current?.setLocalVideoEnabled(false);\n      twilioVideoRef.current?.flipCamera();\n    } catch (e) {\n      logError({\n        source: 'handleRoomDidConnect',\n        message: (e as Error).message,\n        raw: JSON.stringify(e),\n      });\n    }\n  }, [logError]);\n\n  const handleRoomDisconnect = useCallback(\n    payload => {\n      console.log(\"-DisConnected--->\")\n      setConnectionState(connectionTypes.disconnected);\n      logError({\n        source: 'Record Screen: OnRoomDidDisconnect',\n        message: payload.error,\n        raw: JSON.stringify(payload),\n      });\n    },\n    [logError],\n  );\n\n  // const reconnect = async () => {\n\n  //   let token = accessToken;\n  //   if (isTokenExpired(accessToken)) {\n  //     token = await refreshTwilioAccessToken();\n  //   }\n  //   twilioVideoRef.current?.connect({\n  //     roomName: incidentEscort.twilio?.roomId,\n  //     accessToken: token.access_token || '',\n  //     maintainVideoTrackInBackground: true,\n  //     encodingParameters: { enableH264Codec: true }\n  //   });\n  //   console.log(\"-Connecting--->\")\n  //   setConnectionState(connectionTypes.connecting);\n  // }\n\n  const handleRoomConnectionFail = useCallback(\n    payload => {\n      console.log(\"-Connection Failed--->\", payload)\n      setConnectionState(connectionTypes.disconnected);\n      // reconnect()\n      logError({\n        source: 'Record Screen: OnRoomDidFailToConnect',\n        message: payload.error,\n        raw: JSON.stringify(payload),\n      });\n    },\n    [logError],\n\n  );\n\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <Container>\n          <RecordContainer>\n            {connectionState === connectionTypes.connnected && (\n              <TwilioVideoLocalView\n                applyZOrder={true}\n                enabled={recordType === RecordType.Video}\n                style={{ flex: 1 }}\n              />\n            )}\n            {recordType === RecordType.Audio && (\n              <RecordAudio location={location} />\n            )}\n            <Logo />\n            <OrganizationName>\n              {formatMessage(messages.escort, {\n                organizationName: organization.name,\n              })}\n            </OrganizationName>\n            {showTimerExpired && <TimerExpiredBanner />}\n            <SharingText>\n              {formatMessage(\n                recordType === RecordType.Audio\n                  ? messages.sharingAudio\n                  : messages.shareVideo,\n              )}\n            </SharingText>\n            {recordType === RecordType.Audio && <AudioStream />}\n            {recordType === RecordType.Video && <RecordDot />}\n            {shouldShowPanicInfo && <PanicInfoContainer />}\n            {recordType === RecordType.Video && (\n              <CameraFlipButton\n                onPress={onFlipButtonClick}\n                image={images.icFlip()}\n              />\n            )}\n          </RecordContainer>\n          <MiddleControls>\n            <SafeButton\n              onPress={\n                isPanicMode ? showExitPanicModalAction : showSafeModalAction\n              }\n            >\n              <SafeButtonText>\n                {formatMessage(\n                  isPanicMode ? messages.endPanic : messages.imSafe,\n                )}\n              </SafeButtonText>\n            </SafeButton>\n            <PanicButton\n              isPanicMode={isPanicMode}\n              onPress={showPanicInfoAction}\n              onFill={handleEnterPanicModeAction}\n              text={formatMessage(messages.panic)}\n            />\n          </MiddleControls>\n          <BottomControls>\n            <PhoneButton\n              onPress={showCallModalAction}\n              image={images.icPhoneCall()}\n            />\n            <ToggleContainer\n              disabled={isPanicMode}\n              recordType={recordType}\n              onPress={() => toggleRecordTypeAction(incidentEscort)}\n            >\n              <ToggleImageContainer>\n                <ToggleImage\n                  source={\n                    recordType === RecordType.Audio\n                      ? images.icMicrophone()\n                      : images.icCamera()\n                  }\n                />\n              </ToggleImageContainer>\n              <ToggleText>\n                {recordType === RecordType.Audio\n                  ? formatMessage(messages.shareVideo)\n                  : formatMessage(messages.audioOnly)}\n              </ToggleText>\n            </ToggleContainer>\n            <ChatContainer>\n              <ChatButton\n                onPress={showChatModalAction}\n                image={images.icChat()}\n              />\n              {!isEmpty(badges) && <StyledBadge length={badges.length} />}\n            </ChatContainer>\n          </BottomControls>\n        </Container>\n        <CallModal\n          isVisible={shouldShowCallModal}\n          hideModal={hideCallModalAction}\n          organization={organization}\n        />\n        <SafeModal\n          isVisible={shouldShowSafeModal}\n          hideModal={hideSafeModalAction}\n          onContinue={handleSafeModalContinue}\n          requestingImSafe={requestingImSafe}\n        />\n        {location && (\n          <ChatModal\n            isVisible={shouldShowChatModal}\n            hideModal={hideChatModalAction}\n            organization={organization}\n            messages={chatMessages}\n            onMessageSent={handleSendMessage}\n            onShow={clearBadges}\n            onHide={clearBadges}\n          />\n        )}\n        <ExitPanicModal\n          isVisible={shouldShowExitPanicModal}\n          hideModal={hideExitPanicModalAction}\n          onConfirm={handleExitPanicModeAction}\n        />\n\n        <TwilioVideo\n          ref={twilioVideoRef}\n          onRoomDidConnect={handleRoomDidConnect}\n          onRoomDidDisconnect={handleRoomDisconnect}\n          onRoomDidFailToConnect={handleRoomConnectionFail}\n\n        />\n\n        {/* {recordType == RecordType.Video ?\n          <TwilioVideo\n            ref={twilioVideoRef}\n            onRoomDidConnect={handleRoomDidConnect}\n            onRoomDidDisconnect={handleRoomDisconnect}\n            onRoomDidFailToConnect={handleRoomConnectionFail}\n          /> :\n          null\n        } */}\n      </SafeAreaContainer>\n      {isPanicMode && <PanicOverlay />}\n    </>\n  );\n};\n\nexport default EscortScreen;\n\n"],"mappings":"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","ignoreList":[]}