{"version":3,"names":["_assets","require","_components","_actions","_screens","_interopRequireDefault","_incidentCodeCore","_react","_interopRequireWildcard","_reactIntl","_reactNative","_reactNativeKeepAwake","_reactNavigation","_hooks","_backgroundGeolocation","_reactNativeBatteryOptimizationCheck","_location","_actions2","_CountdownClock","_messages","_ProcedureChecklist","_selectors","_SetTimerModal","_styles","_navigation","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","EscortScreen","navigation","isFocused","passedProcedure","getParam","organization","passedIncidentId","isSafetyTimer","formatMessage","useIntl","isKeyboardShow","setIsKeyboardShow","useState","timerIsRunning","setTimerIsRunning","procedureParam","setProcedureParam","incidentId","setIncidentId","isBatteryUsageDisable","setBatteryUsageDisable","incident","useSelector","makeSelectIncident","procedure","makeSelectProcedure","actions","makeSelectProcedureActions","timer","makeSelectProcedureTimer","isLoading","makeSelectIsLoading","enableStart","makeSelectEnableStartButton","displaySetTimerModal","makeSelectDisplaySetTimerModal","isUserDefined","makeSelectIsUserDefinedTimer","actionsComplete","makeSelectFinalActionCompleted","shouldShowCallModal","makeSelectShouldShowCallModal","shouldShowSafeModal","makeSelectShouldShowSafeModal","isPanicMode","makeSelectIsPanicMode","requestingImSafe","makeSelectRequestingImSafe","shouldShowPanicInfo","makeSelectShouldShowPanicInfo","isWarningActive","makeSelectIsWarningActive","requestingEscort","makeSelectIsRequestingEscort","countdownIsActive","makeSelectCountdownIsActive","error","makeSelectError","errorMessage","makeSelectErrorMessage","typeSafetyTimer","makeSelectSafetyTimer","getProcedureAction","useAction","getProcedureRequest","showModalAction","showSetTimerModal","completeProcedureActionAction","completeProcedureAction","showCallModalAction","showCallModal","hideCallModalAction","hideCallModal","showSafeModalAction","showSafeModal","hideSafeModalAction","hideSafeModal","showPanicInfoAction","showPanicInfo","enterPanicModeAction","enterPanicMode","imSafeAction","imSafeRequest","triggerCountdownWarning","startCountdownWarning","clearCountdownWarning","cancelCountdownWarning","startPassiveEscort","startPassiveEscortRequest","requestVirtualEscort","startVirtualEscortRequest","clearSafe","clearAreYouSafe","logAction","logEscortAction","errorCleanup","clearEscortErrorAction","setLocation","UpdateLocationData","clearLocation","ClearLocationData","clearSelectedProcedure","clearProcedure","setSafetyTimerAction","setSafetyTimer","panicModeRef","useRef","useEffect","setIncidentToLocalState","retrieveProcedure","id","autoStartCountdown","console","log","startCountdown","finishCountdown","completeCountdown","KeepAwake","deactivate","safetyTimer","registerKeyboardListener","keyboarDidShowListener","Keyboard","addListener","keyboarDidHideListener","componentWillUnmount","remove","startGeolocation","startBackgroundGeolocationToEscort","checkBattery","checkBatteryOptimizationAndroid","AppState","addEventListener","handleChange","removeEventListener","newState","Platform","OS","BatteryOptEnabled","then","isEnabled","Alert","alert","text","onPress","style","RequestDisableOptimization","handleEnterPanicModeAction","useCallback","current","handleSafeModalContinue","comment","undefined","stopBackgroundGeolocation","onHideSafeModal","onBack","blockExit","useBackButton","goBack","blockNavigate","navigate","Screens","Home","Escort","EscortType","backToPrevious","setTimeout","onClockPress","onWarning","activate","onCountdownExpired","geoPosition","getCachedFinePosition","NavigatorService","onActionChecked","name","complete","action","PassiveEscortAction","ProcedureAction","actionName","createElement","LoadingIndicator","preCountdown","Fragment","InfoRow","InfoText","messages","safetyPreCountdown","View","marginTop","ButtonRow","ScreenActionButton","disabled","timerStart","onCancel","activeCountdown","SafetyButtonRow","SafetyButton","safetyBtn","PressPanicInfo","BottomControls","PhoneButton","image","images","icPhoneCall","PanicButton","onFill","panic","expiredTimerRequestingEscort","RequestEscortLoading","RequestEscortTitle","panicRequestEscortTitle","requestEscortTitle","RequestEscortMessage","panicRequestEscortMessage","requestEscortMessage","StatusBar","barStyle","backgroundColor","SafeAreaContainer","Container","isKeyboard","Header","title","safetyTitle","checklistTitle","SubHeader","subheader","ErrorRow","ErrorMessage","countdown","running","onPressed","onFinish","onCountdownWarning","warningTriggered","CallModal","isVisible","hideModal","SafeModal","onContinue","safeModalTitle","info","safeModalInfo","placeholder","safeModalCommentPlaceholder","safeModalAlert","cancel","safeModalCancel","confirm","safeModalContinue","inputRequired","PanicOverlay","_default","exports","withNavigationFocus"],"sources":["index.tsx"],"sourcesContent":["/* eslint-disable simple-import-sort/sort */\nimport { images } from '../../../../../assets';\nimport {\n  CallModal,\n  Header,\n  LoadingIndicator,\n  SafeAreaContainer,\n  SafeModal,\n  ScreenActionButton,\n  PanicButton,\n} from '../../../../../components';\nimport { ClearLocationData, UpdateLocationData } from '../../../../../containers/app/actions';\nimport Screens from '../../../../../containers/providers/RoutesProvider/screens';\nimport {\n  Id,\n  Organization,\n  OrganizationProcedure,\n  PassiveEscortAction,\n} from 'incident-code-core';\nimport React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Keyboard, StatusBar, View, Platform, Alert, AppState } from 'react-native';\nimport KeepAwake from 'react-native-keep-awake';\nimport { ScreenProps } from 'react-native-screens';\nimport { withNavigationFocus } from 'react-navigation';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport { useAction, useBackButton, useSelector } from '../../../../../utils/hooks';\nimport {\n  startBackgroundGeolocationToEscort,\n  stopBackgroundGeolocation\n} from '../../../../../utils/location/backgroundGeolocation';\n\nimport { BatteryOptEnabled, RequestDisableOptimization } from \"react-native-battery-optimization-check\";\n\n// const { BatteryOptimizationModule } from ReactNative.NativeModules;\n\nimport {\n  getCachedFinePosition\n} from '../../../../../utils/location';\n\nimport {\n  cancelCountdownWarning,\n  clearAreYouSafe,\n  clearEscortErrorAction,\n  clearProcedure,\n  completeProcedureAction,\n  enterPanicMode,\n  getProcedureRequest,\n  hideCallModal,\n  hideSafeModal,\n  imSafeRequest,\n  logEscortAction,\n  showCallModal,\n  showPanicInfo,\n  showSafeModal,\n  showSetTimerModal,\n  startCountdownWarning,\n  startPassiveEscortRequest,\n  startVirtualEscortRequest,\n  setSafetyTimer,\n} from './actions';\nimport CountDownClock from './CountdownClock';\nimport messages from './messages';\nimport ProcedureChecklist from './ProcedureChecklist';\nimport {\n  makeSelectCountdownIsActive,\n  makeSelectDisplaySetTimerModal,\n  makeSelectEnableStartButton,\n  makeSelectError,\n  makeSelectErrorMessage,\n  makeSelectFinalActionCompleted,\n  makeSelectIncident,\n  makeSelectIsLoading,\n  makeSelectIsPanicMode,\n  makeSelectIsRequestingEscort,\n  makeSelectIsUserDefinedTimer,\n  makeSelectIsWarningActive,\n  makeSelectProcedure,\n  makeSelectProcedureActions,\n  makeSelectProcedureTimer,\n  makeSelectRequestingImSafe,\n  makeSelectSafetyTimer,\n  makeSelectShouldShowCallModal,\n  makeSelectShouldShowPanicInfo,\n  makeSelectShouldShowSafeModal,\n} from './selectors';\nimport SetTimerModal from './SetTimerModal';\nimport {\n  BottomControls,\n  ButtonRow,\n  Container,\n  ErrorMessage,\n  ErrorRow,\n  InfoRow,\n  InfoText,\n  PanicOverlay,\n  PhoneButton,\n  PressPanicInfo,\n  RequestEscortLoading,\n  RequestEscortMessage,\n  RequestEscortTitle,\n  SafetyButton,\n  SafetyButtonRow,\n  SubHeader,\n} from './styles';\nimport NavigatorService from '../../../../../utils/navigation';\n\ninterface Params {\n  procedure?: OrganizationProcedure;\n  organization?: Organization;\n  id?: Id;\n  isSafetyTimer?: boolean;\n}\ninterface Props extends NavigationStackScreenProps<Params, ScreenProps> {\n  isFocused: boolean;\n}\n\nconst EscortScreen: FC<Props> = ({ navigation, isFocused }) => {\n\n  const passedProcedure = navigation.getParam('procedure');\n  const organization = navigation.getParam('organization');\n  const passedIncidentId = navigation.getParam('id');\n  const isSafetyTimer = navigation.getParam('isSafetyTimer');\n\n  const { formatMessage } = useIntl();\n  const [isKeyboardShow, setIsKeyboardShow] = useState(false);\n  const [timerIsRunning, setTimerIsRunning] = useState(false);\n  const [procedureParam, setProcedureParam] = useState(passedProcedure);\n  const [incidentId, setIncidentId] = useState(passedIncidentId);\n\n  // const [isCheckedBatteryUsage, setCheckBatteryUsage] = useState(false);\n  const [isBatteryUsageDisable, setBatteryUsageDisable] = useState(1);\n\n  const incident = useSelector(makeSelectIncident());\n  const procedure = useSelector(makeSelectProcedure());\n  const actions = useSelector(makeSelectProcedureActions());\n  const timer = useSelector(makeSelectProcedureTimer());\n  // const timer = 60;\n  const isLoading = useSelector(makeSelectIsLoading());\n  const enableStart = useSelector(makeSelectEnableStartButton());\n  const displaySetTimerModal = useSelector(makeSelectDisplaySetTimerModal());\n  const isUserDefined = useSelector(makeSelectIsUserDefinedTimer());\n  const actionsComplete = useSelector(makeSelectFinalActionCompleted());\n  const shouldShowCallModal = useSelector(makeSelectShouldShowCallModal());\n  const shouldShowSafeModal = useSelector(makeSelectShouldShowSafeModal());\n  const isPanicMode = useSelector(makeSelectIsPanicMode());\n  const requestingImSafe = useSelector(makeSelectRequestingImSafe());\n  const shouldShowPanicInfo = useSelector(makeSelectShouldShowPanicInfo());\n  const isWarningActive = useSelector(makeSelectIsWarningActive());\n  const requestingEscort = useSelector(makeSelectIsRequestingEscort());\n  const countdownIsActive = useSelector(makeSelectCountdownIsActive());\n  const error = useSelector(makeSelectError());\n  const errorMessage = useSelector(makeSelectErrorMessage());\n  const typeSafetyTimer = useSelector(makeSelectSafetyTimer());\n\n  const getProcedureAction = useAction(getProcedureRequest);\n  const showModalAction = useAction(showSetTimerModal);\n  const completeProcedureActionAction = useAction(completeProcedureAction);\n  const showCallModalAction = useAction(showCallModal);\n  const hideCallModalAction = useAction(hideCallModal);\n  const showSafeModalAction = useAction(showSafeModal);\n  const hideSafeModalAction = useAction(hideSafeModal);\n  const showPanicInfoAction = useAction(showPanicInfo);\n  const enterPanicModeAction = useAction(enterPanicMode);\n  const imSafeAction = useAction(imSafeRequest);\n  const triggerCountdownWarning = useAction(startCountdownWarning);\n  const clearCountdownWarning = useAction(cancelCountdownWarning);\n  const startPassiveEscort = useAction(startPassiveEscortRequest);\n  const requestVirtualEscort = useAction(startVirtualEscortRequest);\n  const clearSafe = useAction(clearAreYouSafe);\n  const logAction = useAction(logEscortAction);\n  const errorCleanup = useAction(clearEscortErrorAction);\n  const setLocation = useAction(UpdateLocationData);\n  const clearLocation = useAction(ClearLocationData);\n  const clearSelectedProcedure = useAction(clearProcedure);\n  const setSafetyTimerAction = useAction(setSafetyTimer);\n\n  const panicModeRef = useRef(false);\n\n  // console.log(\"passedIncidentId===>\", passedIncidentId)\n\n  useEffect(\n    function setIncidentToLocalState() {\n      // console.log(\"passedIncidentId->\", passedIncidentId)\n      setIncidentId(passedIncidentId);\n    },\n    [passedIncidentId],\n  );\n\n  useEffect(\n    function retrieveProcedure() {\n      if (\n        (!procedure ||\n          (procedureParam && procedureParam?.id !== procedure?.id)) &&\n        !isSafetyTimer\n        // This gets triggered before state typeSafetyTimer gets set\n      ) {\n        getProcedureAction(procedureParam?.id);\n      }\n    },\n    [isFocused],\n  );\n\n  useEffect(\n    function autoStartCountdown() {\n      if (isFocused && incidentId && procedure) {\n        console.log(\"countdown start\")\n        startCountdown();\n      }\n    },\n    [isFocused, procedure],\n  );\n\n  useEffect(\n    function finishCountdown() {\n      if (actionsComplete) {\n        completeCountdown();\n      }\n    },\n    [actionsComplete],\n  );\n\n  const completeCountdown = () => {\n    console.log(\"complete count down\")\n    setTimerIsRunning(false);\n    if (isWarningActive) {\n      clearCountdownWarning();\n    }\n    showSafeModalAction();\n    KeepAwake.deactivate();\n  };\n\n  useEffect(\n    function safetyTimer() {\n      if (isSafetyTimer) {\n        setSafetyTimerAction(organization);\n      }\n      // console.log(\"-showModalAction--->\",showModalAction)\n    },\n    [isSafetyTimer],\n  );\n\n  useEffect(function registerKeyboardListener() {\n    const keyboarDidShowListener = Keyboard.addListener('keyboardDidShow', () =>\n      setIsKeyboardShow(true),\n    );\n    const keyboarDidHideListener = Keyboard.addListener('keyboardDidHide', () =>\n      setIsKeyboardShow(false),\n    );\n    // // startBackgroundTask()\n    return function componentWillUnmount() {\n      keyboarDidShowListener.remove();\n      keyboarDidHideListener.remove();\n      KeepAwake.deactivate();\n    };\n  }, []);\n\n  useEffect(function startGeolocation() {\n    if (incident?.id && setLocation) {\n      startBackgroundGeolocationToEscort(incident.id, setLocation);\n    }\n  },\n    [incident, setLocation],\n  );\n\n\n  useEffect(function checkBattery() {\n    checkBatteryOptimizationAndroid()\n  },\n\n    [isFocused],\n  );\n\n  useEffect(() => {\n    AppState.addEventListener('change', handleChange);\n\n    return () => {\n      AppState.removeEventListener('change', handleChange);\n    }\n  }, []);\n\n  const handleChange = (newState: string) => {\n    // console.log(\"-newState->>>>>>\", newState)\n    if (newState === \"active\") {\n      checkBatteryOptimizationAndroid()\n    }\n  }\n\n  // check battery optimization \n  const checkBatteryOptimizationAndroid = () => {\n    if (Platform.OS == 'android') {\n      BatteryOptEnabled().then((isEnabled: boolean) => {\n        console.log(\"checkBattery==>\", isEnabled)\n        if (isEnabled) {\n          // RNDisableBatteryOptimizationsAndroid.openBatteryModal();\n          console.log(\"Is battery optimization enabled==-->\", isEnabled)\n          // BatteryOptimizationModule.openBatteryModal();\n          setBatteryUsageDisable(1)\n          Alert.alert(\n            'Incident Go',\n            'To ensure uninterrupted safety timer capabilities, please ALLOW IncidentGO unrestricted battery usage. Once the safety timer is complete IncidentGO will use minimal battery.',\n            [\n              {\n                text: 'Cancel',\n                onPress: () => console.log(\"back\"),\n                style: 'cancel',\n              },\n              {\n                text: 'OK', onPress: () => {\n                  setBatteryUsageDisable(2)\n                  RequestDisableOptimization()\n\n                }\n              },\n            ]\n          );\n        }\n        else {\n          setBatteryUsageDisable(2)\n        }\n      });\n    }\n  }\n\n  const handleEnterPanicModeAction = useCallback(() => {\n    setTimerIsRunning(false);\n    enterPanicModeAction(organization);\n    panicModeRef.current = true;\n  }, [enterPanicModeAction, organization]);\n\n  const handleSafeModalContinue = useCallback((comment: string | undefined) => {\n\n    imSafeAction({ comment });\n    setProcedureParam(undefined);\n    setIncidentId(undefined);\n    setTimerIsRunning(false);\n    stopBackgroundGeolocation(clearLocation);\n    if (isWarningActive) {\n      clearCountdownWarning();\n    }\n    if (error) {\n      errorCleanup();\n    }\n  }, []);\n\n  const onHideSafeModal = useCallback(() => {\n    clearSafe();\n    hideSafeModalAction();\n    setTimerIsRunning(true);\n  }, []);\n\n  const onBack = () => {\n    let blockExit = false;\n    if (requestingEscort) {\n      blockExit = true;\n    }\n    if (timerIsRunning || incidentId || error) {\n      setTimerIsRunning(false);\n      showSafeModalAction();\n      blockExit = true;\n    }\n    if (error) {\n      errorCleanup();\n    }\n    if (!blockExit) {\n      clearSelectedProcedure();\n    }\n    return blockExit;\n  };\n  // hardware back\n  useBackButton(onBack);\n  // button press back\n  const goBack = async () => {\n    const blockNavigate = onBack();\n\n    if (!blockNavigate) {\n      if (typeSafetyTimer) {\n        navigation.navigate(Screens.Home.Escort.EscortType);\n      }\n      navigation.goBack();\n    }\n  };\n\n  const backToPrevious = () => {\n    navigation.goBack();\n    setTimeout(() => {\n      navigation.goBack();\n    }, 1000);\n  }\n\n  const onClockPress = () => {\n    console.log(\"onClockPress\", isUserDefined)\n    console.log(\"!timerIsRunning\", !timerIsRunning)\n    if (isUserDefined && !timerIsRunning) {\n      console.log(\"model open\")\n      showModalAction();\n    }\n  };\n\n  // countdown expire warning\n  const onWarning = () => {\n    // console.log(\"on warning\")\n    triggerCountdownWarning();\n  };\n\n  const startCountdown = () => {\n    console.log(\"startCountdown\")\n    console.log(\"startPassiveEscort Incident ==>\", incidentId)\n    startPassiveEscort({\n      organization,\n      id: incidentId,\n      safetyTimer: typeSafetyTimer,\n    });\n    startBackgroundGeolocationToEscort(incidentId, setLocation);\n    setTimerIsRunning(true);\n    KeepAwake.activate();\n  };\n\n  const onCountdownExpired = async () => {\n    // console.log(\"-onCountdownExpired---->\")\n    setTimerIsRunning(false);\n    // console.log(\"-timer false---->\")\n    const geoPosition = await getCachedFinePosition();\n    // console.log(\"-geo postion---->\", geoPosition)\n    // console.log(\"-organizatio---->\", JSON.stringify(organization))\n    if (geoPosition) {\n      requestVirtualEscort(organization);\n    } else {\n      NavigatorService.navigate(Screens.Home.Escort.EscortType);\n    }\n  };\n\n  const onActionChecked = (\n    id: string | undefined,\n    name: string,\n    complete?: boolean,\n  ) => {\n    completeProcedureActionAction(id);\n    logAction({\n      id: incident?.id,\n      action: PassiveEscortAction.ProcedureAction,\n      actionName: name + (complete ? ' unchecked' : ' finished'),\n    });\n  };\n\n  if (isLoading) return <LoadingIndicator />;\n\n  const preCountdown = () => {\n    return (\n      <>\n        <InfoRow>\n          <InfoText>\n            {formatMessage(\n              typeSafetyTimer\n                ? messages.safetyPreCountdown\n                : messages.preCountdown,\n            )}\n          </InfoText>\n        </InfoRow>\n        <View style={{ marginTop: 'auto' }} />\n        <ButtonRow>\n          <ScreenActionButton\n            disabled={!enableStart}\n            text={formatMessage(messages.timerStart)}\n            onPress={startCountdown}\n            onCancel={goBack}\n          />\n        </ButtonRow>\n      </>\n    );\n  };\n\n  const activeCountdown = () => {\n    return (\n      <>\n        {typeSafetyTimer ? (\n          <SafetyButtonRow>\n            <SafetyButton\n              text={formatMessage(messages.safetyBtn)}\n              onPress={completeCountdown}\n            />\n          </SafetyButtonRow>\n        ) : (\n          <ProcedureChecklist\n            onActionChecked={onActionChecked}\n            actions={actions}\n          />\n        )}\n\n        <View style={{ marginTop: 'auto' }} />\n        {shouldShowPanicInfo && <PressPanicInfo />}\n        <BottomControls>\n          <PhoneButton\n            onPress={showCallModalAction}\n            image={images.icPhoneCall()}\n          />\n          <PanicButton\n            isPanicMode={isPanicMode}\n            onPress={showPanicInfoAction}\n            onFill={handleEnterPanicModeAction}\n            text={formatMessage(messages.panic)}\n          />\n        </BottomControls>\n      </>\n    );\n  };\n\n  const expiredTimerRequestingEscort = () => {\n    return (\n      <>\n        <RequestEscortLoading />\n        <RequestEscortTitle>\n          {isPanicMode\n            ? formatMessage(messages.panicRequestEscortTitle)\n            : formatMessage(messages.requestEscortTitle)}\n        </RequestEscortTitle>\n        <RequestEscortMessage>\n          {isPanicMode\n            ? formatMessage(messages.panicRequestEscortMessage)\n            : formatMessage(messages.requestEscortMessage)}\n        </RequestEscortMessage>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <Container isKeyboard={isKeyboardShow}>\n          <Header\n            title={\n              typeSafetyTimer\n                ? formatMessage(messages.safetyTitle)\n                : formatMessage(messages.checklistTitle)\n            }\n          />\n          <InfoRow>\n            {!typeSafetyTimer && (\n              <SubHeader>\n                {formatMessage(messages.subheader, {\n                  procedure: procedure?.name,\n                })}\n              </SubHeader>\n            )}\n          </InfoRow>\n          {error && (\n            <ErrorRow>\n              <ErrorMessage>{errorMessage}</ErrorMessage>\n            </ErrorRow>\n          )}\n          {requestingEscort ? (\n            expiredTimerRequestingEscort()\n          ) : (\n            <>\n              {/* {console.log(\"timer------------------>\",timer)} */}\n              {/* {console.log(\"timer------------------>\",timer)}\n               */}\n              {/* {console.log(\"timerIsRunning------------------>\",timerIsRunning)}\n               {console.log(\"countdownIsActive------------------>\",countdownIsActive)} */}\n              <CountDownClock\n                countdown={timer}\n                running={timerIsRunning && countdownIsActive}\n                onPressed={onClockPress}\n                onFinish={onCountdownExpired}\n                onCountdownWarning={onWarning}\n                warningTriggered={isWarningActive}\n              />\n              {countdownIsActive ? activeCountdown() : preCountdown()}\n              {/* {displaySetTimerModal ? <SetTimerModal /> : <></>} */}\n              {Platform.OS == 'android' ?\n                isBatteryUsageDisable == 2 ? displaySetTimerModal ? <SetTimerModal /> : <></> : <></> :\n                displaySetTimerModal ? <SetTimerModal /> : <></>}\n            </>\n          )}\n        </Container>\n        <CallModal\n          isVisible={shouldShowCallModal}\n          hideModal={hideCallModalAction}\n          organization={organization}\n        />\n        <SafeModal\n          isVisible={shouldShowSafeModal}\n          hideModal={onHideSafeModal}\n          onContinue={handleSafeModalContinue}\n          requestingImSafe={requestingImSafe}\n          title={formatMessage(messages.safeModalTitle)}\n          info={formatMessage(messages.safeModalInfo)}\n          placeholder={formatMessage(messages.safeModalCommentPlaceholder)}\n          alert={formatMessage(messages.safeModalAlert)}\n          cancel={formatMessage(messages.safeModalCancel)}\n          confirm={formatMessage(messages.safeModalContinue)}\n          inputRequired\n        />\n      </SafeAreaContainer>\n      {isPanicMode && <PanicOverlay />}\n    </>\n  );\n};\n\nexport default withNavigationFocus(EscortScreen);\n\n"],"mappings":"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","ignoreList":[]}