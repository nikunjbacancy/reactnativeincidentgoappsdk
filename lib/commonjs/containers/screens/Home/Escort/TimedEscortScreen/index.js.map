{"version":3,"names":["_assets","require","_components","_screens","_interopRequireDefault","_isEmpty","_react","_interopRequireWildcard","_reactIntl","_reactNative","_reactNavigation","_device","_hooks","_navigation","_actions","_messages","_selectors","_styles","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","EscortScreen","isFocused","navigation","isSafetyTimer","getParam","formatMessage","useIntl","isKeyboardShow","setIsKeyboardShow","useState","checkedOrg","setCheckedOrg","organizations","useSelector","makeSelectIntersectOrganizations","organization","makeSelectSelectedOrganization","procedures","makeSelectOrganizationProcedures","procedure","makeSelectSelectedProcedure","nextButtonEnabled","makeSelectEnableNextButton","error","makeSelectError","errorMessage","makeSelectErrorMessage","requestingOrganizations","makeSelectRequestingOrganizations","console","log","toggleSelectOrganizationAction","useAction","toggleSelectOrganization","toggleSelectProcedureAction","toggleSelectProcedure","getIntersectOrganizationsAction","getIntersectOrganizationsRequest","getOrganizationProceduresAction","getOrganizationProceduresRequest","goToSelectProcedure","goToSafetyTimerCountdown","goToCountdownAction","NavigatorService","navigate","Screens","Home","Escort","Countdown","procedureSelectionBack","length","EscortType","useEffect","subscriptions","Keyboard","addListener","forEach","s","_s$remove","remove","id","call911","useCallback","makeCall","createElement","LoadingIndicator","renderTimedHeader","Fragment","Header","title","messages","timedTitle","InfoRow","InfoText","timedInfo","ErrorRow","ErrorMessage","renderSafetyHeader","safetyTitle","safetyInfo","renderItem","itemInfo","org","item","ItemRow","onPress","ItemCheckImage","source","images","icCheck","ItemText","name","renderOrganizations","isEmpty","Call911Container","Call911Title","safetyCall911Title","timedCall911Title","Call911Info","call911Info","Call911Button","text","List","keyExtractor","_org$id","toString","data","View","style","marginTop","NextButtonRow","ScreenActionButton","disabled","next","selectProcedure","onCancel","back","renderProcedureSelection","renderedProcedures","filter","p","procedureSelection","noProcedures","ProcedureList","proc","_proc$id","extraData","renderProcedure","proced","isSelected","StatusBar","barStyle","backgroundColor","SafeAreaContainer","Container","isKeyboard","_default","exports","withNavigationFocus"],"sources":["index.tsx"],"sourcesContent":["import { images } from '../../../../../assets';\nimport {\n  Header,\n  LoadingIndicator,\n  SafeAreaContainer,\n  ScreenActionButton,\n} from '../../../../../components';\nimport Screens from '../../../../../containers/providers/RoutesProvider/screens';\nimport isEmpty from 'lodash/isEmpty';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Keyboard, ListRenderItemInfo, StatusBar, View, EmitterSubscription } from 'react-native';\nimport { ScreenProps } from 'react-native-screens';\nimport { withNavigationFocus } from 'react-navigation';\nimport { NavigationStackScreenProps } from 'react-navigation-stack';\nimport { OrganizationSelection, ProcedureSelection } from 'types';\nimport { makeCall } from '../../../../../utils/device';\nimport { useAction, useSelector } from '../../../../../utils/hooks';\nimport NavigatorService from '../../../../../utils/navigation';\n\nimport {\n  getIntersectOrganizationsRequest,\n  getOrganizationProceduresRequest,\n  toggleSelectOrganization,\n  toggleSelectProcedure,\n} from './actions';\nimport messages from './messages';\nimport {\n  makeSelectEnableNextButton,\n  makeSelectError,\n  makeSelectErrorMessage,\n  makeSelectIntersectOrganizations,\n  makeSelectOrganizationProcedures,\n  makeSelectRequestingOrganizations,\n  makeSelectSelectedOrganization,\n  makeSelectSelectedProcedure,\n} from './selectors';\nimport {\n  Call911Button,\n  Call911Container,\n  Call911Info,\n  Call911Title,\n  Container,\n  ErrorMessage,\n  ErrorRow,\n  InfoRow,\n  InfoText,\n  ItemCheckImage,\n  ItemRow,\n  ItemText,\n  List,\n  NextButtonRow,\n  ProcedureList,\n} from './styles';\n\ninterface Params {\n  safetyTimer: boolean;\n}\n\ninterface Props extends NavigationStackScreenProps<Params, ScreenProps> {\n  isFocused: boolean;\n}\n\nconst EscortScreen: FC<Props> = ({ isFocused, navigation }) => {\n  const isSafetyTimer = navigation.getParam('safetyTimer');\n  const { formatMessage } = useIntl();\n\n  const [isKeyboardShow, setIsKeyboardShow] = useState(false);\n  const [checkedOrg, setCheckedOrg] = useState<any>(null);\n\n  const organizations = useSelector(makeSelectIntersectOrganizations());\n\n  const organization = useSelector(makeSelectSelectedOrganization());\n  const procedures = useSelector(makeSelectOrganizationProcedures());\n  const procedure = useSelector(makeSelectSelectedProcedure());\n\n  const nextButtonEnabled = useSelector(makeSelectEnableNextButton());\n  const error = useSelector(makeSelectError());\n  const errorMessage = useSelector(makeSelectErrorMessage());\n  const requestingOrganizations = useSelector(\n    makeSelectRequestingOrganizations(),\n  );\n  console.log(\"=requestingOrganizations===>\",requestingOrganizations)\n  const toggleSelectOrganizationAction = useAction(toggleSelectOrganization);\n  const toggleSelectProcedureAction = useAction(toggleSelectProcedure);\n  const getIntersectOrganizationsAction = useAction(\n    getIntersectOrganizationsRequest,\n  );\n\n  const getOrganizationProceduresAction = useAction(\n    getOrganizationProceduresRequest,\n  );\n\n  const goToSelectProcedure = () => {\n    if (checkedOrg) {\n      toggleSelectOrganizationAction(checkedOrg);\n      if (!isSafetyTimer) {\n        getOrganizationProceduresAction(checkedOrg);\n      } else {\n        goToSafetyTimerCountdown();\n      }\n    }\n  };\n\n  const goToCountdownAction = () => {\n    NavigatorService.navigate(Screens.Home.Escort.Countdown, {\n      procedure,\n      organization,\n    });\n  };\n\n  const goToSafetyTimerCountdown = () => {\n    NavigatorService.navigate(Screens.Home.Escort.Countdown, {\n      procedure,\n      organization,\n      isSafetyTimer,\n    });\n  };\n\n  const procedureSelectionBack = () => {\n    toggleSelectProcedureAction(null);\n    toggleSelectOrganizationAction(null);\n    if (organizations && organizations.length <= 1) {\n      NavigatorService.navigate(Screens.Home.Escort.EscortType);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"organization====>\",organization)\n    console.log(\"isSafetyTimer====>\",isSafetyTimer)\n    if (organization && isSafetyTimer) {\n      goToSafetyTimerCountdown();\n    }\n  }, [organization, isSafetyTimer]);\n\n  useEffect(() => {\n    if (isFocused) {\n      getIntersectOrganizationsAction();\n      let subscriptions: EmitterSubscription[];\n      subscriptions = [\n        Keyboard.addListener(\n          'keyboardDidShow',\n          () => setIsKeyboardShow(true),\n        ),\n        Keyboard.addListener(\n          'keyboardDidHide',\n          () => setIsKeyboardShow(false),\n        )\n      ];\n  \n      return () => {\n        subscriptions.forEach((s) => s?.remove?.());\n      }\n    }\n    else\n    {\n      return () => {}\n    }\n\n  }, [isFocused]);\n\n  useEffect(() => {\n    if (organizations?.length === 1) {\n      const { id } = organizations[0];\n      if (id !== checkedOrg) {\n        setCheckedOrg(id);\n        toggleSelectOrganizationAction(id);\n        if (!isSafetyTimer) {\n          getOrganizationProceduresAction(id);\n        }\n      }\n    }\n  }, [organizations?.length]);\n\n  const call911 = useCallback(() => makeCall('911'), []);\n\n  if (requestingOrganizations) return <LoadingIndicator />;\n\n  const renderTimedHeader = () => (\n    <>\n      <Header title={formatMessage(messages.timedTitle)} />\n      <InfoRow>\n        <InfoText>{formatMessage(messages.timedInfo)}</InfoText>\n      </InfoRow>\n      {error && (\n        <ErrorRow>\n          <ErrorMessage>{errorMessage}</ErrorMessage>\n        </ErrorRow>\n      )}\n    </>\n  );\n  const renderSafetyHeader = () => (\n    <>\n      <Header title={formatMessage(messages.safetyTitle)} />\n      <InfoRow>\n        <InfoText>{formatMessage(messages.safetyInfo)}</InfoText>\n      </InfoRow>\n      {error && (\n        <ErrorRow>\n          <ErrorMessage>{errorMessage}</ErrorMessage>\n        </ErrorRow>\n      )}\n    </>\n  );\n\n  const renderItem = (itemInfo: ListRenderItemInfo<OrganizationSelection>) => {\n    const org = itemInfo.item;\n\n    return (\n      <ItemRow onPress={() => setCheckedOrg(org.id)}>\n        <>\n          {org.id === checkedOrg && (\n            <ItemCheckImage source={images.icCheck()} />\n          )}\n          <ItemText>{`${org.name}`}</ItemText>\n        </>\n      </ItemRow>\n    );\n  };\n\n  const renderOrganizations = () => {\n    console.log(\"organizations=>\",organizations)\n    if (isEmpty(organizations)) {\n      return (\n        <>\n          <Header\n            title={\n              isSafetyTimer\n                ? formatMessage(messages.safetyTitle)\n                : formatMessage(messages.timedTitle)\n            }\n          />\n          <Call911Container>\n            <Call911Title>\n              {isSafetyTimer\n                ? formatMessage(messages.safetyCall911Title)\n                : formatMessage(messages.timedCall911Title)}\n            </Call911Title>\n            <Call911Info>{formatMessage(messages.call911Info)}</Call911Info>\n            <Call911Button\n              text={formatMessage(messages.call911)}\n              onPress={call911}\n            />\n          </Call911Container>\n        </>\n      );\n    }\n    return (\n      <>\n        {isSafetyTimer ? renderSafetyHeader() : renderTimedHeader()}\n        <List\n          keyExtractor={(org: any) => org?.id?.toString() || ''}\n          data={organizations || []}\n          // extraData={organizations}\n          renderItem={renderItem}\n        />\n        <View style={{ marginTop: 'auto' }} />\n        <NextButtonRow>\n          <ScreenActionButton\n            disabled={!checkedOrg}\n            text={\n              isSafetyTimer\n                ? formatMessage(messages.next)\n                : formatMessage(messages.selectProcedure)\n            }\n            onPress={goToSelectProcedure}\n            onCancel={NavigatorService.back}\n          />\n        </NextButtonRow>\n      </>\n    );\n  };\n\n  // TODO: refactor renderHeader to work for both scenarios\n  const renderProcedureSelection = () => {\n    const renderedProcedures =\n      procedures?.filter(p => p.organization === organization?.id) || [];\n    return (\n      <>\n        <Header title={formatMessage(messages.timedTitle)} />\n        <InfoRow>\n          <InfoText>{formatMessage(messages.procedureSelection)}</InfoText>\n        </InfoRow>\n        {error && (\n          <ErrorRow>\n            <ErrorMessage>{errorMessage}</ErrorMessage>\n          </ErrorRow>\n        )}\n        {!renderedProcedures.length && (\n          <InfoRow>\n            <InfoText>{formatMessage(messages.noProcedures)}</InfoText>\n          </InfoRow>\n        )}\n        {procedures && (\n          <ProcedureList\n            keyExtractor={(proc: any) => proc.id?.toString() || ''}\n            data={renderedProcedures}\n            extraData={renderedProcedures}\n            renderItem={renderProcedure}\n          />\n        )}\n        <NextButtonRow>\n          <ScreenActionButton\n            disabled={!nextButtonEnabled}\n            text={formatMessage(messages.next)}\n            onPress={goToCountdownAction}\n            onCancel={procedureSelectionBack}\n          />\n        </NextButtonRow>\n      </>\n    );\n  };\n\n  const renderProcedure = (\n    itemInfo: ListRenderItemInfo<ProcedureSelection>,\n  ) => {\n    const proced = itemInfo.item;\n\n    return (\n      <ItemRow onPress={() => toggleSelectProcedureAction(proced.id)}>\n        <>\n          {proced.isSelected && <ItemCheckImage source={images.icCheck()} />}\n          <ItemText>{proced.name}</ItemText>\n        </>\n      </ItemRow>\n    );\n  };\n\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"white\" />\n      <SafeAreaContainer>\n        <Container isKeyboard={isKeyboardShow}>\n          {organization ? renderProcedureSelection() : renderOrganizations()}\n        </Container>\n      </SafeAreaContainer>\n    </>\n  );\n};\n\nexport default withNavigationFocus(EscortScreen);\n"],"mappings":"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","ignoreList":[]}