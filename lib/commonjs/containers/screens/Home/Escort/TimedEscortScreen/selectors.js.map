{"version":3,"names":["_find","_interopRequireDefault","require","_isEmpty","_some","_reselect","_reducer","e","__esModule","default","timedEscortScreenStateDomain","state","escortTimedEscortScreen","initialState","exports","makeSelectIntersectOrganizations","createSelector","organizations","makeSelectOrgGroups","organizationGroups","makeSelectSelectedOrganization","find","isSelected","makeSelectEnableContinueButton","error","isEmpty","some","makeSelectEnableNextButton","procedures","makeSelectRequestingOrganizations","requestingOrganizations","makeSelectError","makeSelectErrorMessage","errorMessage","makeSelectOrganizationProcedures","makeSelectSelectedProcedure","makeSelectSelectOrganizationScreenState","subState","_default"],"sources":["selectors.ts"],"sourcesContent":["/**\n *\n * SelectOrganizationScreen selectors\n *\n */\n\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport some from 'lodash/some';\nimport { createSelector } from 'reselect';\nimport { RootState } from 'store/types';\n\nimport { initialState } from './reducer';\n\n/**\n * Direct selector to the SelectOrganizationScreen state domain\n */\n\nconst timedEscortScreenStateDomain = (state: RootState) =>\n  state.escortTimedEscortScreen || initialState;\n\n/**\n * Other specific selectors\n */\n\nconst makeSelectIntersectOrganizations = () =>\n  createSelector(\n    timedEscortScreenStateDomain,\n    ({ organizations }) => organizations,\n  );\n\nconst makeSelectOrgGroups = () =>\n  createSelector(timedEscortScreenStateDomain, state => {\n    return state.organizationGroups;\n  });\n\nconst makeSelectSelectedOrganization = () =>\n  createSelector(timedEscortScreenStateDomain, ({ organizations }) =>\n    find(organizations, { isSelected: true }),\n  );\n\nconst makeSelectEnableContinueButton = () =>\n  createSelector(\n    timedEscortScreenStateDomain,\n    ({ organizations, error }) =>\n      isEmpty(organizations) ||\n      (some(organizations, { isSelected: true }) && !error),\n  );\n\nconst makeSelectEnableNextButton = () =>\n  createSelector(\n    timedEscortScreenStateDomain,\n    ({ procedures, error }) =>\n      !isEmpty(procedures) && some(procedures, { isSelected: true }) && !error,\n  );\n\nconst makeSelectRequestingOrganizations = () =>\n  createSelector(\n    timedEscortScreenStateDomain,\n    ({ requestingOrganizations }) => requestingOrganizations,\n  );\n\nconst makeSelectError = () =>\n  createSelector(timedEscortScreenStateDomain, ({ error }) => error);\n\nconst makeSelectErrorMessage = () =>\n  createSelector(\n    timedEscortScreenStateDomain,\n    ({ errorMessage }) => errorMessage,\n  );\n\nconst makeSelectOrganizationProcedures = () =>\n  createSelector(timedEscortScreenStateDomain, ({ procedures }) => procedures);\n\nconst makeSelectSelectedProcedure = () =>\n  createSelector(timedEscortScreenStateDomain, ({ procedures }) =>\n    find(procedures, { isSelected: true }),\n  );\n\n/**\n * Default selector used by SelectOrganizationScreen\n */\n\nconst makeSelectSelectOrganizationScreenState = () =>\n  createSelector(timedEscortScreenStateDomain, subState => subState);\n\nexport default makeSelectSelectOrganizationScreenState;\nexport {\n  timedEscortScreenStateDomain,\n  makeSelectIntersectOrganizations,\n  makeSelectSelectedOrganization,\n  makeSelectRequestingOrganizations,\n  makeSelectEnableContinueButton,\n  makeSelectOrganizationProcedures,\n  makeSelectError,\n  makeSelectErrorMessage,\n  makeSelectEnableNextButton,\n  makeSelectSelectedProcedure,\n  makeSelectOrgGroups,\n};\n"],"mappings":";;;;;;AAMA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,KAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,SAAA,GAAAH,OAAA;AAGA,IAAAI,QAAA,GAAAJ,OAAA;AAAyC,SAAAD,uBAAAM,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAZzC;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;;AAEA,MAAMG,4BAA4B,GAAIC,KAAgB,IACpDA,KAAK,CAACC,uBAAuB,IAAIC,qBAAY;;AAE/C;AACA;AACA;AAFAC,OAAA,CAAAJ,4BAAA,GAAAA,4BAAA;AAIA,MAAMK,gCAAgC,GAAGA,CAAA,KACvC,IAAAC,wBAAc,EACZN,4BAA4B,EAC5B,CAAC;EAAEO;AAAc,CAAC,KAAKA,aACzB,CAAC;AAACH,OAAA,CAAAC,gCAAA,GAAAA,gCAAA;AAEJ,MAAMG,mBAAmB,GAAGA,CAAA,KAC1B,IAAAF,wBAAc,EAACN,4BAA4B,EAAEC,KAAK,IAAI;EACpD,OAAOA,KAAK,CAACQ,kBAAkB;AACjC,CAAC,CAAC;AAACL,OAAA,CAAAI,mBAAA,GAAAA,mBAAA;AAEL,MAAME,8BAA8B,GAAGA,CAAA,KACrC,IAAAJ,wBAAc,EAACN,4BAA4B,EAAE,CAAC;EAAEO;AAAc,CAAC,KAC7D,IAAAI,aAAI,EAACJ,aAAa,EAAE;EAAEK,UAAU,EAAE;AAAK,CAAC,CAC1C,CAAC;AAACR,OAAA,CAAAM,8BAAA,GAAAA,8BAAA;AAEJ,MAAMG,8BAA8B,GAAGA,CAAA,KACrC,IAAAP,wBAAc,EACZN,4BAA4B,EAC5B,CAAC;EAAEO,aAAa;EAAEO;AAAM,CAAC,KACvB,IAAAC,gBAAO,EAACR,aAAa,CAAC,IACrB,IAAAS,aAAI,EAACT,aAAa,EAAE;EAAEK,UAAU,EAAE;AAAK,CAAC,CAAC,IAAI,CAACE,KACnD,CAAC;AAACV,OAAA,CAAAS,8BAAA,GAAAA,8BAAA;AAEJ,MAAMI,0BAA0B,GAAGA,CAAA,KACjC,IAAAX,wBAAc,EACZN,4BAA4B,EAC5B,CAAC;EAAEkB,UAAU;EAAEJ;AAAM,CAAC,KACpB,CAAC,IAAAC,gBAAO,EAACG,UAAU,CAAC,IAAI,IAAAF,aAAI,EAACE,UAAU,EAAE;EAAEN,UAAU,EAAE;AAAK,CAAC,CAAC,IAAI,CAACE,KACvE,CAAC;AAACV,OAAA,CAAAa,0BAAA,GAAAA,0BAAA;AAEJ,MAAME,iCAAiC,GAAGA,CAAA,KACxC,IAAAb,wBAAc,EACZN,4BAA4B,EAC5B,CAAC;EAAEoB;AAAwB,CAAC,KAAKA,uBACnC,CAAC;AAAChB,OAAA,CAAAe,iCAAA,GAAAA,iCAAA;AAEJ,MAAME,eAAe,GAAGA,CAAA,KACtB,IAAAf,wBAAc,EAACN,4BAA4B,EAAE,CAAC;EAAEc;AAAM,CAAC,KAAKA,KAAK,CAAC;AAACV,OAAA,CAAAiB,eAAA,GAAAA,eAAA;AAErE,MAAMC,sBAAsB,GAAGA,CAAA,KAC7B,IAAAhB,wBAAc,EACZN,4BAA4B,EAC5B,CAAC;EAAEuB;AAAa,CAAC,KAAKA,YACxB,CAAC;AAACnB,OAAA,CAAAkB,sBAAA,GAAAA,sBAAA;AAEJ,MAAME,gCAAgC,GAAGA,CAAA,KACvC,IAAAlB,wBAAc,EAACN,4BAA4B,EAAE,CAAC;EAAEkB;AAAW,CAAC,KAAKA,UAAU,CAAC;AAACd,OAAA,CAAAoB,gCAAA,GAAAA,gCAAA;AAE/E,MAAMC,2BAA2B,GAAGA,CAAA,KAClC,IAAAnB,wBAAc,EAACN,4BAA4B,EAAE,CAAC;EAAEkB;AAAW,CAAC,KAC1D,IAAAP,aAAI,EAACO,UAAU,EAAE;EAAEN,UAAU,EAAE;AAAK,CAAC,CACvC,CAAC;;AAEH;AACA;AACA;AAFAR,OAAA,CAAAqB,2BAAA,GAAAA,2BAAA;AAIA,MAAMC,uCAAuC,GAAGA,CAAA,KAC9C,IAAApB,wBAAc,EAACN,4BAA4B,EAAE2B,QAAQ,IAAIA,QAAQ,CAAC;AAAC,IAAAC,QAAA,GAAAxB,OAAA,CAAAL,OAAA,GAEtD2B,uCAAuC","ignoreList":[]}