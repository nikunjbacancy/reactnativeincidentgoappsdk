{"version":3,"names":["_constants","require","getIntersectOrganizationsRequest","type","GET_INTERSECT_ORGANIZATIONS_REQUEST","exports","getIntersectOrganizationsSuccess","payload","GET_INTERSECT_ORGANIZATIONS_SUCCESS","getIntersectOrganizationsFailure","error","GET_INTERSECT_ORGANIZATIONS_FAILURE","getOrganizationProceduresRequest","id","GET_ORGANIZATION_PROCEDURES_REQUEST","getOrganizationProceduresSuccess","procedures","GET_ORGANIZATION_PROCEDURES_SUCCESS","getOrganizationProceduresFailure","GET_ORGANIZATION_PROCEDURES_FAILURE","toggleSelectOrganization","TOGGLE_SELECT_ORGANIZATION","toggleSelectProcedure","TOGGLE_SELECT_PROCEDURE","clearSelections","CLEAR_SELECTIONS"],"sources":["actions.ts"],"sourcesContent":["/**\n *\n * TimedEscortScreen actions\n *\n */\n\nimport { Id } from 'incident-code-core';\nimport { IntersectOrganizationSelection, ProcedureSelection } from 'types';\n\nimport {\n  CLEAR_SELECTIONS,\n  GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  GET_INTERSECT_ORGANIZATIONS_REQUEST,\n  GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  GET_ORGANIZATION_PROCEDURES_FAILURE,\n  GET_ORGANIZATION_PROCEDURES_REQUEST,\n  GET_ORGANIZATION_PROCEDURES_SUCCESS,\n  TOGGLE_SELECT_ORGANIZATION,\n  TOGGLE_SELECT_PROCEDURE,\n} from './constants';\nimport { TimedEscortActionTypes } from './types';\n\nexport const getIntersectOrganizationsRequest = (): TimedEscortActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_REQUEST,\n});\n\nexport const getIntersectOrganizationsSuccess = (payload: {\n  organizations: IntersectOrganizationSelection[];\n  organizationGroups: any[];\n}): TimedEscortActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  payload,\n});\n\nexport const getIntersectOrganizationsFailure = (\n  error: Error,\n): TimedEscortActionTypes => ({\n  type: GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  payload: error,\n  error: true,\n});\n\nexport const getOrganizationProceduresRequest = (\n  id: Id,\n): TimedEscortActionTypes => ({\n  type: GET_ORGANIZATION_PROCEDURES_REQUEST,\n  payload: id,\n});\n\nexport const getOrganizationProceduresSuccess = (\n  procedures: ProcedureSelection[],\n): TimedEscortActionTypes => ({\n  type: GET_ORGANIZATION_PROCEDURES_SUCCESS,\n  payload: procedures,\n});\n\nexport const getOrganizationProceduresFailure = (\n  error: Error,\n): TimedEscortActionTypes => ({\n  type: GET_ORGANIZATION_PROCEDURES_FAILURE,\n  payload: error,\n  error: true,\n});\n\nexport const toggleSelectOrganization = (id: Id): TimedEscortActionTypes => ({\n  type: TOGGLE_SELECT_ORGANIZATION,\n  payload: id,\n});\n\nexport const toggleSelectProcedure = (id: Id): TimedEscortActionTypes => ({\n  type: TOGGLE_SELECT_PROCEDURE,\n  payload: id,\n});\n\nexport const clearSelections = () => ({ type: CLEAR_SELECTIONS });\n"],"mappings":";;;;;;AASA,IAAAA,UAAA,GAAAC,OAAA;AATA;AACA;AACA;AACA;AACA;;AAkBO,MAAMC,gCAAgC,GAAGA,CAAA,MAA+B;EAC7EC,IAAI,EAAEC;AACR,CAAC,CAAC;AAACC,OAAA,CAAAH,gCAAA,GAAAA,gCAAA;AAEI,MAAMI,gCAAgC,GAAIC,OAGhD,KAA8B;EAC7BJ,IAAI,EAAEK,8CAAmC;EACzCD;AACF,CAAC,CAAC;AAACF,OAAA,CAAAC,gCAAA,GAAAA,gCAAA;AAEI,MAAMG,gCAAgC,GAC3CC,KAAY,KACgB;EAC5BP,IAAI,EAAEQ,8CAAmC;EACzCJ,OAAO,EAAEG,KAAK;EACdA,KAAK,EAAE;AACT,CAAC,CAAC;AAACL,OAAA,CAAAI,gCAAA,GAAAA,gCAAA;AAEI,MAAMG,gCAAgC,GAC3CC,EAAM,KACsB;EAC5BV,IAAI,EAAEW,8CAAmC;EACzCP,OAAO,EAAEM;AACX,CAAC,CAAC;AAACR,OAAA,CAAAO,gCAAA,GAAAA,gCAAA;AAEI,MAAMG,gCAAgC,GAC3CC,UAAgC,KACJ;EAC5Bb,IAAI,EAAEc,8CAAmC;EACzCV,OAAO,EAAES;AACX,CAAC,CAAC;AAACX,OAAA,CAAAU,gCAAA,GAAAA,gCAAA;AAEI,MAAMG,gCAAgC,GAC3CR,KAAY,KACgB;EAC5BP,IAAI,EAAEgB,8CAAmC;EACzCZ,OAAO,EAAEG,KAAK;EACdA,KAAK,EAAE;AACT,CAAC,CAAC;AAACL,OAAA,CAAAa,gCAAA,GAAAA,gCAAA;AAEI,MAAME,wBAAwB,GAAIP,EAAM,KAA8B;EAC3EV,IAAI,EAAEkB,qCAA0B;EAChCd,OAAO,EAAEM;AACX,CAAC,CAAC;AAACR,OAAA,CAAAe,wBAAA,GAAAA,wBAAA;AAEI,MAAME,qBAAqB,GAAIT,EAAM,KAA8B;EACxEV,IAAI,EAAEoB,kCAAuB;EAC7BhB,OAAO,EAAEM;AACX,CAAC,CAAC;AAACR,OAAA,CAAAiB,qBAAA,GAAAA,qBAAA;AAEI,MAAME,eAAe,GAAGA,CAAA,MAAO;EAAErB,IAAI,EAAEsB;AAAiB,CAAC,CAAC;AAACpB,OAAA,CAAAmB,eAAA,GAAAA,eAAA","ignoreList":[]}