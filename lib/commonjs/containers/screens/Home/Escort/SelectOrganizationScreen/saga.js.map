{"version":3,"names":["api","_interopRequireWildcard","require","_saga","_screens","_interopRequireDefault","_effects","_error","_location","_navigation","_actions","_types","_actions2","_constants","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getIntersectOrganizations","payload","location","getCachedFineGeoPoint","response","organizations","findIntersectOrganizations","data","put","getIntersectOrganizationsSuccess","length","triggerOnboardForInactiveUser","_organizations$","toggleSelectOrganization","id","startEscortRequest","onLocation","NavigatorService","navigate","Screens","Home","Escort","EscortRequest","isPanic","requestType","EscortType","Live","error","getIntersectOrganizationsFailure","handleError","organizationNotifyScreenSaga","takeLatest","GET_INTERSECT_ORGANIZATIONS_REQUEST"],"sources":["saga.ts"],"sourcesContent":["/**\n *\n * SelectOrganizationScreen saga\n *\n */\n\nimport * as api from '../../../../../api';\nimport { triggerOnboardForInactiveUser } from '../../../../../containers/app/saga';\nimport Screens from '../../../../../containers/providers/RoutesProvider/screens';\nimport { GeoPoint, Id } from 'incident-code-core';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { handleError } from '../../../../../utils/error';\nimport { getCachedFineGeoPoint } from '../../../../../utils/location';\nimport NavigatorService from '../../../../../utils/navigation';\n\nimport { startEscortRequest } from '../RequestScreen/actions';\nimport { EscortType } from '../RequestScreen/types';\n// import { startChatFailure, startChatSuccess } from '../RecordScreen/actions';\nimport {\n  getIntersectOrganizationsFailure,\n  getIntersectOrganizationsSuccess,\n  toggleSelectOrganization,\n} from './actions';\nimport { GET_INTERSECT_ORGANIZATIONS_REQUEST } from './constants';\nimport { GetIntersectOrganizationsRequestAction } from './types';\n\nfunction* getIntersectOrganizations({\n  payload,\n}: GetIntersectOrganizationsRequestAction): any {\n  try {\n    const location: GeoPoint = yield call(getCachedFineGeoPoint);\n    const response = yield call(\n      api.organizations.findIntersectOrganizations,\n      location,\n    );\n\n    const { organizations } = response.data;\n\n    yield put(getIntersectOrganizationsSuccess(organizations));\n    if (organizations.length === 0) {\n      yield* triggerOnboardForInactiveUser();\n    }\n    if (organizations.length === 1) {\n      yield put(toggleSelectOrganization(organizations[0]?.id as Id));\n      yield put(startEscortRequest(payload.onLocation));\n      yield call(NavigatorService.navigate, Screens.Home.Escort.EscortRequest, {\n        isPanic: false,\n        requestType: EscortType.Live,\n      });\n    }\n  } catch (error: any) {\n    yield put(getIntersectOrganizationsFailure(handleError(error)));\n  }\n}\n\nexport default function* organizationNotifyScreenSaga() {\n  yield takeLatest(\n    GET_INTERSECT_ORGANIZATIONS_REQUEST,\n    getIntersectOrganizations,\n  );\n}\n"],"mappings":"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","ignoreList":[]}