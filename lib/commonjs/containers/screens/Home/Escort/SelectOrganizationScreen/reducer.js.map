{"version":3,"names":["_immer","_interopRequireDefault","require","_map","_constants","e","__esModule","default","initialState","exports","organizations","undefined","organizationGroups","requestingOrganizations","error","errorMessage","selectOrganizationScreenReducer","produce","draft","action","type","GET_INTERSECT_ORGANIZATIONS_REQUEST","GET_INTERSECT_ORGANIZATIONS_SUCCESS","payload","TOGGLE_SELECT_ORGANIZATION","map","organization","id","isSelected","GET_INTERSECT_ORGANIZATIONS_FAILURE","message","_default"],"sources":["reducer.ts"],"sourcesContent":["/**\n *\n * SelectOrganizationScreen reducer\n *\n */\n\nimport produce, { Draft } from 'immer';\nimport map from 'lodash/map';\n\nimport {\n  GET_INTERSECT_ORGANIZATIONS_FAILURE,\n  GET_INTERSECT_ORGANIZATIONS_REQUEST,\n  GET_INTERSECT_ORGANIZATIONS_SUCCESS,\n  TOGGLE_SELECT_ORGANIZATION,\n} from './constants';\nimport {\n  SelectOrganizationActionTypes,\n  SelectOrganizationState,\n} from './types';\n\nexport const initialState: SelectOrganizationState = {\n  organizations: undefined,\n  organizationGroups: [],\n  requestingOrganizations: true,\n  error: false,\n  errorMessage: '',\n};\n\nconst selectOrganizationScreenReducer = produce(\n  (\n    draft: Draft<SelectOrganizationState>,\n    action: SelectOrganizationActionTypes,\n  ) => {\n    switch (action.type) {\n      case GET_INTERSECT_ORGANIZATIONS_REQUEST:\n        draft.requestingOrganizations = true;\n        break;\n      case GET_INTERSECT_ORGANIZATIONS_SUCCESS:\n        draft.requestingOrganizations = false;\n        draft.organizations = action.payload.organizations;\n        break;\n      case TOGGLE_SELECT_ORGANIZATION:\n        draft.error = false;\n        draft.organizations = map(draft.organizations, organization => {\n          if (organization.id === action.payload) {\n            return {\n              ...organization,\n              isSelected: !organization.isSelected,\n            };\n          }\n          return {\n            ...organization,\n            isSelected: false,\n          };\n        });\n        break;\n      case GET_INTERSECT_ORGANIZATIONS_FAILURE:\n        draft.error = action.error;\n        draft.errorMessage = action.payload.message;\n        draft.requestingOrganizations = false;\n        break;\n      default:\n    }\n  },\n  initialState,\n);\n\nexport default selectOrganizationScreenReducer;\n"],"mappings":";;;;;;AAMA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,IAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEA,IAAAE,UAAA,GAAAF,OAAA;AAKqB,SAAAD,uBAAAI,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAdrB;AACA;AACA;AACA;AACA;;AAgBO,MAAMG,YAAqC,GAAAC,OAAA,CAAAD,YAAA,GAAG;EACnDE,aAAa,EAAEC,SAAS;EACxBC,kBAAkB,EAAE,EAAE;EACtBC,uBAAuB,EAAE,IAAI;EAC7BC,KAAK,EAAE,KAAK;EACZC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,+BAA+B,GAAG,IAAAC,cAAO,EAC7C,CACEC,KAAqC,EACrCC,MAAqC,KAClC;EACH,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKC,8CAAmC;MACtCH,KAAK,CAACL,uBAAuB,GAAG,IAAI;MACpC;IACF,KAAKS,8CAAmC;MACtCJ,KAAK,CAACL,uBAAuB,GAAG,KAAK;MACrCK,KAAK,CAACR,aAAa,GAAGS,MAAM,CAACI,OAAO,CAACb,aAAa;MAClD;IACF,KAAKc,qCAA0B;MAC7BN,KAAK,CAACJ,KAAK,GAAG,KAAK;MACnBI,KAAK,CAACR,aAAa,GAAG,IAAAe,YAAG,EAACP,KAAK,CAACR,aAAa,EAAEgB,YAAY,IAAI;QAC7D,IAAIA,YAAY,CAACC,EAAE,KAAKR,MAAM,CAACI,OAAO,EAAE;UACtC,OAAO;YACL,GAAGG,YAAY;YACfE,UAAU,EAAE,CAACF,YAAY,CAACE;UAC5B,CAAC;QACH;QACA,OAAO;UACL,GAAGF,YAAY;UACfE,UAAU,EAAE;QACd,CAAC;MACH,CAAC,CAAC;MACF;IACF,KAAKC,8CAAmC;MACtCX,KAAK,CAACJ,KAAK,GAAGK,MAAM,CAACL,KAAK;MAC1BI,KAAK,CAACH,YAAY,GAAGI,MAAM,CAACI,OAAO,CAACO,OAAO;MAC3CZ,KAAK,CAACL,uBAAuB,GAAG,KAAK;MACrC;IACF;EACF;AACF,CAAC,EACDL,YACF,CAAC;AAAC,IAAAuB,QAAA,GAAAtB,OAAA,CAAAF,OAAA,GAEaS,+BAA+B","ignoreList":[]}