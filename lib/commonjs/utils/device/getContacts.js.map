{"version":3,"names":["_deburr","_interopRequireDefault","require","_forEach","_replace","_sortBy","_reactNativeContacts","e","__esModule","default","formatContact","id","contact","phoneNumber","jobTitle","middleName","givenName","familyName","name","phone","replace","number","title","notificationEnabled","getContacts","Promise","resolve","reject","Contacts","getAll","error","allContacts","contactMap","Map","forEach","phoneNumbers","index","has","recordID","set","contacts","sortBy","Array","from","values","deburr","_default","exports"],"sources":["getContacts.ts"],"sourcesContent":["import { AppUserContact } from 'incident-code-core';\nimport deburr from 'lodash/deburr';\nimport forEach from 'lodash/forEach';\nimport replace from 'lodash/replace';\nimport sortBy from 'lodash/sortBy';\nimport Contacts, { Contact } from 'react-native-contacts';\n\nconst formatContact = (\n  id: string,\n  contact: Contact,\n  phoneNumber: Contacts.PhoneNumber,\n): AppUserContact => {\n  const { jobTitle, middleName, givenName, familyName } = contact;\n\n  let name: string;\n\n  if (middleName) {\n    name = `${givenName || ''} ${middleName || ''} ${familyName || ''}`;\n  } else {\n    name = `${givenName || ''} ${familyName || ''}`;\n  }\n\n  const phone = replace(phoneNumber.number, /[(,)\\s-]/g, '');\n\n  return {\n    id,\n    name,\n    title: jobTitle,\n    phone,\n    notificationEnabled: true,\n  };\n};\n\nconst getContacts = (): Promise<AppUserContact[]> => {\n  return new Promise((resolve, reject) => {\n    Contacts.getAll((error, allContacts) => {\n      //(\"get Contact from device==>\",error)\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      const contactMap = new Map<string, AppUserContact>();\n      forEach(allContacts, contact => {\n        forEach(contact.phoneNumbers, (phone, index) => {\n          if (!contactMap.has(phone.number)) {\n            const id = `${contact.recordID}-${index}`;\n            contactMap.set(id, formatContact(id, contact, phone));\n          }\n        });\n      });\n\n      const contacts = sortBy(Array.from(contactMap.values()), contact =>\n        deburr(contact.name),\n      );\n\n      resolve(contacts);\n    });\n  });\n};\n\nexport default getContacts;\n"],"mappings":";;;;;;AACA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,QAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,OAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,oBAAA,GAAAL,sBAAA,CAAAC,OAAA;AAA0D,SAAAD,uBAAAM,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE1D,MAAMG,aAAa,GAAGA,CACpBC,EAAU,EACVC,OAAgB,EAChBC,WAAiC,KACd;EACnB,MAAM;IAAEC,QAAQ;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAW,CAAC,GAAGL,OAAO;EAE/D,IAAIM,IAAY;EAEhB,IAAIH,UAAU,EAAE;IACdG,IAAI,GAAG,GAAGF,SAAS,IAAI,EAAE,IAAID,UAAU,IAAI,EAAE,IAAIE,UAAU,IAAI,EAAE,EAAE;EACrE,CAAC,MAAM;IACLC,IAAI,GAAG,GAAGF,SAAS,IAAI,EAAE,IAAIC,UAAU,IAAI,EAAE,EAAE;EACjD;EAEA,MAAME,KAAK,GAAG,IAAAC,gBAAO,EAACP,WAAW,CAACQ,MAAM,EAAE,WAAW,EAAE,EAAE,CAAC;EAE1D,OAAO;IACLV,EAAE;IACFO,IAAI;IACJI,KAAK,EAAER,QAAQ;IACfK,KAAK;IACLI,mBAAmB,EAAE;EACvB,CAAC;AACH,CAAC;AAED,MAAMC,WAAW,GAAGA,CAAA,KAAiC;EACnD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,4BAAQ,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,WAAW,KAAK;MACtC;MACA,IAAID,KAAK,EAAE;QACTH,MAAM,CAACG,KAAK,CAAC;QACb;MACF;MAEA,MAAME,UAAU,GAAG,IAAIC,GAAG,CAAyB,CAAC;MACpD,IAAAC,gBAAO,EAACH,WAAW,EAAEnB,OAAO,IAAI;QAC9B,IAAAsB,gBAAO,EAACtB,OAAO,CAACuB,YAAY,EAAE,CAAChB,KAAK,EAAEiB,KAAK,KAAK;UAC9C,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAClB,KAAK,CAACE,MAAM,CAAC,EAAE;YACjC,MAAMV,EAAE,GAAG,GAAGC,OAAO,CAAC0B,QAAQ,IAAIF,KAAK,EAAE;YACzCJ,UAAU,CAACO,GAAG,CAAC5B,EAAE,EAAED,aAAa,CAACC,EAAE,EAAEC,OAAO,EAAEO,KAAK,CAAC,CAAC;UACvD;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAMqB,QAAQ,GAAG,IAAAC,eAAM,EAACC,KAAK,CAACC,IAAI,CAACX,UAAU,CAACY,MAAM,CAAC,CAAC,CAAC,EAAEhC,OAAO,IAC9D,IAAAiC,eAAM,EAACjC,OAAO,CAACM,IAAI,CACrB,CAAC;MAEDQ,OAAO,CAACc,QAAQ,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAAC,IAAAM,QAAA,GAAAC,OAAA,CAAAtC,OAAA,GAEae,WAAW","ignoreList":[]}