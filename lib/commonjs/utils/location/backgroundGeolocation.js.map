{"version":3,"names":["_api","require","_reactNativeBackgroundGeolocation","_interopRequireDefault","_asyncStorage","_constants","_sdkConfigs","_device","_axios","_reactNative","e","__esModule","default","TRACKING_MODE","LOCATION_TRACKING_MODE","GEOFENCE_MODE","initBackgroundGeolocationService","tokenStr","AsyncStorage","getItem","TOKEN_KEY","token","JSON","parse","config","reset","desiredAccuracy","BackgroundGeolocation","DESIRED_ACCURACY_HIGH","distanceFilter","fastestLocationUpdateInterval","autoSync","httpRootProperty","stopOnTerminate","startOnBoot","stopOnStationary","preventSuspend","stopTimeout","logLevel","LOG_LEVEL_VERBOSE","showsBackgroundLocationIndicator","disableStopDetection","foregroundService","locationTemplate","headers","sdkConfigs","configs","headerSecurityCode","getVersion","Authorization","token_type","access_token","ready","err","logger","error","exports","startBackgroundGeolocationToEscort","incidentEscortId","onLocation","warn","stop","debug","then","state","enabled","setConfig","url","base_url","pausesLocationUpdatesAutomatically","console","log","start","info","changePace","stopBackgroundGeolocation","clearLocationState","getState","setTimeout","initBackgroundLocation","message","updateUserLocation","userData","location","getCurrentPosition","timeout","maximumAge","samples","payload","coords","latitude","longitude","id","timestamp","firstName","lastName","phone","axios","post","updateUserLoctionData","fetchLocation","checkLastCheckedInOut","allLocations","Platform","OS","configureAndroidBackgroundLocation","configureIOSBackgroundLocation","_allLocations$locatio","onSiteLocation","locations","filter","item","onSite","isOnSite","getOnSiteFlag","length","setItem","stringify","deviceSettings","showIgnoreBatteryOptimizations","enableHeadless","allowIdenticalLocations","maxDaysToPersist","locationAuthorizationRequest","geofenceInitialTriggerEntry","geofenceModeHighAccuracy","notification","title","text","backgroundPermissionRationale","trackingMode","startService","stationaryRadius","startGeofences","crudGeofenceOperation","receivedGeofences","isInitialScript","getAllGeofences","getGeofences","isInitialScriptRun","LocationRegion","forEach","geofence","geofenceCoords","path","polyCoords","map","lat","lng","addUpdateGeofence","locationName","location_id","deletedLocationRegion","identifier","removeGeofence","toString","allGeofenes","catch","removeGeofences","insertAllGeofences","allRegions","promises","region","location_name","Promise","all","locationId","vertices","addGeofence","notifyOnEntry","notifyOnExit","notifyOnDwell","loiteringDelay","extras","updateEventOnGeofenceCross","geofenceData","isChecking","userId","_geofenceData$extras","_geofenceData$extras2","isCheckIn","siteKeyNotificationEndPoint","setLastCheckedInOutOnNetworkFail","updateEnterExitEventOnGeofenceCross","isPointInPolygon","point","polygon","x","y","inside","i","j","xi","yi","xj","yj","intersect","findContainingPolygons","geofences","coordinates","setLastCheckedIn","lastCheckedIn","locationID","locatonName","getLastCheckedIn","removeLastCheckedIn","removeItem","checkCurrentLatLongWithGeofence","_geofence$extras","_geofence$extras2","name","currentLocation","insideGeofences","parseLastCheckedIn","isCheckedIn","checkedIn","removeLastCheckedInOrOutEvent","getLastCheckedInOutStoredEvents"],"sources":["backgroundGeolocation.ts"],"sourcesContent":["import { logger } from '../../api';\nimport { AccessToken, ObjectId } from 'incident-code-core';\nimport BackgroundGeolocation, {\n  Location,\n  Config as GeoConfig,\n} from 'react-native-background-geolocation';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { TOKEN_KEY } from '../../containers/app/constants';\nimport { sdkConfigs } from '../../sdkConfigs'\nimport { getVersion } from '../device';\n// import axios from '../axios';\nimport axios from '../../api/axios';\nimport { Platform } from 'react-native';\n\n\nconst TRACKING_MODE = {\n  LOCATION_TRACKING_MODE: 0,\n  GEOFENCE_MODE: 1,\n};\n\nconst initBackgroundGeolocationService = async () => {\n  const tokenStr = await AsyncStorage.getItem(TOKEN_KEY);\n  const token: AccessToken = JSON.parse(tokenStr || '{}');\n\n  let config: GeoConfig = {\n    reset: true,\n    desiredAccuracy: BackgroundGeolocation.DESIRED_ACCURACY_HIGH,\n    distanceFilter: 5,\n    fastestLocationUpdateInterval: 5000, // 5 seconds\n    autoSync: true,\n    httpRootProperty: '.',\n    stopOnTerminate: false,\n    startOnBoot: true,\n    stopOnStationary: false,\n    preventSuspend: true,\n    stopTimeout: 5,\n    logLevel: BackgroundGeolocation.LOG_LEVEL_VERBOSE,\n    showsBackgroundLocationIndicator: true,\n    disableStopDetection: true,\n    foregroundService: true,\n    locationTemplate:\n      '{\"location\":{\"lat\":<%= latitude %>, \"lng\":<%= longitude %>}, \"activityType\": \"<%= activity.type %>\", \"activityConfidence\": <%= activity.confidence %>, \"accuracy\": <%= accuracy %>, \"altitude\": <%= altitude %>, \"altitudeAccuracy\": <%= altitude_accuracy %>, \"speed\": <%= speed %>, \"batteryLevel\": <%= battery.level %>, \"isMoving\": <%= is_moving %>, \"timestamp\": \"<%= timestamp %>\"}',\n    headers: {\n      'Security-Code': sdkConfigs.configs.headerSecurityCode,\n      'Client-Version': getVersion(),\n      Authorization: `${token.token_type} ${token.access_token}`,\n    },\n  };\n\n  try {\n    await BackgroundGeolocation.ready(config);\n  } catch (err) {\n    logger.error('Init BackgroundGeolocation error', \"\", err);\n  }\n};\n\nconst startBackgroundGeolocationToEscort = async (\n  incidentEscortId: string | ObjectId | undefined,\n  onLocation: (location: Location) => void, // No longer optional, necessary for UI\n) => {\n  BackgroundGeolocation.onLocation(onLocation, err => {\n    logger.warn('OnLocationError', `Error code: ${err}`, err);\n  });\n  try {\n\n    await BackgroundGeolocation.stop()\n\n    const tokenStr = await AsyncStorage.getItem(TOKEN_KEY);\n    const token: AccessToken = JSON.parse(tokenStr || '{}');\n\n    let config: GeoConfig = {\n      desiredAccuracy: BackgroundGeolocation.DESIRED_ACCURACY_HIGH,\n      distanceFilter: 5,\n      fastestLocationUpdateInterval: 5000, // 5 seconds\n      autoSync: true,\n      httpRootProperty: '.',\n      stopOnTerminate: false,\n      startOnBoot: true,\n      stopOnStationary: false,\n      preventSuspend: true,\n      stopTimeout: 5,\n      logLevel: BackgroundGeolocation.LOG_LEVEL_VERBOSE,\n      showsBackgroundLocationIndicator: true,\n      disableStopDetection: true,\n      foregroundService: true,\n      locationTemplate:\n        '{\"location\":{\"lat\":<%= latitude %>, \"lng\":<%= longitude %>}, \"activityType\": \"<%= activity.type %>\", \"activityConfidence\": <%= activity.confidence %>, \"accuracy\": <%= accuracy %>, \"altitude\": <%= altitude %>, \"altitudeAccuracy\": <%= altitude_accuracy %>, \"speed\": <%= speed %>, \"batteryLevel\": <%= battery.level %>, \"isMoving\": <%= is_moving %>, \"timestamp\": \"<%= timestamp %>\"}',\n      headers: {\n        'Security-Code': sdkConfigs.configs.headerSecurityCode,\n        'Client-Version': getVersion(),\n        Authorization: `${token.token_type} ${token.access_token}`,\n      },\n      debug: false\n    };\n\n    BackgroundGeolocation.ready(config).then(async (state) => {\n      if (!state.enabled) {\n        await BackgroundGeolocation.setConfig({\n          url: `${sdkConfigs.configs.base_url}/incidents/${incidentEscortId}/location`,\n          pausesLocationUpdatesAutomatically: false,\n          showsBackgroundLocationIndicator: true,\n        });\n        console.log(\"start tracking....\")\n        await BackgroundGeolocation.start();\n        BackgroundGeolocation.logger.info('>>>> START TRACKING <<<<');\n        await BackgroundGeolocation.changePace(true);\n\n      } else if (state.url !== `${sdkConfigs.configs.base_url}/incidents/${incidentEscortId}/location`) {\n        console.log(\"==========Background location already started===========\")\n      }\n    })\n  } catch (err) {\n    console.log(\"start background location error-->\", err)\n    // logger.error('Start BackgroundGeolocation error', err, err);\n  }\n};\n\n\n\n\nconst stopBackgroundGeolocation = async (clearLocationState?: () => void) => {\n  try {\n    const state = await BackgroundGeolocation.getState();\n    if (state.enabled) {\n      await BackgroundGeolocation.changePace(false);\n      await BackgroundGeolocation.stop();\n      // await BackgroundGeolocation.removeAllListeners();\n      BackgroundGeolocation.logger.info('>>>> STOPING TRACKING <<<<');\n      if (clearLocationState) {\n        // clear last location from app state if required\n        clearLocationState();\n      }\n\n      console.log(\"init background location....\")\n      setTimeout(() => {\n        initBackgroundLocation(true, [])\n      }, 2000);\n    }\n  } catch (err) {\n    logger.error('Stop BackgroundGeolocation error', (err as Error).message);\n  }\n};\n\n\nconst updateUserLocation = async () => {\n  const userData = await AsyncStorage.getItem('userData');\n  if (userData !== null) {\n    let location = await BackgroundGeolocation.getCurrentPosition({\n      timeout: 25,          // 30 second timeout to fetch location\n      maximumAge: 5000,     // Accept the last-known-location if not older than 5000 ms.\n      desiredAccuracy: 10,  // Try to fetch a location with an accuracy of `10` meters.\n      samples: 3,           // How many location samples to attempt.\n    });\n    let payload = {\n      \"latitude\": location.coords.latitude,\n      \"longitude\": location.coords.longitude,\n      \"userId\": userData != null ? JSON.parse(userData).id : \"\",\n      \"timeStamp\": location.timestamp,\n      \"locationDetails\": location,\n      \"username\": userData != null ? JSON.parse(userData).firstName + \" \" + JSON.parse(userData).lastName : \"\",\n      \"mobile\": userData != null ? JSON.parse(userData).phone : \"\",\n    }\n    // console.log(\"update user app payload===>\", payload)\n    await axios.post(`geocreds/setdata`, payload)\n  }\n}\n\nconst updateUserLoctionData = async (location: any) => {\n  const userData = await AsyncStorage.getItem('userData');\n  // console.log(\"userData====>\",userData)\n  if (userData !== null) {\n    let payload = {\n      \"latitude\": location.coords.latitude,\n      \"longitude\": location.coords.longitude,\n      \"userId\": userData != null ? JSON.parse(userData).id : \"\",\n      \"timeStamp\": location.timestamp,\n      \"locationDetails\": location,\n      \"username\": userData != null ? JSON.parse(userData).firstName + \" \" + JSON.parse(userData).lastName : \"\",\n      \"mobile\": userData != null ? JSON.parse(userData).phone : \"\",\n    }\n    console.log(\"update user app payload===>\", payload)\n    await axios.post(`geocreds/setdata`, payload)\n  }\n}\n\nconst fetchLocation = async () => {\n  try {\n    let location = await BackgroundGeolocation.getCurrentPosition({\n      timeout: 25,          // 30-second timeout to fetch location\n      maximumAge: 5000,     // Accept the last-known-location if not older than 5000 ms\n      desiredAccuracy: 10,  // Try to fetch a location with an accuracy of 10 meters\n      samples: 3            // How many location samples to attempt\n    });\n\n    return location;\n  } catch (error) {\n    console.log(\"Failed to fetch location:\", error);\n    throw error;\n  }\n}\n\n/**\n * Initializes background location tracking depending on the platform (Android or iOS).\n * @param allLocations - Optional list of locations to check for onSite flag.\n */\nconst initBackgroundLocation = async (checkLastCheckedInOut: boolean = false, allLocations?: any) => {\n  // console.log(\"checkLastCheckedInOut:\",checkLastCheckedInOut)\n  // If platform is Android, configure Android-specific background location settings\n  if (Platform.OS === 'android') {\n    await configureAndroidBackgroundLocation(checkLastCheckedInOut, allLocations);\n  } else {\n    // If platform is iOS, configure iOS-specific background location settings\n    await configureIOSBackgroundLocation();\n  }\n};\n\n// /**\n//  * Configures background location for Android devices.\n//  * @param allLocations - Optional list of locations to check for onSite flag.\n//  */\nconst configureAndroidBackgroundLocation = async (checkLastCheckedInOut: boolean, allLocations?: any) => {\n  // Filter locations where onSite flag is true\n  const onSiteLocation = allLocations?.locations?.filter((item: any) => item.onSite) || [];\n  let isOnSite = false;\n  const getOnSiteFlag = await AsyncStorage.getItem('isOnSite');\n  if (checkLastCheckedInOut == false) {\n    isOnSite = onSiteLocation.length > 0\n    // console.log(\"isOnSite:\",isOnSite)\n    await AsyncStorage.setItem(\"isOnSite\", JSON.stringify(isOnSite));\n  } else {\n    // console.log(\"getOnSiteFlag ==>\",getOnSiteFlag)\n    isOnSite = JSON.parse(getOnSiteFlag as string)\n    // console.log(\"isOnSite::\",isOnSite)\n  }\n\n  try {\n    // Stop any ongoing background geolocation tracking and reset settings\n    await BackgroundGeolocation.stop();\n    BackgroundGeolocation.deviceSettings.showIgnoreBatteryOptimizations();\n\n    // Configure background geolocation for Android with relevant settings\n    await BackgroundGeolocation.ready({\n      reset: true,\n      desiredAccuracy: BackgroundGeolocation.DESIRED_ACCURACY_HIGH,\n      autoSync: false,\n      distanceFilter: 15,\n      debug: false,\n      stopTimeout: 1,\n      startOnBoot: true,\n      stopOnTerminate: false,\n      enableHeadless: true,\n      preventSuspend: true,\n      allowIdenticalLocations: true,\n      maxDaysToPersist: 2,\n      foregroundService: isOnSite,\n      locationAuthorizationRequest: 'Always',\n      geofenceInitialTriggerEntry: getOnSiteFlag == null ? true : false,\n      geofenceModeHighAccuracy: isOnSite,\n      notification: {\n        title: \"Sitekey Activated...\",\n        text: \"Sitekey is running in the background.\",\n      },\n      backgroundPermissionRationale: {\n        // Android only\n        message: 'Incident Go collect location data for Sitekey',\n      },\n    }, () => {\n      // Decide the tracking mode based on whether we're on-site or not\n      // console.log(\"geofenceInitialTriggerEntry ==>\", getOnSiteFlag == null ? true : false)\n      const trackingMode = isOnSite ? TRACKING_MODE.LOCATION_TRACKING_MODE : TRACKING_MODE.GEOFENCE_MODE;\n      // console.log(\"trackingmode ==>\", trackingMode)\n      startService(trackingMode); // Start the appropriate service\n    });\n  } catch (error) {\n    // console.log('Error configuring Android background location:', error);\n  }\n};\n\n// /**\n//  * Configures background location for iOS devices.\n//  * This assumes a simpler setup for iOS compared to Android.\n//  */\nconst configureIOSBackgroundLocation = async () => {\n  try {\n    // Ask the user to disable battery optimizations for better performance\n    BackgroundGeolocation.deviceSettings.showIgnoreBatteryOptimizations();\n    // let token = await BackgroundGeolocation.findOrCreateTransistorAuthorizationToken(\"IncidentGoApp28thFeb\", \"raldrichpolicepriority\", \"https://tracker.transistorsoft.com\")\n    // Initialize background geolocation for iOS\n    await BackgroundGeolocation.ready({\n      // transistorAuthorizationToken: token,\n      autoSync: false,\n      // url: \"https://tracker.transistorsoft.com/api/locations\",\n      reset: true,\n      distanceFilter: 20,\n      stationaryRadius: 20,\n      debug: false,\n      startOnBoot: true,\n      stopOnTerminate: false,\n      enableHeadless: true,\n      preventSuspend: true,\n      allowIdenticalLocations: false,\n      maxDaysToPersist: 2,\n      foregroundService: true,\n      locationAuthorizationRequest: 'Always',\n      geofenceInitialTriggerEntry: false,\n      geofenceModeHighAccuracy: false,\n    },\n      (state) => {\n        // If the service isn't enabled, start geofencing\n        console.log(\"state.enabled ===>\",state)\n        if (!state.enabled) {\n          BackgroundGeolocation.startGeofences().then(() => {\n            BackgroundGeolocation.changePace(true);\n            console.log(\"geofence mode enabled ===>\")\n          });\n        } else {\n          BackgroundGeolocation.changePace(true);\n        }\n      }\n    );\n  } catch (error) {\n    // Log any errors encountered during iOS background location configuration\n    console.log('Error configuring iOS background location:', error);\n  }\n};\n\n/**\n * Starts the appropriate background service based on the tracking mode.\n * @param trackingMode - The mode to use for tracking: either location tracking or geofence tracking.\n */\nconst startService = async (trackingMode: number) => {\n  try {\n    // Log which tracking mode is being started\n    console.log(`Starting service in ${trackingMode === TRACKING_MODE.LOCATION_TRACKING_MODE ? 'Location Tracking' : 'Geofence Tracking'} mode.`);\n    // If the mode is location tracking, start the location tracking service\n    if (trackingMode === TRACKING_MODE.LOCATION_TRACKING_MODE) {\n      await BackgroundGeolocation.start();\n      // console.log(\"Background location tracking started.\");\n    } else {\n      // If the mode is geofence tracking, start the geofence service\n      await BackgroundGeolocation.startGeofences();\n      // console.log(\"Geofence tracking started.\");\n    } \n  } catch (error) {\n    // Log any errors encountered when starting the tracking service\n    // console.log(\"Failed to start tracking:\", error);\n  }\n};\n\n// Perform CRUD operations on geofences\nconst crudGeofenceOperation = async (receivedGeofences: any, isInitialScript: any) => {\n  const getAllGeofences = await BackgroundGeolocation.getGeofences();\n  let isInitialScriptRun = false;\n\n  if (getAllGeofences.length === 0) {\n    receivedGeofences.LocationRegion.forEach((geofence: any) => {\n      let geofenceCoords = typeof geofence.path === 'string' ? JSON.parse(geofence.path) : geofence.path;\n      const polyCoords = geofenceCoords.map((item: any) => [item.lat, item.lng]);\n      addUpdateGeofence(geofence.id, geofence.locationName, geofence.location_id, polyCoords);\n\n      if (!isInitialScriptRun && isInitialScript == \"true\") {\n        isInitialScriptRun = true;\n        updateUserLocation();\n      }\n    });\n\n    initBackgroundLocation(false,[]);\n  } else {\n    if (receivedGeofences.deletedLocationRegion != null) {\n      receivedGeofences.deletedLocationRegion.forEach((geofence: any) => {\n        let identifier = geofence.id;\n        BackgroundGeolocation.removeGeofence(identifier.toString())\n          .then(() => {\n            BackgroundGeolocation.getGeofences().then((allGeofenes) => {\n              if (allGeofenes.length == 0) {\n                BackgroundGeolocation.stop();\n              }\n            });\n          })\n          .catch(() => {\n            // console.log(\"remove error\" + error);\n          });\n      });\n    } else {\n      if (receivedGeofences.LocationRegion != null) {\n        try {\n          receivedGeofences.LocationRegion.forEach((geofence: any) => {\n            let geofenceCoords = typeof geofence.path === 'string' ? JSON.parse(geofence.path) : geofence.path;\n            const polyCoords = geofenceCoords.map((item: any) => [item.lat, item.lng]);\n            addUpdateGeofence(geofence.id, receivedGeofences.locationName, receivedGeofences.id, polyCoords);\n\n            if (!isInitialScriptRun && isInitialScript == \"true\") {\n              isInitialScriptRun = true;\n              updateUserLocation();\n            }\n          });\n        } catch (error) {\n          // console.log('Error in adding/updating geofences:', error);\n        }\n      }\n    }\n  }\n\n  if (receivedGeofences.LocationRegion == null && receivedGeofences.deletedLocationRegion == null) {\n    BackgroundGeolocation.removeGeofences().then(() => {\n      BackgroundGeolocation.stop();\n    });\n    updateUserLocation();\n  }\n};\n\n// Insert all geofences,\nconst insertAllGeofences = async (allRegions: any, allLocations?: any) => {\n  if (allRegions.length !== 0) {\n    const promises = allRegions.map((region: any) => {\n      const geofenceCoords = typeof region.path === 'string' ? JSON.parse(region.path) : region.path;\n      const polyCoords = geofenceCoords.map((item: any) => [item.lat, item.lng]);\n      return addUpdateGeofence(region.id, region.location_name, region.location_id, polyCoords);\n    });\n\n    try {\n      await Promise.all(promises);\n      await initBackgroundLocation(false,allLocations);\n    } catch (error) {\n      // console.log('Error inserting geofences:', error);\n    }\n  }\n};\n\n// Add or update a geofence\nconst addUpdateGeofence = async (identifier: any, locationName: string, locationId: string, vertices: any) => {\n  BackgroundGeolocation.addGeofence({\n    identifier: identifier.toString(),\n    notifyOnEntry: true,\n    notifyOnExit: true,\n    notifyOnDwell: false,\n    loiteringDelay: 0,\n    vertices: vertices,\n    extras: {\n      location_id: locationId,\n      locationName: locationName\n    }\n  }).then(() => {\n    console.log(\"geofence added ==>\", identifier);\n  }).catch((error) => {\n    console.log(\"error:geofence added ==>\", error);\n  });\n};\n\n// Define the structure for geofence data\ninterface GeofenceExtras {\n  location_id?: string;\n  locationName?: string;\n}\n\ninterface GeofenceData {\n  extras?: GeofenceExtras;\n}\n\n// Update event on geofence cross\nconst updateEventOnGeofenceCross = async (\n  geofenceData: GeofenceData,\n  isChecking: boolean,\n  userId: string\n): Promise<void> => {\n  try {\n    if (!userId) {\n      console.log(\"User ID is missing. Skipping geofence update.\");\n      return;\n    }\n    const locationId = geofenceData?.extras?.location_id || \"\";\n    const locationName = geofenceData?.extras?.locationName || \"\";\n    if (!locationId) {\n      console.log(\"Location ID is missing in geofence data. Skipping request.\");\n      return;\n    }\n    const payload = {\n      locationId,\n      locationName,\n      isCheckIn: isChecking,\n    };\n    const siteKeyNotificationEndPoint = `sitekey/notification/${userId}`;\n    // Make the API request\n    await axios.post(siteKeyNotificationEndPoint, payload);\n    setLastCheckedInOutOnNetworkFail(locationId, locationName, isChecking)\n\n  } catch (error) {\n    // console.log(\"Error updating geofence cross event:\", error.message);\n    // console.log(\"ERROR====>\", error?.message == \"Network Error\")\n    // if (error?.message == \"Network Error\") {\n    //   setLastCheckedInOutOnNetworkFail(geofenceData?.extras?.location_id || \"\", geofenceData?.extras?.locationName || \"\", isChecking)\n    // }\n  }\n};\n\n// Update enter/exit event on geofence cross\nconst updateEnterExitEventOnGeofenceCross = async (\n  locationId: string,\n  locationName: string,\n  isChecking: boolean,\n  userId: any\n): Promise<void> => {\n  try {\n    if (!userId) {\n      console.log(\"User ID is missing. Skipping geofence update.\");\n      return;\n    }\n    if (!locationId) {\n      console.log(\"Location ID is missing in geofence data. Skipping request.\");\n      return;\n    }\n    const payload = {\n      locationId,\n      locationName,\n      isCheckIn: isChecking,\n    };\n    const siteKeyNotificationEndPoint = `sitekey/notification/${userId}`;\n    console.log(`Sending geofence cross event: ${JSON.stringify(payload)}`);\n    // Make the API request\n    await axios.post(siteKeyNotificationEndPoint, payload);\n    setLastCheckedInOutOnNetworkFail(locationId, locationName, isChecking)\n    // console.log(\"Geofence cross response:\", response.data);\n  } catch (error) {\n    console.log(\"Error updating geofence cross event:\", error);\n  }\n};\n\n// Check if a point is inside a polygon\nconst isPointInPolygon = (point : any, polygon : any) => {\n  let [x, y] = point;\n  let inside = false;\n\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    let [xi, yi] = polygon[i];\n    let [xj, yj] = polygon[j];\n\n    let intersect = yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n};\n\nconst findContainingPolygons = (point: any, geofences: any) => {\n  return geofences.filter(({ coordinates }) => isPointInPolygon(point, coordinates));\n};\n\n\n// Set the last checked-in location in AsyncStorage\nconst setLastCheckedIn = (location_id: string, location_name: string) => {\n  const lastCheckedIn = { locationID: location_id, locatonName: location_name }\n  AsyncStorage.setItem(\"lastCheckedIn\", JSON.stringify(lastCheckedIn));\n}\n\n// Get the last checked-in location from AsyncStorage\nconst getLastCheckedIn = () => {\n  return AsyncStorage.getItem('lastCheckedIn')\n}\n\n// Remove the last checked-in location from AsyncStorage\nconst removeLastCheckedIn = () => {\n  return AsyncStorage.removeItem('lastCheckedIn')\n}\n\n// Check the current latitude and longitude with the geofences, and send a notification if the user is inside or outside a geofence\nconst checkCurrentLatLongWithGeofence = async (latitude: number, longitude: number) => {\n  // console.log(\"Current latitude and longitude:\", latitude, longitude);\n  try {\n    const getAllGeofences = await BackgroundGeolocation.getGeofences();\n    if (getAllGeofences.length > 0) {\n      const geofences = getAllGeofences.map((geofence) => ({\n        id: geofence?.extras?.location_id,\n        name: geofence?.extras?.locationName,\n        coordinates: geofence?.vertices,\n      }));\n      const currentLocation = [latitude, longitude]; // Replace with actual coordinates\n      const insideGeofences = findContainingPolygons(currentLocation, geofences);\n      if (insideGeofences.length > 0) {\n        const lastCheckedIn = await getLastCheckedIn();\n        if (lastCheckedIn === null) {\n\n          const userData = await AsyncStorage.getItem('userData');\n          const userId = userData ? JSON.parse(userData).id : \"\";\n          updateEnterExitEventOnGeofenceCross(insideGeofences[0].id, insideGeofences[0].name, true, userId);\n          setLastCheckedIn(insideGeofences[0].id, insideGeofences[0].name)\n          // showNotification(true,insideGeofences[0].name)\n        }\n      } else {\n        const lastCheckedIn = await getLastCheckedIn();\n        if (lastCheckedIn !== null) {\n          const userData = await AsyncStorage.getItem('userData');\n          const userId = userData ? JSON.parse(userData).id : \"\";\n          const parseLastCheckedIn = JSON.parse(lastCheckedIn);\n          updateEnterExitEventOnGeofenceCross(parseLastCheckedIn.locationID, parseLastCheckedIn.locatonName, false, userId);\n          // showNotification(false,parseLastCheckedIn.locatonName)\n          await removeLastCheckedIn();\n        }\n      }\n    }\n  } catch (error) {\n    // console.log('Error checking current location with geofence:', error);\n  }\n}\n\n// Store the last checked-in or out geofence event in AsyncStorage on network failed\nconst setLastCheckedInOutOnNetworkFail = (location_id: string, location_name: string, isCheckedIn: boolean) => {\n  const lastCheckedIn = { locationID: location_id, locatonName: location_name, checkedIn: isCheckedIn }\n  AsyncStorage.setItem(\"lastCheckedInOrOut\", JSON.stringify(lastCheckedIn)).then(() => {\n    // console.log(\"lastCheckedInOutStored\")\n  });\n}\n\n// remove last checked-in or out geofence event from AsyncStorage\nconst removeLastCheckedInOrOutEvent = () => {\n  return AsyncStorage.removeItem('lastCheckedInOrOut')\n}\n\n// Get the last checked-in or out location from AsyncStorage\nconst getLastCheckedInOutStoredEvents = () => {\n  return AsyncStorage.getItem('lastCheckedInOrOut')\n}\n\nexport {\n  initBackgroundGeolocationService,\n  startBackgroundGeolocationToEscort,\n  stopBackgroundGeolocation,\n  updateUserLocation,\n  fetchLocation,\n  updateUserLoctionData,\n  initBackgroundLocation,\n  crudGeofenceOperation,\n  insertAllGeofences,\n  updateEventOnGeofenceCross,\n  updateEnterExitEventOnGeofenceCross,\n  findContainingPolygons,\n  getLastCheckedIn,\n  setLastCheckedIn,\n  removeLastCheckedIn,\n  checkCurrentLatLongWithGeofence,\n  setLastCheckedInOutOnNetworkFail,\n  removeLastCheckedInOrOutEvent,\n  getLastCheckedInOutStoredEvents\n};\n\n"],"mappings":"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","ignoreList":[]}