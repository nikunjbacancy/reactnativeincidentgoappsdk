{"version":3,"names":["_reactNavigation","require","_logScreen","_interopRequireDefault","e","__esModule","default","navigator","setTopLevelNavigator","navigatorRef","navigate","routeName","params","dispatch","NavigationActions","back","options","popToTop","StackActions","getActiveRouteName","navigationState","route","routes","index","logScreen","prevState","currentState","currentRouteName","previousRouteName","fbLogScreen","NavigatorService","_default","exports"],"sources":["navigation.ts"],"sourcesContent":["import {\n  NavigationActions,\n  NavigationBackActionPayload,\n  NavigationContainerComponent,\n  NavigationParams,\n  NavigationPopToTopActionPayload,\n  NavigationState,\n  StackActions,\n} from 'react-navigation';\n\nimport fbLogScreen from './firebase/logScreen';\n\nlet navigator: NavigationContainerComponent | null;\n\n\nconst setTopLevelNavigator = (\n  navigatorRef: NavigationContainerComponent | null,\n) => {\n  navigator = navigatorRef;\n};\n\nconst navigate = (routeName: string, params: NavigationParams = {}) => {\n  if (navigator) {\n    navigator.dispatch(\n      NavigationActions.navigate({\n        routeName,\n        params,\n      }),\n    );\n  }\n};\n\nconst back = (options?: NavigationBackActionPayload) => {\n  if (navigator) {\n    navigator.dispatch(NavigationActions.back(options));\n  }\n};\n\nconst popToTop = (options?: NavigationPopToTopActionPayload) => {\n  if (navigator) {\n    navigator.dispatch(StackActions.popToTop(options));\n  }\n};\n\n// const reset = (routeName: string) => {\n//   if (navigator) {\n//     navigator.dispatch(\n//       NavigationActions.reset({\n//         index: 0,\n//         actions: [\n//           NavigationActions.navigate({ routeName: 'Portal'})\n//         ],\n//        key:null\n//       })\n//     );\n//   }\n// };\n\n\nconst getActiveRouteName = (navigationState: NavigationState): string => {\n  if (!navigationState) {\n    return '';\n  }\n  const route = navigationState.routes[navigationState.index];\n  // dive into nested navigators\n  if (route.routes) {\n    return getActiveRouteName(route);\n  }\n  return route.routeName;\n};\n\nconst logScreen = (\n  prevState: NavigationState,\n  currentState: NavigationState,\n) => {\n  const currentRouteName = getActiveRouteName(currentState);\n  const previousRouteName = getActiveRouteName(prevState);\n\n  if (previousRouteName !== currentRouteName) {\n    // fbLogScreen(currentRouteName);\n    fbLogScreen();\n  }\n};\n\nconst NavigatorService = {\n  navigate,\n  back,\n  popToTop,\n  setTopLevelNavigator,\n  logScreen,\n};\n\nexport default NavigatorService;\n"],"mappings":";;;;;;AAAA,IAAAA,gBAAA,GAAAC,OAAA;AAUA,IAAAC,UAAA,GAAAC,sBAAA,CAAAF,OAAA;AAA+C,SAAAE,uBAAAC,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE/C,IAAIG,SAA8C;AAGlD,MAAMC,oBAAoB,GACxBC,YAAiD,IAC9C;EACHF,SAAS,GAAGE,YAAY;AAC1B,CAAC;AAED,MAAMC,QAAQ,GAAGA,CAACC,SAAiB,EAAEC,MAAwB,GAAG,CAAC,CAAC,KAAK;EACrE,IAAIL,SAAS,EAAE;IACbA,SAAS,CAACM,QAAQ,CAChBC,kCAAiB,CAACJ,QAAQ,CAAC;MACzBC,SAAS;MACTC;IACF,CAAC,CACH,CAAC;EACH;AACF,CAAC;AAED,MAAMG,IAAI,GAAIC,OAAqC,IAAK;EACtD,IAAIT,SAAS,EAAE;IACbA,SAAS,CAACM,QAAQ,CAACC,kCAAiB,CAACC,IAAI,CAACC,OAAO,CAAC,CAAC;EACrD;AACF,CAAC;AAED,MAAMC,QAAQ,GAAID,OAAyC,IAAK;EAC9D,IAAIT,SAAS,EAAE;IACbA,SAAS,CAACM,QAAQ,CAACK,6BAAY,CAACD,QAAQ,CAACD,OAAO,CAAC,CAAC;EACpD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMG,kBAAkB,GAAIC,eAAgC,IAAa;EACvE,IAAI,CAACA,eAAe,EAAE;IACpB,OAAO,EAAE;EACX;EACA,MAAMC,KAAK,GAAGD,eAAe,CAACE,MAAM,CAACF,eAAe,CAACG,KAAK,CAAC;EAC3D;EACA,IAAIF,KAAK,CAACC,MAAM,EAAE;IAChB,OAAOH,kBAAkB,CAACE,KAAK,CAAC;EAClC;EACA,OAAOA,KAAK,CAACV,SAAS;AACxB,CAAC;AAED,MAAMa,SAAS,GAAGA,CAChBC,SAA0B,EAC1BC,YAA6B,KAC1B;EACH,MAAMC,gBAAgB,GAAGR,kBAAkB,CAACO,YAAY,CAAC;EACzD,MAAME,iBAAiB,GAAGT,kBAAkB,CAACM,SAAS,CAAC;EAEvD,IAAIG,iBAAiB,KAAKD,gBAAgB,EAAE;IAC1C;IACA,IAAAE,kBAAW,EAAC,CAAC;EACf;AACF,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACvBpB,QAAQ;EACRK,IAAI;EACJE,QAAQ;EACRT,oBAAoB;EACpBgB;AACF,CAAC;AAAC,IAAAO,QAAA,GAAAC,OAAA,CAAA1B,OAAA,GAEawB,gBAAgB","ignoreList":[]}