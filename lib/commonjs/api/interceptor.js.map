{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_constants","_axios","_device","_token","_sdkConfigs","e","__esModule","default","refreshTokenAxios","createAxiosInstance","setHeaders","config","token","undefined","headers","sdkConfigs","configs","headerSecurityCode","getVersion","Authorization","token_type","access_token","refreshToken","post","then","response","data","configInterceptors","axios","interceptors","request","use","tokenStr","AsyncStorage","getItem","TOKEN_KEY","JSON","parse","isTokenExpired","error","Promise","reject","_default","exports"],"sources":["interceptor.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { TOKEN_KEY } from '../containers/app/constants';\nimport { AccessToken } from 'incident-code-core';\nimport createAxiosInstance from '../utils/axios';\nimport { getVersion } from '../utils/device';\nimport { isTokenExpired } from '../utils/token';\nimport { sdkConfigs } from '../sdkConfigs'\n\nconst refreshTokenAxios = createAxiosInstance();\n\nconst setHeaders = (\n  config: AxiosRequestConfig,\n  token: AccessToken | undefined = undefined,\n): AxiosRequestConfig => {\n  const { headers } = config;\n  headers['Security-Code'] = sdkConfigs.configs.headerSecurityCode;\n  headers['Client-Version'] = getVersion();\n\n  if (token) {\n    headers.Authorization = `${token.token_type} ${token.access_token}`;\n  }\n\n  return config;\n};\n\nconst refreshToken = (config: AxiosRequestConfig) =>\n  refreshTokenAxios\n    .post('auth')\n    .then((response: AxiosResponse<AccessToken>) =>\n      setHeaders(config, response.data),\n    );\n\nconst configInterceptors = (axios: AxiosInstance) => {\n  \n  axios.interceptors.request.use(async config => {\n    const tokenStr = await AsyncStorage.getItem(TOKEN_KEY);\n\n    if (!tokenStr) {\n      return setHeaders(config);\n    }\n    const token = JSON.parse(tokenStr);\n    if (isTokenExpired(token)) {\n      return refreshToken(config);\n    }\n    return setHeaders(config, token);\n  });\n\n  axios.interceptors.response.use(\n    response =>\n      // Do something with response data\n      response,\n    error =>\n      // Do something with response error\n      Promise.reject(error),\n  );\n};\n\nexport default configInterceptors;\n"],"mappings":";;;;;;AAAA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,UAAA,GAAAD,OAAA;AAEA,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,OAAA,GAAAH,OAAA;AACA,IAAAI,MAAA,GAAAJ,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AAA0C,SAAAD,uBAAAO,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE1C,MAAMG,iBAAiB,GAAG,IAAAC,cAAmB,EAAC,CAAC;AAE/C,MAAMC,UAAU,GAAGA,CACjBC,MAA0B,EAC1BC,KAA8B,GAAGC,SAAS,KACnB;EACvB,MAAM;IAAEC;EAAQ,CAAC,GAAGH,MAAM;EAC1BG,OAAO,CAAC,eAAe,CAAC,GAAGC,sBAAU,CAACC,OAAO,CAACC,kBAAkB;EAChEH,OAAO,CAAC,gBAAgB,CAAC,GAAG,IAAAI,kBAAU,EAAC,CAAC;EAExC,IAAIN,KAAK,EAAE;IACTE,OAAO,CAACK,aAAa,GAAG,GAAGP,KAAK,CAACQ,UAAU,IAAIR,KAAK,CAACS,YAAY,EAAE;EACrE;EAEA,OAAOV,MAAM;AACf,CAAC;AAED,MAAMW,YAAY,GAAIX,MAA0B,IAC9CH,iBAAiB,CACde,IAAI,CAAC,MAAM,CAAC,CACZC,IAAI,CAAEC,QAAoC,IACzCf,UAAU,CAACC,MAAM,EAAEc,QAAQ,CAACC,IAAI,CAClC,CAAC;AAEL,MAAMC,kBAAkB,GAAIC,KAAoB,IAAK;EAEnDA,KAAK,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAMpB,MAAM,IAAI;IAC7C,MAAMqB,QAAQ,GAAG,MAAMC,qBAAY,CAACC,OAAO,CAACC,oBAAS,CAAC;IAEtD,IAAI,CAACH,QAAQ,EAAE;MACb,OAAOtB,UAAU,CAACC,MAAM,CAAC;IAC3B;IACA,MAAMC,KAAK,GAAGwB,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;IAClC,IAAI,IAAAM,qBAAc,EAAC1B,KAAK,CAAC,EAAE;MACzB,OAAOU,YAAY,CAACX,MAAM,CAAC;IAC7B;IACA,OAAOD,UAAU,CAACC,MAAM,EAAEC,KAAK,CAAC;EAClC,CAAC,CAAC;EAEFgB,KAAK,CAACC,YAAY,CAACJ,QAAQ,CAACM,GAAG,CAC7BN,QAAQ;EACN;EACAA,QAAQ,EACVc,KAAK;EACH;EACAC,OAAO,CAACC,MAAM,CAACF,KAAK,CACxB,CAAC;AACH,CAAC;AAAC,IAAAG,QAAA,GAAAC,OAAA,CAAApC,OAAA,GAEaoB,kBAAkB","ignoreList":[]}