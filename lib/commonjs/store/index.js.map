{"version":3,"names":["_asyncStorage","_interopRequireDefault","require","_reactotron","_redux","_reduxDevtoolsExtension","_reduxPersist","_reduxPromiseListener","_reduxSaga","_reducers","_sagas","e","__esModule","default","initialState","persistConfig","key","storage","AsyncStorage","whitelist","sagaMonitor","Reactotron","createSagaMonitor","sagaMiddleware","createSagaMiddleware","reduxPromiseListener","exports","promiseListener","createReduxPromiseListener","middlewares","enhancers","applyMiddleware","middleware","createEnhancer","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","persistor","persistStore","run","rootSaga"],"sources":["index.ts"],"sourcesContent":["/**\n *\n * Create the store with dynamic reducers\n *\n */\n\n import AsyncStorage from '@react-native-async-storage/async-storage';\nimport Reactotron from '../core/reactotron';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport createReduxPromiseListener from 'redux-promise-listener';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './reducers';\nimport { rootSaga } from './sagas';\n\n// Create redux store with history\nconst initialState = {};\n\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['app', 'languageProvider'],\n};\n\n// create our new saga monitor\nconst sagaMonitor = Reactotron.createSagaMonitor!();\n\nconst sagaMiddleware = createSagaMiddleware({ sagaMonitor });\nconst reduxPromiseListener: any = createReduxPromiseListener();\n\n// Create the store with two middlewares\n// 1. sagaMiddleware: Makes redux-sagas work\n// 2. routerMiddleware: Syncs the location/URL path to the state\nconst middlewares = [sagaMiddleware];\nconst enhancers = [\n  applyMiddleware(...middlewares, reduxPromiseListener.middleware),\n  Reactotron.createEnhancer!(),\n];\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(\n  persistedReducer, // root reducer with router state\n  initialState,\n  composeWithDevTools(...enhancers),\n);\n\nconst persistor = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nexport { store, persistor, reduxPromiseListener as promiseListener };\n"],"mappings":";;;;;;AAMC,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AACD,IAAAC,WAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,uBAAA,GAAAH,OAAA;AACA,IAAAI,aAAA,GAAAJ,OAAA;AACA,IAAAK,qBAAA,GAAAN,sBAAA,CAAAC,OAAA;AACA,IAAAM,UAAA,GAAAP,sBAAA,CAAAC,OAAA;AAEA,IAAAO,SAAA,GAAAR,sBAAA,CAAAC,OAAA;AACA,IAAAQ,MAAA,GAAAR,OAAA;AAAmC,SAAAD,uBAAAU,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAfnC;AACA;AACA;AACA;AACA;;AAaA;AACA,MAAMG,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAEC,qBAAY;EACrBC,SAAS,EAAE,CAAC,KAAK,EAAE,kBAAkB;AACvC,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGC,mBAAU,CAACC,iBAAiB,CAAE,CAAC;AAEnD,MAAMC,cAAc,GAAG,IAAAC,kBAAoB,EAAC;EAAEJ;AAAY,CAAC,CAAC;AAC5D,MAAMK,oBAAyB,GAAAC,OAAA,CAAAC,eAAA,GAAG,IAAAC,6BAA0B,EAAC,CAAC;;AAE9D;AACA;AACA;AACA,MAAMC,WAAW,GAAG,CAACN,cAAc,CAAC;AACpC,MAAMO,SAAS,GAAG,CAChB,IAAAC,sBAAe,EAAC,GAAGF,WAAW,EAAEJ,oBAAoB,CAACO,UAAU,CAAC,EAChEX,mBAAU,CAACY,cAAc,CAAE,CAAC,CAC7B;AAED,MAAMC,gBAAgB,GAAG,IAAAC,4BAAc,EAACpB,aAAa,EAAEqB,iBAAW,CAAC;AAEnE,MAAMC,KAAK,GAAAX,OAAA,CAAAW,KAAA,GAAG,IAAAC,kBAAW,EACvBJ,gBAAgB;AAAE;AAClBpB,YAAY,EACZ,IAAAyB,2CAAmB,EAAC,GAAGT,SAAS,CAClC,CAAC;AAED,MAAMU,SAAS,GAAAd,OAAA,CAAAc,SAAA,GAAG,IAAAC,0BAAY,EAACJ,KAAK,CAAC;AAErCd,cAAc,CAACmB,GAAG,CAACC,eAAQ,CAAC","ignoreList":[]}